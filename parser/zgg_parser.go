// Code generated from parser/ZggParser.g4 by ANTLR 4.13.2. DO NOT EDIT.

package parser // ZggParser

import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type ZggParser struct {
	ZggBaseParser
}

var ZggParserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func zggparserParserInit() {
	staticData := &ZggParserParserStaticData
	staticData.LiteralNames = []string{
		"", "'true'", "'false'", "'for'", "'in'", "'if'", "'while'", "'do'",
		"'break'", "'continue'", "'func'", "'when'", "'else'", "'nil'", "'undefined'",
		"", "'return'", "'export'", "'class'", "'defer'", "'blockDefer'", "'throw'",
		"'try'", "'catch'", "'finally'", "'static'", "'assert'", "'extend'",
		"'use@'", "'use'", "'switch'", "'case'", "'fallthrough'", "'default'",
		"'is'", "", "", "", "", "'0'", "", "", "", "", "", "", "", "", "", "'...'",
		"'->'", "'=>'", "'**'", "'++'", "'--'", "'=='", "'!='", "'>='", "'<='",
		"':='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&&'", "'||'", "'?.'",
		"'??'", "'&'", "'|'", "'~'", "'<<'", "'>>'", "'^'", "'&='", "'|='",
		"'<<='", "'>>='", "'^='", "'..<'", "'..'", "'.'", "','", "';'", "':'",
		"'('", "')'", "'{'", "'}'", "'['", "']'", "'!'", "'?'", "'>'", "'<'",
		"'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'@'", "'@@'", "'''", "",
		"", "'${'",
	}
	staticData.SymbolicNames = []string{
		"", "TRUE", "FALSE", "FOR", "IN", "IF", "WHILE", "DO", "BREAK", "CONTINUE",
		"FUNC", "WHEN", "ELSE", "NIL", "UNDEFINED", "RETURN_NONE", "RETURN",
		"EXPORT", "CLASS", "DEFER", "BLOCK_DEFER", "THROW", "TRY", "CATCH",
		"FINALLY", "STATIC", "ASSERT", "EXTEND", "USE_AT", "USE", "SWITCH",
		"CASE", "FALLTHROUGH", "DEFAULT", "IS", "WS", "LINECOMMENT", "LINECOMMENT2",
		"BLOCKCOMMENT", "INT_ZERO", "INT_DEC", "INT_HEX", "INT_OCT", "INT_BIN",
		"BIGNUM", "FLOAT", "ENUM", "STRING", "RSTRING", "MORE_ARGS", "LEAD_TO",
		"ARROW", "POW", "PLUS_PLUS", "MINUS_MINUS", "EQUAL", "NOT_EQUAL", "GTEQ",
		"LTEQ", "LOCAL_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "TIMES_ASSIGN",
		"DIV_ASSIGN", "MOD_ASSIGN", "LOGIC_AND", "LOGIC_OR", "OPTIONAL_CALL",
		"OPTIONAL_ELSE", "BIT_AND", "BIT_OR", "BIT_NOT", "BIT_SHL", "BIT_SHR",
		"BIT_XOR", "BIT_AND_ASSIGN", "BIT_OR_ASSIGN", "BIT_SHL_ASSIGN", "BIT_SHR_ASSIGN",
		"BIT_XOR_ASSIGN", "RANGE_WITHOUT_END", "RANGE_WITH_END", "DOT", "COMMA",
		"SEMICOLON", "COLON", "L_PAREN", "R_PAREN", "L_CURLY", "R_CURLY", "L_BRACKET",
		"R_BRACKET", "LOGIC_NOT", "QUESTION", "GT", "LT", "ASSIGN", "PLUS",
		"MINUS", "TIMES", "DIV", "MOD", "SINGLE_AT", "DOUBLE_AT", "QUOTE", "IDENTIFIER",
		"TS_RAW", "TS_EXPR_START", "TS_IDENTIFIER", "StrExpr_WS",
	}
	staticData.RuleNames = []string{
		"replItem", "module", "block", "codeBlock", "stmt", "ifCondition", "memberDef",
		"callStmt", "switchCase", "switchDefault", "comparator", "expr", "whenCondition",
		"arguments", "funcArgument", "assignExpr", "preIncDec", "postIncDec",
		"lval", "integer", "literal", "arrayItem", "objItem", "keyValue", "stringLiteral",
		"templateString", "tsItem",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 109, 854, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7,
		4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7,
		10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15,
		2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2,
		21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26,
		7, 26, 1, 0, 1, 0, 3, 0, 57, 8, 0, 1, 1, 1, 1, 1, 2, 1, 2, 3, 2, 63, 8,
		2, 5, 2, 65, 8, 2, 10, 2, 12, 2, 68, 9, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 4,
		1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 5, 4, 85, 8,
		4, 10, 4, 12, 4, 88, 9, 4, 1, 4, 1, 4, 1, 4, 3, 4, 93, 8, 4, 1, 4, 3, 4,
		96, 8, 4, 1, 4, 1, 4, 1, 4, 3, 4, 101, 8, 4, 3, 4, 103, 8, 4, 1, 4, 1,
		4, 1, 4, 3, 4, 108, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 116,
		8, 4, 1, 4, 1, 4, 3, 4, 120, 8, 4, 1, 4, 1, 4, 5, 4, 124, 8, 4, 10, 4,
		12, 4, 127, 9, 4, 1, 4, 1, 4, 1, 4, 3, 4, 132, 8, 4, 1, 4, 1, 4, 1, 4,
		1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 144, 8, 4, 1, 4, 1, 4,
		1, 4, 3, 4, 149, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 156, 8, 4, 1,
		4, 1, 4, 3, 4, 160, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 166, 8, 4, 1, 4,
		1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 175, 8, 4, 1, 4, 1, 4, 1, 4,
		1, 4, 1, 4, 1, 4, 3, 4, 183, 8, 4, 1, 4, 1, 4, 3, 4, 187, 8, 4, 1, 4, 1,
		4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 5, 4, 197, 8, 4, 10, 4, 12, 4, 200,
		9, 4, 1, 4, 1, 4, 3, 4, 204, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 4, 4, 210, 8,
		4, 11, 4, 12, 4, 211, 1, 4, 3, 4, 215, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,
		4, 3, 4, 222, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,
		4, 1, 4, 1, 4, 1, 4, 1, 4, 5, 4, 237, 8, 4, 10, 4, 12, 4, 240, 9, 4, 1,
		4, 1, 4, 1, 4, 3, 4, 245, 8, 4, 1, 4, 3, 4, 248, 8, 4, 1, 4, 1, 4, 3, 4,
		252, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 259, 8, 4, 1, 4, 1, 4, 1,
		4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 274,
		8, 4, 1, 4, 1, 4, 3, 4, 278, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 284, 8,
		4, 1, 4, 3, 4, 287, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 5, 4, 293, 8, 4, 10,
		4, 12, 4, 296, 9, 4, 1, 4, 1, 4, 3, 4, 300, 8, 4, 1, 5, 1, 5, 1, 5, 3,
		5, 305, 8, 5, 1, 5, 1, 5, 1, 6, 3, 6, 310, 8, 6, 1, 6, 1, 6, 1, 7, 1, 7,
		3, 7, 316, 8, 7, 1, 7, 1, 7, 1, 7, 3, 7, 321, 8, 7, 1, 8, 1, 8, 1, 8, 1,
		8, 1, 8, 3, 8, 328, 8, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 11,
		1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1,
		11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 4, 11,
		357, 8, 11, 11, 11, 12, 11, 358, 1, 11, 1, 11, 1, 11, 3, 11, 364, 8, 11,
		1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 4, 11, 375,
		8, 11, 11, 11, 12, 11, 376, 1, 11, 1, 11, 1, 11, 3, 11, 382, 8, 11, 1,
		11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11,
		1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 3, 11, 400, 8, 11, 1, 11, 1, 11, 1,
		11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11,
		1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1,
		11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11,
		1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1,
		11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 3, 11,
		456, 8, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1,
		11, 1, 11, 1, 11, 1, 11, 3, 11, 470, 8, 11, 1, 11, 1, 11, 3, 11, 474, 8,
		11, 1, 11, 1, 11, 1, 11, 5, 11, 479, 8, 11, 10, 11, 12, 11, 482, 9, 11,
		1, 12, 1, 12, 1, 12, 5, 12, 487, 8, 12, 10, 12, 12, 12, 490, 9, 12, 1,
		12, 3, 12, 493, 8, 12, 1, 12, 1, 12, 3, 12, 497, 8, 12, 1, 12, 1, 12, 3,
		12, 501, 8, 12, 1, 13, 1, 13, 1, 13, 1, 13, 5, 13, 507, 8, 13, 10, 13,
		12, 13, 510, 9, 13, 1, 13, 3, 13, 513, 8, 13, 3, 13, 515, 8, 13, 1, 13,
		1, 13, 1, 14, 3, 14, 520, 8, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1,
		14, 3, 14, 528, 8, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 535, 8,
		14, 3, 14, 537, 8, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15,
		1, 15, 1, 15, 1, 15, 1, 15, 5, 15, 550, 8, 15, 10, 15, 12, 15, 553, 9,
		15, 1, 15, 1, 15, 1, 15, 3, 15, 558, 8, 15, 1, 15, 3, 15, 561, 8, 15, 1,
		15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 5, 15, 570, 8, 15, 10, 15,
		12, 15, 573, 9, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 581,
		8, 15, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1,
		18, 3, 18, 593, 8, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18,
		1, 18, 5, 18, 603, 8, 18, 10, 18, 12, 18, 606, 9, 18, 1, 19, 1, 19, 1,
		19, 1, 19, 1, 19, 3, 19, 613, 8, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20,
		1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 5, 20, 628, 8,
		20, 10, 20, 12, 20, 631, 9, 20, 1, 20, 1, 20, 1, 20, 3, 20, 636, 8, 20,
		1, 20, 3, 20, 639, 8, 20, 1, 20, 1, 20, 3, 20, 643, 8, 20, 1, 20, 1, 20,
		1, 20, 1, 20, 1, 20, 1, 20, 5, 20, 651, 8, 20, 10, 20, 12, 20, 654, 9,
		20, 1, 20, 1, 20, 1, 20, 3, 20, 659, 8, 20, 1, 20, 3, 20, 662, 8, 20, 1,
		20, 1, 20, 3, 20, 666, 8, 20, 1, 20, 1, 20, 3, 20, 670, 8, 20, 1, 20, 1,
		20, 1, 20, 1, 20, 1, 20, 1, 20, 5, 20, 678, 8, 20, 10, 20, 12, 20, 681,
		9, 20, 1, 20, 1, 20, 1, 20, 3, 20, 686, 8, 20, 1, 20, 3, 20, 689, 8, 20,
		1, 20, 1, 20, 3, 20, 693, 8, 20, 1, 20, 1, 20, 3, 20, 697, 8, 20, 1, 20,
		1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 5, 20, 705, 8, 20, 10, 20, 12, 20, 708,
		9, 20, 1, 20, 3, 20, 711, 8, 20, 3, 20, 713, 8, 20, 1, 20, 1, 20, 1, 20,
		1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 3, 20, 723, 8, 20, 1, 20, 1, 20, 1,
		20, 1, 20, 1, 20, 3, 20, 730, 8, 20, 1, 20, 1, 20, 3, 20, 734, 8, 20, 1,
		20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 5, 20, 742, 8, 20, 10, 20, 12, 20,
		745, 9, 20, 1, 20, 3, 20, 748, 8, 20, 3, 20, 750, 8, 20, 1, 20, 1, 20,
		1, 20, 1, 20, 1, 20, 1, 20, 3, 20, 758, 8, 20, 1, 20, 1, 20, 1, 20, 1,
		20, 1, 20, 3, 20, 765, 8, 20, 1, 20, 1, 20, 3, 20, 769, 8, 20, 1, 20, 1,
		20, 3, 20, 773, 8, 20, 1, 21, 3, 21, 776, 8, 21, 1, 21, 1, 21, 1, 21, 3,
		21, 781, 8, 21, 1, 22, 1, 22, 1, 22, 3, 22, 786, 8, 22, 1, 23, 1, 23, 1,
		23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23,
		1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 5, 23, 806, 8, 23, 10, 23, 12, 23, 809,
		9, 23, 1, 23, 1, 23, 1, 23, 3, 23, 814, 8, 23, 1, 23, 3, 23, 817, 8, 23,
		1, 23, 1, 23, 3, 23, 821, 8, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1,
		23, 1, 23, 3, 23, 830, 8, 23, 1, 24, 1, 24, 1, 24, 3, 24, 835, 8, 24, 1,
		25, 1, 25, 5, 25, 839, 8, 25, 10, 25, 12, 25, 842, 9, 25, 1, 25, 1, 25,
		1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 852, 8, 26, 1, 26, 0,
		2, 22, 36, 27, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,
		32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 0, 11, 1, 0, 80, 81, 1, 0,
		19, 20, 2, 0, 55, 58, 94, 95, 1, 0, 102, 103, 1, 0, 99, 101, 1, 0, 97,
		98, 1, 0, 72, 73, 1, 0, 39, 40, 3, 0, 60, 63, 75, 79, 96, 96, 1, 0, 53,
		54, 1, 0, 1, 2, 1025, 0, 56, 1, 0, 0, 0, 2, 58, 1, 0, 0, 0, 4, 66, 1, 0,
		0, 0, 6, 69, 1, 0, 0, 0, 8, 299, 1, 0, 0, 0, 10, 304, 1, 0, 0, 0, 12, 309,
		1, 0, 0, 0, 14, 313, 1, 0, 0, 0, 16, 322, 1, 0, 0, 0, 18, 329, 1, 0, 0,
		0, 20, 333, 1, 0, 0, 0, 22, 399, 1, 0, 0, 0, 24, 500, 1, 0, 0, 0, 26, 502,
		1, 0, 0, 0, 28, 536, 1, 0, 0, 0, 30, 580, 1, 0, 0, 0, 32, 582, 1, 0, 0,
		0, 34, 585, 1, 0, 0, 0, 36, 592, 1, 0, 0, 0, 38, 612, 1, 0, 0, 0, 40, 772,
		1, 0, 0, 0, 42, 775, 1, 0, 0, 0, 44, 785, 1, 0, 0, 0, 46, 829, 1, 0, 0,
		0, 48, 834, 1, 0, 0, 0, 50, 836, 1, 0, 0, 0, 52, 851, 1, 0, 0, 0, 54, 57,
		3, 22, 11, 0, 55, 57, 3, 4, 2, 0, 56, 54, 1, 0, 0, 0, 56, 55, 1, 0, 0,
		0, 57, 1, 1, 0, 0, 0, 58, 59, 3, 4, 2, 0, 59, 3, 1, 0, 0, 0, 60, 62, 3,
		8, 4, 0, 61, 63, 5, 84, 0, 0, 62, 61, 1, 0, 0, 0, 62, 63, 1, 0, 0, 0, 63,
		65, 1, 0, 0, 0, 64, 60, 1, 0, 0, 0, 65, 68, 1, 0, 0, 0, 66, 64, 1, 0, 0,
		0, 66, 67, 1, 0, 0, 0, 67, 5, 1, 0, 0, 0, 68, 66, 1, 0, 0, 0, 69, 70, 5,
		88, 0, 0, 70, 71, 3, 4, 2, 0, 71, 72, 5, 89, 0, 0, 72, 7, 1, 0, 0, 0, 73,
		300, 3, 6, 3, 0, 74, 300, 3, 32, 16, 0, 75, 300, 3, 34, 17, 0, 76, 300,
		3, 30, 15, 0, 77, 300, 3, 14, 7, 0, 78, 79, 5, 10, 0, 0, 79, 80, 5, 105,
		0, 0, 80, 102, 5, 86, 0, 0, 81, 86, 5, 105, 0, 0, 82, 83, 5, 83, 0, 0,
		83, 85, 5, 105, 0, 0, 84, 82, 1, 0, 0, 0, 85, 88, 1, 0, 0, 0, 86, 84, 1,
		0, 0, 0, 86, 87, 1, 0, 0, 0, 87, 92, 1, 0, 0, 0, 88, 86, 1, 0, 0, 0, 89,
		90, 5, 83, 0, 0, 90, 91, 5, 49, 0, 0, 91, 93, 5, 105, 0, 0, 92, 89, 1,
		0, 0, 0, 92, 93, 1, 0, 0, 0, 93, 95, 1, 0, 0, 0, 94, 96, 5, 83, 0, 0, 95,
		94, 1, 0, 0, 0, 95, 96, 1, 0, 0, 0, 96, 103, 1, 0, 0, 0, 97, 98, 5, 49,
		0, 0, 98, 100, 5, 105, 0, 0, 99, 101, 5, 83, 0, 0, 100, 99, 1, 0, 0, 0,
		100, 101, 1, 0, 0, 0, 101, 103, 1, 0, 0, 0, 102, 81, 1, 0, 0, 0, 102, 97,
		1, 0, 0, 0, 102, 103, 1, 0, 0, 0, 103, 104, 1, 0, 0, 0, 104, 105, 5, 87,
		0, 0, 105, 300, 3, 6, 3, 0, 106, 108, 5, 17, 0, 0, 107, 106, 1, 0, 0, 0,
		107, 108, 1, 0, 0, 0, 108, 109, 1, 0, 0, 0, 109, 110, 5, 18, 0, 0, 110,
		119, 5, 105, 0, 0, 111, 112, 5, 86, 0, 0, 112, 115, 3, 22, 11, 0, 113,
		114, 5, 83, 0, 0, 114, 116, 3, 22, 11, 0, 115, 113, 1, 0, 0, 0, 115, 116,
		1, 0, 0, 0, 116, 117, 1, 0, 0, 0, 117, 118, 5, 87, 0, 0, 118, 120, 1, 0,
		0, 0, 119, 111, 1, 0, 0, 0, 119, 120, 1, 0, 0, 0, 120, 121, 1, 0, 0, 0,
		121, 125, 5, 88, 0, 0, 122, 124, 3, 12, 6, 0, 123, 122, 1, 0, 0, 0, 124,
		127, 1, 0, 0, 0, 125, 123, 1, 0, 0, 0, 125, 126, 1, 0, 0, 0, 126, 128,
		1, 0, 0, 0, 127, 125, 1, 0, 0, 0, 128, 300, 5, 89, 0, 0, 129, 130, 5, 105,
		0, 0, 130, 132, 5, 85, 0, 0, 131, 129, 1, 0, 0, 0, 131, 132, 1, 0, 0, 0,
		132, 133, 1, 0, 0, 0, 133, 134, 5, 3, 0, 0, 134, 135, 3, 22, 11, 0, 135,
		136, 5, 84, 0, 0, 136, 137, 3, 22, 11, 0, 137, 138, 5, 84, 0, 0, 138, 139,
		3, 22, 11, 0, 139, 140, 3, 6, 3, 0, 140, 300, 1, 0, 0, 0, 141, 142, 5,
		105, 0, 0, 142, 144, 5, 85, 0, 0, 143, 141, 1, 0, 0, 0, 143, 144, 1, 0,
		0, 0, 144, 145, 1, 0, 0, 0, 145, 148, 5, 3, 0, 0, 146, 147, 5, 105, 0,
		0, 147, 149, 5, 83, 0, 0, 148, 146, 1, 0, 0, 0, 148, 149, 1, 0, 0, 0, 149,
		150, 1, 0, 0, 0, 150, 151, 5, 105, 0, 0, 151, 152, 5, 4, 0, 0, 152, 155,
		3, 22, 11, 0, 153, 154, 7, 0, 0, 0, 154, 156, 3, 22, 11, 0, 155, 153, 1,
		0, 0, 0, 155, 156, 1, 0, 0, 0, 156, 159, 1, 0, 0, 0, 157, 158, 5, 5, 0,
		0, 158, 160, 3, 22, 11, 0, 159, 157, 1, 0, 0, 0, 159, 160, 1, 0, 0, 0,
		160, 161, 1, 0, 0, 0, 161, 162, 3, 6, 3, 0, 162, 300, 1, 0, 0, 0, 163,
		164, 5, 105, 0, 0, 164, 166, 5, 85, 0, 0, 165, 163, 1, 0, 0, 0, 165, 166,
		1, 0, 0, 0, 166, 167, 1, 0, 0, 0, 167, 168, 5, 7, 0, 0, 168, 169, 3, 6,
		3, 0, 169, 170, 5, 6, 0, 0, 170, 171, 3, 22, 11, 0, 171, 300, 1, 0, 0,
		0, 172, 173, 5, 105, 0, 0, 173, 175, 5, 85, 0, 0, 174, 172, 1, 0, 0, 0,
		174, 175, 1, 0, 0, 0, 175, 176, 1, 0, 0, 0, 176, 177, 5, 6, 0, 0, 177,
		178, 3, 22, 11, 0, 178, 179, 3, 6, 3, 0, 179, 300, 1, 0, 0, 0, 180, 182,
		5, 9, 0, 0, 181, 183, 5, 105, 0, 0, 182, 181, 1, 0, 0, 0, 182, 183, 1,
		0, 0, 0, 183, 300, 1, 0, 0, 0, 184, 186, 5, 8, 0, 0, 185, 187, 5, 105,
		0, 0, 186, 185, 1, 0, 0, 0, 186, 187, 1, 0, 0, 0, 187, 300, 1, 0, 0, 0,
		188, 189, 5, 5, 0, 0, 189, 190, 3, 10, 5, 0, 190, 198, 3, 6, 3, 0, 191,
		192, 5, 12, 0, 0, 192, 193, 5, 5, 0, 0, 193, 194, 3, 10, 5, 0, 194, 195,
		3, 6, 3, 0, 195, 197, 1, 0, 0, 0, 196, 191, 1, 0, 0, 0, 197, 200, 1, 0,
		0, 0, 198, 196, 1, 0, 0, 0, 198, 199, 1, 0, 0, 0, 199, 203, 1, 0, 0, 0,
		200, 198, 1, 0, 0, 0, 201, 202, 5, 12, 0, 0, 202, 204, 3, 6, 3, 0, 203,
		201, 1, 0, 0, 0, 203, 204, 1, 0, 0, 0, 204, 300, 1, 0, 0, 0, 205, 206,
		5, 30, 0, 0, 206, 207, 3, 22, 11, 0, 207, 209, 5, 88, 0, 0, 208, 210, 3,
		16, 8, 0, 209, 208, 1, 0, 0, 0, 210, 211, 1, 0, 0, 0, 211, 209, 1, 0, 0,
		0, 211, 212, 1, 0, 0, 0, 212, 214, 1, 0, 0, 0, 213, 215, 3, 18, 9, 0, 214,
		213, 1, 0, 0, 0, 214, 215, 1, 0, 0, 0, 215, 216, 1, 0, 0, 0, 216, 217,
		5, 89, 0, 0, 217, 300, 1, 0, 0, 0, 218, 300, 5, 15, 0, 0, 219, 221, 5,
		16, 0, 0, 220, 222, 3, 22, 11, 0, 221, 220, 1, 0, 0, 0, 221, 222, 1, 0,
		0, 0, 222, 300, 1, 0, 0, 0, 223, 224, 5, 17, 0, 0, 224, 300, 5, 105, 0,
		0, 225, 226, 5, 17, 0, 0, 226, 227, 5, 105, 0, 0, 227, 228, 5, 59, 0, 0,
		228, 300, 3, 22, 11, 0, 229, 230, 5, 17, 0, 0, 230, 231, 5, 10, 0, 0, 231,
		232, 5, 105, 0, 0, 232, 251, 5, 86, 0, 0, 233, 238, 5, 105, 0, 0, 234,
		235, 5, 83, 0, 0, 235, 237, 5, 105, 0, 0, 236, 234, 1, 0, 0, 0, 237, 240,
		1, 0, 0, 0, 238, 236, 1, 0, 0, 0, 238, 239, 1, 0, 0, 0, 239, 244, 1, 0,
		0, 0, 240, 238, 1, 0, 0, 0, 241, 242, 5, 83, 0, 0, 242, 243, 5, 49, 0,
		0, 243, 245, 5, 105, 0, 0, 244, 241, 1, 0, 0, 0, 244, 245, 1, 0, 0, 0,
		245, 247, 1, 0, 0, 0, 246, 248, 5, 83, 0, 0, 247, 246, 1, 0, 0, 0, 247,
		248, 1, 0, 0, 0, 248, 252, 1, 0, 0, 0, 249, 250, 5, 49, 0, 0, 250, 252,
		5, 105, 0, 0, 251, 233, 1, 0, 0, 0, 251, 249, 1, 0, 0, 0, 251, 252, 1,
		0, 0, 0, 252, 253, 1, 0, 0, 0, 253, 254, 5, 87, 0, 0, 254, 300, 3, 6, 3,
		0, 255, 256, 7, 1, 0, 0, 256, 258, 3, 22, 11, 0, 257, 259, 5, 67, 0, 0,
		258, 257, 1, 0, 0, 0, 258, 259, 1, 0, 0, 0, 259, 260, 1, 0, 0, 0, 260,
		261, 3, 26, 13, 0, 261, 300, 1, 0, 0, 0, 262, 263, 7, 1, 0, 0, 263, 300,
		3, 6, 3, 0, 264, 265, 5, 22, 0, 0, 265, 277, 3, 6, 3, 0, 266, 267, 5, 23,
		0, 0, 267, 268, 5, 86, 0, 0, 268, 269, 5, 105, 0, 0, 269, 270, 5, 87, 0,
		0, 270, 273, 3, 6, 3, 0, 271, 272, 5, 24, 0, 0, 272, 274, 3, 6, 3, 0, 273,
		271, 1, 0, 0, 0, 273, 274, 1, 0, 0, 0, 274, 278, 1, 0, 0, 0, 275, 276,
		5, 24, 0, 0, 276, 278, 3, 6, 3, 0, 277, 266, 1, 0, 0, 0, 277, 275, 1, 0,
		0, 0, 278, 300, 1, 0, 0, 0, 279, 280, 5, 26, 0, 0, 280, 283, 3, 22, 11,
		0, 281, 282, 5, 83, 0, 0, 282, 284, 3, 22, 11, 0, 283, 281, 1, 0, 0, 0,
		283, 284, 1, 0, 0, 0, 284, 300, 1, 0, 0, 0, 285, 287, 5, 17, 0, 0, 286,
		285, 1, 0, 0, 0, 286, 287, 1, 0, 0, 0, 287, 288, 1, 0, 0, 0, 288, 289,
		5, 27, 0, 0, 289, 290, 3, 22, 11, 0, 290, 294, 5, 88, 0, 0, 291, 293, 3,
		46, 23, 0, 292, 291, 1, 0, 0, 0, 293, 296, 1, 0, 0, 0, 294, 292, 1, 0,
		0, 0, 294, 295, 1, 0, 0, 0, 295, 297, 1, 0, 0, 0, 296, 294, 1, 0, 0, 0,
		297, 298, 5, 89, 0, 0, 298, 300, 1, 0, 0, 0, 299, 73, 1, 0, 0, 0, 299,
		74, 1, 0, 0, 0, 299, 75, 1, 0, 0, 0, 299, 76, 1, 0, 0, 0, 299, 77, 1, 0,
		0, 0, 299, 78, 1, 0, 0, 0, 299, 107, 1, 0, 0, 0, 299, 131, 1, 0, 0, 0,
		299, 143, 1, 0, 0, 0, 299, 165, 1, 0, 0, 0, 299, 174, 1, 0, 0, 0, 299,
		180, 1, 0, 0, 0, 299, 184, 1, 0, 0, 0, 299, 188, 1, 0, 0, 0, 299, 205,
		1, 0, 0, 0, 299, 218, 1, 0, 0, 0, 299, 219, 1, 0, 0, 0, 299, 223, 1, 0,
		0, 0, 299, 225, 1, 0, 0, 0, 299, 229, 1, 0, 0, 0, 299, 255, 1, 0, 0, 0,
		299, 262, 1, 0, 0, 0, 299, 264, 1, 0, 0, 0, 299, 279, 1, 0, 0, 0, 299,
		286, 1, 0, 0, 0, 300, 9, 1, 0, 0, 0, 301, 302, 3, 30, 15, 0, 302, 303,
		5, 84, 0, 0, 303, 305, 1, 0, 0, 0, 304, 301, 1, 0, 0, 0, 304, 305, 1, 0,
		0, 0, 305, 306, 1, 0, 0, 0, 306, 307, 3, 22, 11, 0, 307, 11, 1, 0, 0, 0,
		308, 310, 5, 25, 0, 0, 309, 308, 1, 0, 0, 0, 309, 310, 1, 0, 0, 0, 310,
		311, 1, 0, 0, 0, 311, 312, 3, 46, 23, 0, 312, 13, 1, 0, 0, 0, 313, 315,
		3, 22, 11, 0, 314, 316, 5, 67, 0, 0, 315, 314, 1, 0, 0, 0, 315, 316, 1,
		0, 0, 0, 316, 317, 1, 0, 0, 0, 317, 320, 3, 26, 13, 0, 318, 319, 5, 68,
		0, 0, 319, 321, 3, 6, 3, 0, 320, 318, 1, 0, 0, 0, 320, 321, 1, 0, 0, 0,
		321, 15, 1, 0, 0, 0, 322, 323, 5, 31, 0, 0, 323, 324, 3, 24, 12, 0, 324,
		325, 5, 85, 0, 0, 325, 327, 3, 4, 2, 0, 326, 328, 5, 32, 0, 0, 327, 326,
		1, 0, 0, 0, 327, 328, 1, 0, 0, 0, 328, 17, 1, 0, 0, 0, 329, 330, 5, 33,
		0, 0, 330, 331, 5, 85, 0, 0, 331, 332, 3, 4, 2, 0, 332, 19, 1, 0, 0, 0,
		333, 334, 7, 2, 0, 0, 334, 21, 1, 0, 0, 0, 335, 336, 6, 11, -1, 0, 336,
		337, 7, 3, 0, 0, 337, 400, 5, 105, 0, 0, 338, 400, 3, 32, 16, 0, 339, 400,
		3, 34, 17, 0, 340, 341, 5, 82, 0, 0, 341, 400, 5, 105, 0, 0, 342, 400,
		5, 105, 0, 0, 343, 400, 3, 40, 20, 0, 344, 345, 5, 98, 0, 0, 345, 400,
		3, 22, 11, 26, 346, 347, 5, 92, 0, 0, 347, 400, 3, 22, 11, 25, 348, 349,
		5, 71, 0, 0, 349, 400, 3, 22, 11, 24, 350, 351, 5, 11, 0, 0, 351, 356,
		5, 88, 0, 0, 352, 353, 3, 22, 11, 0, 353, 354, 5, 50, 0, 0, 354, 355, 3,
		22, 11, 0, 355, 357, 1, 0, 0, 0, 356, 352, 1, 0, 0, 0, 357, 358, 1, 0,
		0, 0, 358, 356, 1, 0, 0, 0, 358, 359, 1, 0, 0, 0, 359, 363, 1, 0, 0, 0,
		360, 361, 5, 12, 0, 0, 361, 362, 5, 50, 0, 0, 362, 364, 3, 22, 11, 0, 363,
		360, 1, 0, 0, 0, 363, 364, 1, 0, 0, 0, 364, 365, 1, 0, 0, 0, 365, 366,
		5, 89, 0, 0, 366, 400, 1, 0, 0, 0, 367, 368, 5, 11, 0, 0, 368, 369, 3,
		22, 11, 0, 369, 374, 5, 88, 0, 0, 370, 371, 3, 24, 12, 0, 371, 372, 5,
		50, 0, 0, 372, 373, 3, 22, 11, 0, 373, 375, 1, 0, 0, 0, 374, 370, 1, 0,
		0, 0, 375, 376, 1, 0, 0, 0, 376, 374, 1, 0, 0, 0, 376, 377, 1, 0, 0, 0,
		377, 381, 1, 0, 0, 0, 378, 379, 5, 12, 0, 0, 379, 380, 5, 50, 0, 0, 380,
		382, 3, 22, 11, 0, 381, 378, 1, 0, 0, 0, 381, 382, 1, 0, 0, 0, 382, 383,
		1, 0, 0, 0, 383, 384, 5, 89, 0, 0, 384, 400, 1, 0, 0, 0, 385, 400, 3, 30,
		15, 0, 386, 387, 5, 86, 0, 0, 387, 388, 3, 22, 11, 0, 388, 389, 5, 87,
		0, 0, 389, 400, 1, 0, 0, 0, 390, 391, 5, 28, 0, 0, 391, 392, 5, 105, 0,
		0, 392, 400, 3, 22, 11, 4, 393, 394, 5, 28, 0, 0, 394, 395, 3, 6, 3, 0,
		395, 396, 3, 22, 11, 3, 396, 400, 1, 0, 0, 0, 397, 398, 5, 29, 0, 0, 398,
		400, 3, 22, 11, 2, 399, 335, 1, 0, 0, 0, 399, 338, 1, 0, 0, 0, 399, 339,
		1, 0, 0, 0, 399, 340, 1, 0, 0, 0, 399, 342, 1, 0, 0, 0, 399, 343, 1, 0,
		0, 0, 399, 344, 1, 0, 0, 0, 399, 346, 1, 0, 0, 0, 399, 348, 1, 0, 0, 0,
		399, 350, 1, 0, 0, 0, 399, 367, 1, 0, 0, 0, 399, 385, 1, 0, 0, 0, 399,
		386, 1, 0, 0, 0, 399, 390, 1, 0, 0, 0, 399, 393, 1, 0, 0, 0, 399, 397,
		1, 0, 0, 0, 400, 480, 1, 0, 0, 0, 401, 402, 10, 23, 0, 0, 402, 403, 5,
		52, 0, 0, 403, 479, 3, 22, 11, 23, 404, 405, 10, 22, 0, 0, 405, 406, 7,
		4, 0, 0, 406, 479, 3, 22, 11, 23, 407, 408, 10, 21, 0, 0, 408, 409, 7,
		5, 0, 0, 409, 479, 3, 22, 11, 22, 410, 411, 10, 20, 0, 0, 411, 412, 7,
		6, 0, 0, 412, 479, 3, 22, 11, 21, 413, 414, 10, 19, 0, 0, 414, 415, 5,
		69, 0, 0, 415, 479, 3, 22, 11, 20, 416, 417, 10, 18, 0, 0, 417, 418, 5,
		70, 0, 0, 418, 479, 3, 22, 11, 19, 419, 420, 10, 17, 0, 0, 420, 421, 5,
		74, 0, 0, 421, 479, 3, 22, 11, 18, 422, 423, 10, 16, 0, 0, 423, 424, 3,
		20, 10, 0, 424, 425, 3, 22, 11, 17, 425, 479, 1, 0, 0, 0, 426, 427, 10,
		15, 0, 0, 427, 428, 5, 34, 0, 0, 428, 479, 3, 22, 11, 16, 429, 430, 10,
		14, 0, 0, 430, 431, 5, 4, 0, 0, 431, 479, 3, 22, 11, 15, 432, 433, 10,
		13, 0, 0, 433, 434, 5, 4, 0, 0, 434, 435, 3, 22, 11, 0, 435, 436, 7, 0,
		0, 0, 436, 437, 3, 22, 11, 14, 437, 479, 1, 0, 0, 0, 438, 439, 10, 12,
		0, 0, 439, 440, 5, 65, 0, 0, 440, 479, 3, 22, 11, 13, 441, 442, 10, 11,
		0, 0, 442, 443, 5, 66, 0, 0, 443, 479, 3, 22, 11, 12, 444, 445, 10, 8,
		0, 0, 445, 446, 5, 93, 0, 0, 446, 447, 3, 22, 11, 0, 447, 448, 5, 85, 0,
		0, 448, 449, 3, 22, 11, 9, 449, 479, 1, 0, 0, 0, 450, 451, 10, 7, 0, 0,
		451, 452, 5, 68, 0, 0, 452, 479, 3, 22, 11, 8, 453, 455, 10, 36, 0, 0,
		454, 456, 5, 67, 0, 0, 455, 454, 1, 0, 0, 0, 455, 456, 1, 0, 0, 0, 456,
		457, 1, 0, 0, 0, 457, 479, 3, 26, 13, 0, 458, 459, 10, 31, 0, 0, 459, 460,
		5, 82, 0, 0, 460, 479, 5, 105, 0, 0, 461, 462, 10, 30, 0, 0, 462, 463,
		5, 90, 0, 0, 463, 464, 3, 22, 11, 0, 464, 465, 5, 91, 0, 0, 465, 479, 1,
		0, 0, 0, 466, 467, 10, 29, 0, 0, 467, 469, 5, 90, 0, 0, 468, 470, 3, 22,
		11, 0, 469, 468, 1, 0, 0, 0, 469, 470, 1, 0, 0, 0, 470, 471, 1, 0, 0, 0,
		471, 473, 5, 85, 0, 0, 472, 474, 3, 22, 11, 0, 473, 472, 1, 0, 0, 0, 473,
		474, 1, 0, 0, 0, 474, 475, 1, 0, 0, 0, 475, 479, 5, 91, 0, 0, 476, 477,
		10, 1, 0, 0, 477, 479, 5, 92, 0, 0, 478, 401, 1, 0, 0, 0, 478, 404, 1,
		0, 0, 0, 478, 407, 1, 0, 0, 0, 478, 410, 1, 0, 0, 0, 478, 413, 1, 0, 0,
		0, 478, 416, 1, 0, 0, 0, 478, 419, 1, 0, 0, 0, 478, 422, 1, 0, 0, 0, 478,
		426, 1, 0, 0, 0, 478, 429, 1, 0, 0, 0, 478, 432, 1, 0, 0, 0, 478, 438,
		1, 0, 0, 0, 478, 441, 1, 0, 0, 0, 478, 444, 1, 0, 0, 0, 478, 450, 1, 0,
		0, 0, 478, 453, 1, 0, 0, 0, 478, 458, 1, 0, 0, 0, 478, 461, 1, 0, 0, 0,
		478, 466, 1, 0, 0, 0, 478, 476, 1, 0, 0, 0, 479, 482, 1, 0, 0, 0, 480,
		478, 1, 0, 0, 0, 480, 481, 1, 0, 0, 0, 481, 23, 1, 0, 0, 0, 482, 480, 1,
		0, 0, 0, 483, 488, 3, 22, 11, 0, 484, 485, 5, 83, 0, 0, 485, 487, 3, 22,
		11, 0, 486, 484, 1, 0, 0, 0, 487, 490, 1, 0, 0, 0, 488, 486, 1, 0, 0, 0,
		488, 489, 1, 0, 0, 0, 489, 501, 1, 0, 0, 0, 490, 488, 1, 0, 0, 0, 491,
		493, 3, 22, 11, 0, 492, 491, 1, 0, 0, 0, 492, 493, 1, 0, 0, 0, 493, 494,
		1, 0, 0, 0, 494, 496, 7, 0, 0, 0, 495, 497, 3, 22, 11, 0, 496, 495, 1,
		0, 0, 0, 496, 497, 1, 0, 0, 0, 497, 501, 1, 0, 0, 0, 498, 499, 5, 34, 0,
		0, 499, 501, 3, 22, 11, 0, 500, 483, 1, 0, 0, 0, 500, 492, 1, 0, 0, 0,
		500, 498, 1, 0, 0, 0, 501, 25, 1, 0, 0, 0, 502, 514, 5, 86, 0, 0, 503,
		508, 3, 28, 14, 0, 504, 505, 5, 83, 0, 0, 505, 507, 3, 28, 14, 0, 506,
		504, 1, 0, 0, 0, 507, 510, 1, 0, 0, 0, 508, 506, 1, 0, 0, 0, 508, 509,
		1, 0, 0, 0, 509, 512, 1, 0, 0, 0, 510, 508, 1, 0, 0, 0, 511, 513, 5, 83,
		0, 0, 512, 511, 1, 0, 0, 0, 512, 513, 1, 0, 0, 0, 513, 515, 1, 0, 0, 0,
		514, 503, 1, 0, 0, 0, 514, 515, 1, 0, 0, 0, 515, 516, 1, 0, 0, 0, 516,
		517, 5, 87, 0, 0, 517, 27, 1, 0, 0, 0, 518, 520, 5, 49, 0, 0, 519, 518,
		1, 0, 0, 0, 519, 520, 1, 0, 0, 0, 520, 521, 1, 0, 0, 0, 521, 528, 3, 22,
		11, 0, 522, 528, 3, 6, 3, 0, 523, 524, 5, 88, 0, 0, 524, 525, 3, 22, 11,
		0, 525, 526, 5, 89, 0, 0, 526, 528, 1, 0, 0, 0, 527, 519, 1, 0, 0, 0, 527,
		522, 1, 0, 0, 0, 527, 523, 1, 0, 0, 0, 528, 537, 1, 0, 0, 0, 529, 530,
		5, 105, 0, 0, 530, 531, 5, 85, 0, 0, 531, 537, 3, 22, 11, 0, 532, 534,
		5, 101, 0, 0, 533, 535, 7, 7, 0, 0, 534, 533, 1, 0, 0, 0, 534, 535, 1,
		0, 0, 0, 535, 537, 1, 0, 0, 0, 536, 527, 1, 0, 0, 0, 536, 529, 1, 0, 0,
		0, 536, 532, 1, 0, 0, 0, 537, 29, 1, 0, 0, 0, 538, 539, 3, 36, 18, 0, 539,
		540, 7, 8, 0, 0, 540, 541, 3, 22, 11, 0, 541, 581, 1, 0, 0, 0, 542, 543,
		5, 105, 0, 0, 543, 544, 5, 59, 0, 0, 544, 581, 3, 22, 11, 0, 545, 546,
		5, 90, 0, 0, 546, 551, 5, 105, 0, 0, 547, 548, 5, 83, 0, 0, 548, 550, 5,
		105, 0, 0, 549, 547, 1, 0, 0, 0, 550, 553, 1, 0, 0, 0, 551, 549, 1, 0,
		0, 0, 551, 552, 1, 0, 0, 0, 552, 557, 1, 0, 0, 0, 553, 551, 1, 0, 0, 0,
		554, 555, 5, 83, 0, 0, 555, 556, 5, 49, 0, 0, 556, 558, 5, 105, 0, 0, 557,
		554, 1, 0, 0, 0, 557, 558, 1, 0, 0, 0, 558, 560, 1, 0, 0, 0, 559, 561,
		5, 83, 0, 0, 560, 559, 1, 0, 0, 0, 560, 561, 1, 0, 0, 0, 561, 562, 1, 0,
		0, 0, 562, 563, 5, 91, 0, 0, 563, 564, 5, 59, 0, 0, 564, 581, 3, 22, 11,
		0, 565, 566, 5, 88, 0, 0, 566, 571, 5, 105, 0, 0, 567, 568, 5, 83, 0, 0,
		568, 570, 5, 105, 0, 0, 569, 567, 1, 0, 0, 0, 570, 573, 1, 0, 0, 0, 571,
		569, 1, 0, 0, 0, 571, 572, 1, 0, 0, 0, 572, 574, 1, 0, 0, 0, 573, 571,
		1, 0, 0, 0, 574, 575, 5, 88, 0, 0, 575, 576, 5, 59, 0, 0, 576, 581, 3,
		22, 11, 0, 577, 578, 5, 49, 0, 0, 578, 579, 5, 59, 0, 0, 579, 581, 3, 22,
		11, 0, 580, 538, 1, 0, 0, 0, 580, 542, 1, 0, 0, 0, 580, 545, 1, 0, 0, 0,
		580, 565, 1, 0, 0, 0, 580, 577, 1, 0, 0, 0, 581, 31, 1, 0, 0, 0, 582, 583,
		7, 9, 0, 0, 583, 584, 3, 36, 18, 0, 584, 33, 1, 0, 0, 0, 585, 586, 3, 36,
		18, 0, 586, 587, 7, 9, 0, 0, 587, 35, 1, 0, 0, 0, 588, 589, 6, 18, -1,
		0, 589, 590, 5, 82, 0, 0, 590, 593, 5, 105, 0, 0, 591, 593, 5, 105, 0,
		0, 592, 588, 1, 0, 0, 0, 592, 591, 1, 0, 0, 0, 593, 604, 1, 0, 0, 0, 594,
		595, 10, 4, 0, 0, 595, 596, 5, 82, 0, 0, 596, 603, 5, 105, 0, 0, 597, 598,
		10, 2, 0, 0, 598, 599, 5, 90, 0, 0, 599, 600, 3, 22, 11, 0, 600, 601, 5,
		91, 0, 0, 601, 603, 1, 0, 0, 0, 602, 594, 1, 0, 0, 0, 602, 597, 1, 0, 0,
		0, 603, 606, 1, 0, 0, 0, 604, 602, 1, 0, 0, 0, 604, 605, 1, 0, 0, 0, 605,
		37, 1, 0, 0, 0, 606, 604, 1, 0, 0, 0, 607, 613, 5, 39, 0, 0, 608, 613,
		5, 40, 0, 0, 609, 613, 5, 41, 0, 0, 610, 613, 5, 42, 0, 0, 611, 613, 5,
		43, 0, 0, 612, 607, 1, 0, 0, 0, 612, 608, 1, 0, 0, 0, 612, 609, 1, 0, 0,
		0, 612, 610, 1, 0, 0, 0, 612, 611, 1, 0, 0, 0, 613, 39, 1, 0, 0, 0, 614,
		773, 3, 38, 19, 0, 615, 773, 5, 45, 0, 0, 616, 773, 5, 46, 0, 0, 617, 773,
		5, 44, 0, 0, 618, 773, 7, 10, 0, 0, 619, 773, 3, 48, 24, 0, 620, 773, 5,
		13, 0, 0, 621, 773, 5, 14, 0, 0, 622, 623, 5, 10, 0, 0, 623, 642, 5, 86,
		0, 0, 624, 629, 5, 105, 0, 0, 625, 626, 5, 83, 0, 0, 626, 628, 5, 105,
		0, 0, 627, 625, 1, 0, 0, 0, 628, 631, 1, 0, 0, 0, 629, 627, 1, 0, 0, 0,
		629, 630, 1, 0, 0, 0, 630, 635, 1, 0, 0, 0, 631, 629, 1, 0, 0, 0, 632,
		633, 5, 83, 0, 0, 633, 634, 5, 49, 0, 0, 634, 636, 5, 105, 0, 0, 635, 632,
		1, 0, 0, 0, 635, 636, 1, 0, 0, 0, 636, 638, 1, 0, 0, 0, 637, 639, 5, 83,
		0, 0, 638, 637, 1, 0, 0, 0, 638, 639, 1, 0, 0, 0, 639, 643, 1, 0, 0, 0,
		640, 641, 5, 49, 0, 0, 641, 643, 5, 105, 0, 0, 642, 624, 1, 0, 0, 0, 642,
		640, 1, 0, 0, 0, 642, 643, 1, 0, 0, 0, 643, 644, 1, 0, 0, 0, 644, 645,
		5, 87, 0, 0, 645, 773, 3, 6, 3, 0, 646, 665, 5, 86, 0, 0, 647, 652, 5,
		105, 0, 0, 648, 649, 5, 83, 0, 0, 649, 651, 5, 105, 0, 0, 650, 648, 1,
		0, 0, 0, 651, 654, 1, 0, 0, 0, 652, 650, 1, 0, 0, 0, 652, 653, 1, 0, 0,
		0, 653, 658, 1, 0, 0, 0, 654, 652, 1, 0, 0, 0, 655, 656, 5, 83, 0, 0, 656,
		657, 5, 49, 0, 0, 657, 659, 5, 105, 0, 0, 658, 655, 1, 0, 0, 0, 658, 659,
		1, 0, 0, 0, 659, 661, 1, 0, 0, 0, 660, 662, 5, 83, 0, 0, 661, 660, 1, 0,
		0, 0, 661, 662, 1, 0, 0, 0, 662, 666, 1, 0, 0, 0, 663, 664, 5, 49, 0, 0,
		664, 666, 5, 105, 0, 0, 665, 647, 1, 0, 0, 0, 665, 663, 1, 0, 0, 0, 665,
		666, 1, 0, 0, 0, 666, 667, 1, 0, 0, 0, 667, 670, 5, 87, 0, 0, 668, 670,
		5, 105, 0, 0, 669, 646, 1, 0, 0, 0, 669, 668, 1, 0, 0, 0, 670, 671, 1,
		0, 0, 0, 671, 672, 5, 51, 0, 0, 672, 773, 3, 22, 11, 0, 673, 692, 5, 86,
		0, 0, 674, 679, 5, 105, 0, 0, 675, 676, 5, 83, 0, 0, 676, 678, 5, 105,
		0, 0, 677, 675, 1, 0, 0, 0, 678, 681, 1, 0, 0, 0, 679, 677, 1, 0, 0, 0,
		679, 680, 1, 0, 0, 0, 680, 685, 1, 0, 0, 0, 681, 679, 1, 0, 0, 0, 682,
		683, 5, 83, 0, 0, 683, 684, 5, 49, 0, 0, 684, 686, 5, 105, 0, 0, 685, 682,
		1, 0, 0, 0, 685, 686, 1, 0, 0, 0, 686, 688, 1, 0, 0, 0, 687, 689, 5, 83,
		0, 0, 688, 687, 1, 0, 0, 0, 688, 689, 1, 0, 0, 0, 689, 693, 1, 0, 0, 0,
		690, 691, 5, 49, 0, 0, 691, 693, 5, 105, 0, 0, 692, 674, 1, 0, 0, 0, 692,
		690, 1, 0, 0, 0, 692, 693, 1, 0, 0, 0, 693, 694, 1, 0, 0, 0, 694, 697,
		5, 87, 0, 0, 695, 697, 5, 105, 0, 0, 696, 673, 1, 0, 0, 0, 696, 695, 1,
		0, 0, 0, 697, 698, 1, 0, 0, 0, 698, 699, 5, 51, 0, 0, 699, 773, 3, 6, 3,
		0, 700, 712, 5, 88, 0, 0, 701, 706, 3, 44, 22, 0, 702, 703, 5, 83, 0, 0,
		703, 705, 3, 44, 22, 0, 704, 702, 1, 0, 0, 0, 705, 708, 1, 0, 0, 0, 706,
		704, 1, 0, 0, 0, 706, 707, 1, 0, 0, 0, 707, 710, 1, 0, 0, 0, 708, 706,
		1, 0, 0, 0, 709, 711, 5, 83, 0, 0, 710, 709, 1, 0, 0, 0, 710, 711, 1, 0,
		0, 0, 711, 713, 1, 0, 0, 0, 712, 701, 1, 0, 0, 0, 712, 713, 1, 0, 0, 0,
		713, 714, 1, 0, 0, 0, 714, 773, 5, 89, 0, 0, 715, 716, 5, 88, 0, 0, 716,
		717, 3, 22, 11, 0, 717, 718, 5, 85, 0, 0, 718, 719, 3, 22, 11, 0, 719,
		722, 5, 3, 0, 0, 720, 721, 5, 105, 0, 0, 721, 723, 5, 83, 0, 0, 722, 720,
		1, 0, 0, 0, 722, 723, 1, 0, 0, 0, 723, 724, 1, 0, 0, 0, 724, 725, 5, 105,
		0, 0, 725, 726, 5, 4, 0, 0, 726, 729, 3, 22, 11, 0, 727, 728, 7, 0, 0,
		0, 728, 730, 3, 22, 11, 0, 729, 727, 1, 0, 0, 0, 729, 730, 1, 0, 0, 0,
		730, 733, 1, 0, 0, 0, 731, 732, 5, 5, 0, 0, 732, 734, 3, 22, 11, 0, 733,
		731, 1, 0, 0, 0, 733, 734, 1, 0, 0, 0, 734, 735, 1, 0, 0, 0, 735, 736,
		5, 89, 0, 0, 736, 773, 1, 0, 0, 0, 737, 749, 5, 90, 0, 0, 738, 743, 3,
		42, 21, 0, 739, 740, 5, 83, 0, 0, 740, 742, 3, 42, 21, 0, 741, 739, 1,
		0, 0, 0, 742, 745, 1, 0, 0, 0, 743, 741, 1, 0, 0, 0, 743, 744, 1, 0, 0,
		0, 744, 747, 1, 0, 0, 0, 745, 743, 1, 0, 0, 0, 746, 748, 5, 83, 0, 0, 747,
		746, 1, 0, 0, 0, 747, 748, 1, 0, 0, 0, 748, 750, 1, 0, 0, 0, 749, 738,
		1, 0, 0, 0, 749, 750, 1, 0, 0, 0, 750, 751, 1, 0, 0, 0, 751, 773, 5, 91,
		0, 0, 752, 753, 5, 90, 0, 0, 753, 754, 3, 22, 11, 0, 754, 757, 5, 3, 0,
		0, 755, 756, 5, 105, 0, 0, 756, 758, 5, 83, 0, 0, 757, 755, 1, 0, 0, 0,
		757, 758, 1, 0, 0, 0, 758, 759, 1, 0, 0, 0, 759, 760, 5, 105, 0, 0, 760,
		761, 5, 4, 0, 0, 761, 764, 3, 22, 11, 0, 762, 763, 7, 0, 0, 0, 763, 765,
		3, 22, 11, 0, 764, 762, 1, 0, 0, 0, 764, 765, 1, 0, 0, 0, 765, 768, 1,
		0, 0, 0, 766, 767, 5, 5, 0, 0, 767, 769, 3, 22, 11, 0, 768, 766, 1, 0,
		0, 0, 768, 769, 1, 0, 0, 0, 769, 770, 1, 0, 0, 0, 770, 771, 5, 91, 0, 0,
		771, 773, 1, 0, 0, 0, 772, 614, 1, 0, 0, 0, 772, 615, 1, 0, 0, 0, 772,
		616, 1, 0, 0, 0, 772, 617, 1, 0, 0, 0, 772, 618, 1, 0, 0, 0, 772, 619,
		1, 0, 0, 0, 772, 620, 1, 0, 0, 0, 772, 621, 1, 0, 0, 0, 772, 622, 1, 0,
		0, 0, 772, 669, 1, 0, 0, 0, 772, 696, 1, 0, 0, 0, 772, 700, 1, 0, 0, 0,
		772, 715, 1, 0, 0, 0, 772, 737, 1, 0, 0, 0, 772, 752, 1, 0, 0, 0, 773,
		41, 1, 0, 0, 0, 774, 776, 5, 49, 0, 0, 775, 774, 1, 0, 0, 0, 775, 776,
		1, 0, 0, 0, 776, 777, 1, 0, 0, 0, 777, 780, 3, 22, 11, 0, 778, 779, 5,
		5, 0, 0, 779, 781, 3, 22, 11, 0, 780, 778, 1, 0, 0, 0, 780, 781, 1, 0,
		0, 0, 781, 43, 1, 0, 0, 0, 782, 786, 3, 46, 23, 0, 783, 784, 5, 49, 0,
		0, 784, 786, 3, 22, 11, 0, 785, 782, 1, 0, 0, 0, 785, 783, 1, 0, 0, 0,
		786, 45, 1, 0, 0, 0, 787, 788, 5, 105, 0, 0, 788, 789, 5, 85, 0, 0, 789,
		830, 3, 22, 11, 0, 790, 791, 3, 48, 24, 0, 791, 792, 5, 85, 0, 0, 792,
		793, 3, 22, 11, 0, 793, 830, 1, 0, 0, 0, 794, 795, 5, 90, 0, 0, 795, 796,
		3, 22, 11, 0, 796, 797, 5, 91, 0, 0, 797, 798, 5, 85, 0, 0, 798, 799, 3,
		22, 11, 0, 799, 830, 1, 0, 0, 0, 800, 801, 5, 105, 0, 0, 801, 820, 5, 86,
		0, 0, 802, 807, 5, 105, 0, 0, 803, 804, 5, 83, 0, 0, 804, 806, 5, 105,
		0, 0, 805, 803, 1, 0, 0, 0, 806, 809, 1, 0, 0, 0, 807, 805, 1, 0, 0, 0,
		807, 808, 1, 0, 0, 0, 808, 813, 1, 0, 0, 0, 809, 807, 1, 0, 0, 0, 810,
		811, 5, 83, 0, 0, 811, 812, 5, 49, 0, 0, 812, 814, 5, 105, 0, 0, 813, 810,
		1, 0, 0, 0, 813, 814, 1, 0, 0, 0, 814, 816, 1, 0, 0, 0, 815, 817, 5, 83,
		0, 0, 816, 815, 1, 0, 0, 0, 816, 817, 1, 0, 0, 0, 817, 821, 1, 0, 0, 0,
		818, 819, 5, 49, 0, 0, 819, 821, 5, 105, 0, 0, 820, 802, 1, 0, 0, 0, 820,
		818, 1, 0, 0, 0, 820, 821, 1, 0, 0, 0, 821, 822, 1, 0, 0, 0, 822, 823,
		5, 87, 0, 0, 823, 830, 3, 6, 3, 0, 824, 830, 5, 105, 0, 0, 825, 826, 5,
		90, 0, 0, 826, 827, 3, 22, 11, 0, 827, 828, 5, 91, 0, 0, 828, 830, 1, 0,
		0, 0, 829, 787, 1, 0, 0, 0, 829, 790, 1, 0, 0, 0, 829, 794, 1, 0, 0, 0,
		829, 800, 1, 0, 0, 0, 829, 824, 1, 0, 0, 0, 829, 825, 1, 0, 0, 0, 830,
		47, 1, 0, 0, 0, 831, 835, 5, 47, 0, 0, 832, 835, 5, 48, 0, 0, 833, 835,
		3, 50, 25, 0, 834, 831, 1, 0, 0, 0, 834, 832, 1, 0, 0, 0, 834, 833, 1,
		0, 0, 0, 835, 49, 1, 0, 0, 0, 836, 840, 5, 104, 0, 0, 837, 839, 3, 52,
		26, 0, 838, 837, 1, 0, 0, 0, 839, 842, 1, 0, 0, 0, 840, 838, 1, 0, 0, 0,
		840, 841, 1, 0, 0, 0, 841, 843, 1, 0, 0, 0, 842, 840, 1, 0, 0, 0, 843,
		844, 5, 104, 0, 0, 844, 51, 1, 0, 0, 0, 845, 852, 5, 106, 0, 0, 846, 852,
		5, 108, 0, 0, 847, 848, 5, 107, 0, 0, 848, 849, 3, 22, 11, 0, 849, 850,
		5, 89, 0, 0, 850, 852, 1, 0, 0, 0, 851, 845, 1, 0, 0, 0, 851, 846, 1, 0,
		0, 0, 851, 847, 1, 0, 0, 0, 852, 53, 1, 0, 0, 0, 110, 56, 62, 66, 86, 92,
		95, 100, 102, 107, 115, 119, 125, 131, 143, 148, 155, 159, 165, 174, 182,
		186, 198, 203, 211, 214, 221, 238, 244, 247, 251, 258, 273, 277, 283, 286,
		294, 299, 304, 309, 315, 320, 327, 358, 363, 376, 381, 399, 455, 469, 473,
		478, 480, 488, 492, 496, 500, 508, 512, 514, 519, 527, 534, 536, 551, 557,
		560, 571, 580, 592, 602, 604, 612, 629, 635, 638, 642, 652, 658, 661, 665,
		669, 679, 685, 688, 692, 696, 706, 710, 712, 722, 729, 733, 743, 747, 749,
		757, 764, 768, 772, 775, 780, 785, 807, 813, 816, 820, 829, 834, 840, 851,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// ZggParserInit initializes any static state used to implement ZggParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewZggParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func ZggParserInit() {
	staticData := &ZggParserParserStaticData
	staticData.once.Do(zggparserParserInit)
}

// NewZggParser produces a new parser instance for the optional input antlr.TokenStream.
func NewZggParser(input antlr.TokenStream) *ZggParser {
	ZggParserInit()
	this := new(ZggParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &ZggParserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "ZggParser.g4"

	return this
}

// ZggParser tokens.
const (
	ZggParserEOF               = antlr.TokenEOF
	ZggParserTRUE              = 1
	ZggParserFALSE             = 2
	ZggParserFOR               = 3
	ZggParserIN                = 4
	ZggParserIF                = 5
	ZggParserWHILE             = 6
	ZggParserDO                = 7
	ZggParserBREAK             = 8
	ZggParserCONTINUE          = 9
	ZggParserFUNC              = 10
	ZggParserWHEN              = 11
	ZggParserELSE              = 12
	ZggParserNIL               = 13
	ZggParserUNDEFINED         = 14
	ZggParserRETURN_NONE       = 15
	ZggParserRETURN            = 16
	ZggParserEXPORT            = 17
	ZggParserCLASS             = 18
	ZggParserDEFER             = 19
	ZggParserBLOCK_DEFER       = 20
	ZggParserTHROW             = 21
	ZggParserTRY               = 22
	ZggParserCATCH             = 23
	ZggParserFINALLY           = 24
	ZggParserSTATIC            = 25
	ZggParserASSERT            = 26
	ZggParserEXTEND            = 27
	ZggParserUSE_AT            = 28
	ZggParserUSE               = 29
	ZggParserSWITCH            = 30
	ZggParserCASE              = 31
	ZggParserFALLTHROUGH       = 32
	ZggParserDEFAULT           = 33
	ZggParserIS                = 34
	ZggParserWS                = 35
	ZggParserLINECOMMENT       = 36
	ZggParserLINECOMMENT2      = 37
	ZggParserBLOCKCOMMENT      = 38
	ZggParserINT_ZERO          = 39
	ZggParserINT_DEC           = 40
	ZggParserINT_HEX           = 41
	ZggParserINT_OCT           = 42
	ZggParserINT_BIN           = 43
	ZggParserBIGNUM            = 44
	ZggParserFLOAT             = 45
	ZggParserENUM              = 46
	ZggParserSTRING            = 47
	ZggParserRSTRING           = 48
	ZggParserMORE_ARGS         = 49
	ZggParserLEAD_TO           = 50
	ZggParserARROW             = 51
	ZggParserPOW               = 52
	ZggParserPLUS_PLUS         = 53
	ZggParserMINUS_MINUS       = 54
	ZggParserEQUAL             = 55
	ZggParserNOT_EQUAL         = 56
	ZggParserGTEQ              = 57
	ZggParserLTEQ              = 58
	ZggParserLOCAL_ASSIGN      = 59
	ZggParserPLUS_ASSIGN       = 60
	ZggParserMINUS_ASSIGN      = 61
	ZggParserTIMES_ASSIGN      = 62
	ZggParserDIV_ASSIGN        = 63
	ZggParserMOD_ASSIGN        = 64
	ZggParserLOGIC_AND         = 65
	ZggParserLOGIC_OR          = 66
	ZggParserOPTIONAL_CALL     = 67
	ZggParserOPTIONAL_ELSE     = 68
	ZggParserBIT_AND           = 69
	ZggParserBIT_OR            = 70
	ZggParserBIT_NOT           = 71
	ZggParserBIT_SHL           = 72
	ZggParserBIT_SHR           = 73
	ZggParserBIT_XOR           = 74
	ZggParserBIT_AND_ASSIGN    = 75
	ZggParserBIT_OR_ASSIGN     = 76
	ZggParserBIT_SHL_ASSIGN    = 77
	ZggParserBIT_SHR_ASSIGN    = 78
	ZggParserBIT_XOR_ASSIGN    = 79
	ZggParserRANGE_WITHOUT_END = 80
	ZggParserRANGE_WITH_END    = 81
	ZggParserDOT               = 82
	ZggParserCOMMA             = 83
	ZggParserSEMICOLON         = 84
	ZggParserCOLON             = 85
	ZggParserL_PAREN           = 86
	ZggParserR_PAREN           = 87
	ZggParserL_CURLY           = 88
	ZggParserR_CURLY           = 89
	ZggParserL_BRACKET         = 90
	ZggParserR_BRACKET         = 91
	ZggParserLOGIC_NOT         = 92
	ZggParserQUESTION          = 93
	ZggParserGT                = 94
	ZggParserLT                = 95
	ZggParserASSIGN            = 96
	ZggParserPLUS              = 97
	ZggParserMINUS             = 98
	ZggParserTIMES             = 99
	ZggParserDIV               = 100
	ZggParserMOD               = 101
	ZggParserSINGLE_AT         = 102
	ZggParserDOUBLE_AT         = 103
	ZggParserQUOTE             = 104
	ZggParserIDENTIFIER        = 105
	ZggParserTS_RAW            = 106
	ZggParserTS_EXPR_START     = 107
	ZggParserTS_IDENTIFIER     = 108
	ZggParserStrExpr_WS        = 109
)

// ZggParser rules.
const (
	ZggParserRULE_replItem       = 0
	ZggParserRULE_module         = 1
	ZggParserRULE_block          = 2
	ZggParserRULE_codeBlock      = 3
	ZggParserRULE_stmt           = 4
	ZggParserRULE_ifCondition    = 5
	ZggParserRULE_memberDef      = 6
	ZggParserRULE_callStmt       = 7
	ZggParserRULE_switchCase     = 8
	ZggParserRULE_switchDefault  = 9
	ZggParserRULE_comparator     = 10
	ZggParserRULE_expr           = 11
	ZggParserRULE_whenCondition  = 12
	ZggParserRULE_arguments      = 13
	ZggParserRULE_funcArgument   = 14
	ZggParserRULE_assignExpr     = 15
	ZggParserRULE_preIncDec      = 16
	ZggParserRULE_postIncDec     = 17
	ZggParserRULE_lval           = 18
	ZggParserRULE_integer        = 19
	ZggParserRULE_literal        = 20
	ZggParserRULE_arrayItem      = 21
	ZggParserRULE_objItem        = 22
	ZggParserRULE_keyValue       = 23
	ZggParserRULE_stringLiteral  = 24
	ZggParserRULE_templateString = 25
	ZggParserRULE_tsItem         = 26
)

// IReplItemContext is an interface to support dynamic dispatch.
type IReplItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsReplItemContext differentiates from other interfaces.
	IsReplItemContext()
}

type ReplItemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplItemContext() *ReplItemContext {
	var p = new(ReplItemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_replItem
	return p
}

func InitEmptyReplItemContext(p *ReplItemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_replItem
}

func (*ReplItemContext) IsReplItemContext() {}

func NewReplItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReplItemContext {
	var p = new(ReplItemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_replItem

	return p
}

func (s *ReplItemContext) GetParser() antlr.Parser { return s.parser }

func (s *ReplItemContext) CopyAll(ctx *ReplItemContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ReplItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ReplBlockContext struct {
	ReplItemContext
}

func NewReplBlockContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ReplBlockContext {
	var p = new(ReplBlockContext)

	InitEmptyReplItemContext(&p.ReplItemContext)
	p.parser = parser
	p.CopyAll(ctx.(*ReplItemContext))

	return p
}

func (s *ReplBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplBlockContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ReplBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitReplBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

type ReplExprContext struct {
	ReplItemContext
}

func NewReplExprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ReplExprContext {
	var p = new(ReplExprContext)

	InitEmptyReplItemContext(&p.ReplItemContext)
	p.parser = parser
	p.CopyAll(ctx.(*ReplItemContext))

	return p
}

func (s *ReplExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplExprContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ReplExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitReplExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) ReplItem() (localctx IReplItemContext) {
	localctx = NewReplItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, ZggParserRULE_replItem)
	p.SetState(56)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 0, p.GetParserRuleContext()) {
	case 1:
		localctx = NewReplExprContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(54)
			p.expr(0)
		}

	case 2:
		localctx = NewReplBlockContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(55)
			p.Block()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IModuleContext is an interface to support dynamic dispatch.
type IModuleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Block() IBlockContext

	// IsModuleContext differentiates from other interfaces.
	IsModuleContext()
}

type ModuleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModuleContext() *ModuleContext {
	var p = new(ModuleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_module
	return p
}

func InitEmptyModuleContext(p *ModuleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_module
}

func (*ModuleContext) IsModuleContext() {}

func NewModuleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModuleContext {
	var p = new(ModuleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_module

	return p
}

func (s *ModuleContext) GetParser() antlr.Parser { return s.parser }

func (s *ModuleContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ModuleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModuleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModuleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitModule(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) Module() (localctx IModuleContext) {
	localctx = NewModuleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, ZggParserRULE_module)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(58)
		p.Block()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBlockContext is an interface to support dynamic dispatch.
type IBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllStmt() []IStmtContext
	Stmt(i int) IStmtContext
	AllSEMICOLON() []antlr.TerminalNode
	SEMICOLON(i int) antlr.TerminalNode

	// IsBlockContext differentiates from other interfaces.
	IsBlockContext()
}

type BlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockContext() *BlockContext {
	var p = new(BlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_block
	return p
}

func InitEmptyBlockContext(p *BlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_block
}

func (*BlockContext) IsBlockContext() {}

func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockContext {
	var p = new(BlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_block

	return p
}

func (s *BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockContext) AllStmt() []IStmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStmtContext); ok {
			len++
		}
	}

	tst := make([]IStmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStmtContext); ok {
			tst[i] = t.(IStmtContext)
			i++
		}
	}

	return tst
}

func (s *BlockContext) Stmt(i int) IStmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStmtContext)
}

func (s *BlockContext) AllSEMICOLON() []antlr.TerminalNode {
	return s.GetTokens(ZggParserSEMICOLON)
}

func (s *BlockContext) SEMICOLON(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserSEMICOLON, i)
}

func (s *BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) Block() (localctx IBlockContext) {
	localctx = NewBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, ZggParserRULE_block)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(66)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&28146950001913838) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&32349259777) != 0) {
		{
			p.SetState(60)
			p.Stmt()
		}
		p.SetState(62)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserSEMICOLON {
			{
				p.SetState(61)
				p.Match(ZggParserSEMICOLON)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

		p.SetState(68)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICodeBlockContext is an interface to support dynamic dispatch.
type ICodeBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	L_CURLY() antlr.TerminalNode
	Block() IBlockContext
	R_CURLY() antlr.TerminalNode

	// IsCodeBlockContext differentiates from other interfaces.
	IsCodeBlockContext()
}

type CodeBlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCodeBlockContext() *CodeBlockContext {
	var p = new(CodeBlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_codeBlock
	return p
}

func InitEmptyCodeBlockContext(p *CodeBlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_codeBlock
}

func (*CodeBlockContext) IsCodeBlockContext() {}

func NewCodeBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CodeBlockContext {
	var p = new(CodeBlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_codeBlock

	return p
}

func (s *CodeBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *CodeBlockContext) L_CURLY() antlr.TerminalNode {
	return s.GetToken(ZggParserL_CURLY, 0)
}

func (s *CodeBlockContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *CodeBlockContext) R_CURLY() antlr.TerminalNode {
	return s.GetToken(ZggParserR_CURLY, 0)
}

func (s *CodeBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CodeBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CodeBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitCodeBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) CodeBlock() (localctx ICodeBlockContext) {
	localctx = NewCodeBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, ZggParserRULE_codeBlock)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(69)
		p.Match(ZggParserL_CURLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(70)
		p.Block()
	}
	{
		p.SetState(71)
		p.Match(ZggParserR_CURLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStmtContext is an interface to support dynamic dispatch.
type IStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsStmtContext differentiates from other interfaces.
	IsStmtContext()
}

type StmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStmtContext() *StmtContext {
	var p = new(StmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_stmt
	return p
}

func InitEmptyStmtContext(p *StmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_stmt
}

func (*StmtContext) IsStmtContext() {}

func NewStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StmtContext {
	var p = new(StmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_stmt

	return p
}

func (s *StmtContext) GetParser() antlr.Parser { return s.parser }

func (s *StmtContext) CopyAll(ctx *StmtContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *StmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type StmtExtendContext struct {
	StmtContext
}

func NewStmtExtendContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtExtendContext {
	var p = new(StmtExtendContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtExtendContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtExtendContext) EXTEND() antlr.TerminalNode {
	return s.GetToken(ZggParserEXTEND, 0)
}

func (s *StmtExtendContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *StmtExtendContext) L_CURLY() antlr.TerminalNode {
	return s.GetToken(ZggParserL_CURLY, 0)
}

func (s *StmtExtendContext) R_CURLY() antlr.TerminalNode {
	return s.GetToken(ZggParserR_CURLY, 0)
}

func (s *StmtExtendContext) EXPORT() antlr.TerminalNode {
	return s.GetToken(ZggParserEXPORT, 0)
}

func (s *StmtExtendContext) AllKeyValue() []IKeyValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IKeyValueContext); ok {
			len++
		}
	}

	tst := make([]IKeyValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IKeyValueContext); ok {
			tst[i] = t.(IKeyValueContext)
			i++
		}
	}

	return tst
}

func (s *StmtExtendContext) KeyValue(i int) IKeyValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeyValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeyValueContext)
}

func (s *StmtExtendContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtExtend(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtBreakContext struct {
	StmtContext
	label antlr.Token
}

func NewStmtBreakContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtBreakContext {
	var p = new(StmtBreakContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtBreakContext) GetLabel() antlr.Token { return s.label }

func (s *StmtBreakContext) SetLabel(v antlr.Token) { s.label = v }

func (s *StmtBreakContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtBreakContext) BREAK() antlr.TerminalNode {
	return s.GetToken(ZggParserBREAK, 0)
}

func (s *StmtBreakContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, 0)
}

func (s *StmtBreakContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtBreak(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtDoWhileContext struct {
	StmtContext
	label     antlr.Token
	execBlock ICodeBlockContext
	checkExpr IExprContext
}

func NewStmtDoWhileContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtDoWhileContext {
	var p = new(StmtDoWhileContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtDoWhileContext) GetLabel() antlr.Token { return s.label }

func (s *StmtDoWhileContext) SetLabel(v antlr.Token) { s.label = v }

func (s *StmtDoWhileContext) GetExecBlock() ICodeBlockContext { return s.execBlock }

func (s *StmtDoWhileContext) GetCheckExpr() IExprContext { return s.checkExpr }

func (s *StmtDoWhileContext) SetExecBlock(v ICodeBlockContext) { s.execBlock = v }

func (s *StmtDoWhileContext) SetCheckExpr(v IExprContext) { s.checkExpr = v }

func (s *StmtDoWhileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtDoWhileContext) DO() antlr.TerminalNode {
	return s.GetToken(ZggParserDO, 0)
}

func (s *StmtDoWhileContext) WHILE() antlr.TerminalNode {
	return s.GetToken(ZggParserWHILE, 0)
}

func (s *StmtDoWhileContext) CodeBlock() ICodeBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodeBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *StmtDoWhileContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *StmtDoWhileContext) COLON() antlr.TerminalNode {
	return s.GetToken(ZggParserCOLON, 0)
}

func (s *StmtDoWhileContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, 0)
}

func (s *StmtDoWhileContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtDoWhile(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtAssertContext struct {
	StmtContext
}

func NewStmtAssertContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtAssertContext {
	var p = new(StmtAssertContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtAssertContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtAssertContext) ASSERT() antlr.TerminalNode {
	return s.GetToken(ZggParserASSERT, 0)
}

func (s *StmtAssertContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *StmtAssertContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *StmtAssertContext) COMMA() antlr.TerminalNode {
	return s.GetToken(ZggParserCOMMA, 0)
}

func (s *StmtAssertContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtAssert(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtTryContext struct {
	StmtContext
	tryBlock     ICodeBlockContext
	excName      antlr.Token
	catchBlock   ICodeBlockContext
	finallyBlock ICodeBlockContext
}

func NewStmtTryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtTryContext {
	var p = new(StmtTryContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtTryContext) GetExcName() antlr.Token { return s.excName }

func (s *StmtTryContext) SetExcName(v antlr.Token) { s.excName = v }

func (s *StmtTryContext) GetTryBlock() ICodeBlockContext { return s.tryBlock }

func (s *StmtTryContext) GetCatchBlock() ICodeBlockContext { return s.catchBlock }

func (s *StmtTryContext) GetFinallyBlock() ICodeBlockContext { return s.finallyBlock }

func (s *StmtTryContext) SetTryBlock(v ICodeBlockContext) { s.tryBlock = v }

func (s *StmtTryContext) SetCatchBlock(v ICodeBlockContext) { s.catchBlock = v }

func (s *StmtTryContext) SetFinallyBlock(v ICodeBlockContext) { s.finallyBlock = v }

func (s *StmtTryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtTryContext) TRY() antlr.TerminalNode {
	return s.GetToken(ZggParserTRY, 0)
}

func (s *StmtTryContext) AllCodeBlock() []ICodeBlockContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICodeBlockContext); ok {
			len++
		}
	}

	tst := make([]ICodeBlockContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICodeBlockContext); ok {
			tst[i] = t.(ICodeBlockContext)
			i++
		}
	}

	return tst
}

func (s *StmtTryContext) CodeBlock(i int) ICodeBlockContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodeBlockContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *StmtTryContext) CATCH() antlr.TerminalNode {
	return s.GetToken(ZggParserCATCH, 0)
}

func (s *StmtTryContext) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ZggParserL_PAREN, 0)
}

func (s *StmtTryContext) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ZggParserR_PAREN, 0)
}

func (s *StmtTryContext) FINALLY() antlr.TerminalNode {
	return s.GetToken(ZggParserFINALLY, 0)
}

func (s *StmtTryContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, 0)
}

func (s *StmtTryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtTry(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtContinueContext struct {
	StmtContext
	label antlr.Token
}

func NewStmtContinueContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtContinueContext {
	var p = new(StmtContinueContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtContinueContext) GetLabel() antlr.Token { return s.label }

func (s *StmtContinueContext) SetLabel(v antlr.Token) { s.label = v }

func (s *StmtContinueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtContinueContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(ZggParserCONTINUE, 0)
}

func (s *StmtContinueContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, 0)
}

func (s *StmtContinueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtContinue(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtSwitchContext struct {
	StmtContext
	testValue IExprContext
}

func NewStmtSwitchContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtSwitchContext {
	var p = new(StmtSwitchContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtSwitchContext) GetTestValue() IExprContext { return s.testValue }

func (s *StmtSwitchContext) SetTestValue(v IExprContext) { s.testValue = v }

func (s *StmtSwitchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtSwitchContext) SWITCH() antlr.TerminalNode {
	return s.GetToken(ZggParserSWITCH, 0)
}

func (s *StmtSwitchContext) L_CURLY() antlr.TerminalNode {
	return s.GetToken(ZggParserL_CURLY, 0)
}

func (s *StmtSwitchContext) R_CURLY() antlr.TerminalNode {
	return s.GetToken(ZggParserR_CURLY, 0)
}

func (s *StmtSwitchContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *StmtSwitchContext) AllSwitchCase() []ISwitchCaseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISwitchCaseContext); ok {
			len++
		}
	}

	tst := make([]ISwitchCaseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISwitchCaseContext); ok {
			tst[i] = t.(ISwitchCaseContext)
			i++
		}
	}

	return tst
}

func (s *StmtSwitchContext) SwitchCase(i int) ISwitchCaseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISwitchCaseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISwitchCaseContext)
}

func (s *StmtSwitchContext) SwitchDefault() ISwitchDefaultContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISwitchDefaultContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISwitchDefaultContext)
}

func (s *StmtSwitchContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtSwitch(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtPreIncDecContext struct {
	StmtContext
}

func NewStmtPreIncDecContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtPreIncDecContext {
	var p = new(StmtPreIncDecContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtPreIncDecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtPreIncDecContext) PreIncDec() IPreIncDecContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPreIncDecContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPreIncDecContext)
}

func (s *StmtPreIncDecContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtPreIncDec(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtClassDefineContext struct {
	StmtContext
	className antlr.Token
	_expr     IExprContext
	baseCls   []IExprContext
}

func NewStmtClassDefineContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtClassDefineContext {
	var p = new(StmtClassDefineContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtClassDefineContext) GetClassName() antlr.Token { return s.className }

func (s *StmtClassDefineContext) SetClassName(v antlr.Token) { s.className = v }

func (s *StmtClassDefineContext) Get_expr() IExprContext { return s._expr }

func (s *StmtClassDefineContext) Set_expr(v IExprContext) { s._expr = v }

func (s *StmtClassDefineContext) GetBaseCls() []IExprContext { return s.baseCls }

func (s *StmtClassDefineContext) SetBaseCls(v []IExprContext) { s.baseCls = v }

func (s *StmtClassDefineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtClassDefineContext) CLASS() antlr.TerminalNode {
	return s.GetToken(ZggParserCLASS, 0)
}

func (s *StmtClassDefineContext) L_CURLY() antlr.TerminalNode {
	return s.GetToken(ZggParserL_CURLY, 0)
}

func (s *StmtClassDefineContext) R_CURLY() antlr.TerminalNode {
	return s.GetToken(ZggParserR_CURLY, 0)
}

func (s *StmtClassDefineContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, 0)
}

func (s *StmtClassDefineContext) EXPORT() antlr.TerminalNode {
	return s.GetToken(ZggParserEXPORT, 0)
}

func (s *StmtClassDefineContext) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ZggParserL_PAREN, 0)
}

func (s *StmtClassDefineContext) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ZggParserR_PAREN, 0)
}

func (s *StmtClassDefineContext) AllMemberDef() []IMemberDefContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMemberDefContext); ok {
			len++
		}
	}

	tst := make([]IMemberDefContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMemberDefContext); ok {
			tst[i] = t.(IMemberDefContext)
			i++
		}
	}

	return tst
}

func (s *StmtClassDefineContext) MemberDef(i int) IMemberDefContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberDefContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberDefContext)
}

func (s *StmtClassDefineContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *StmtClassDefineContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *StmtClassDefineContext) COMMA() antlr.TerminalNode {
	return s.GetToken(ZggParserCOMMA, 0)
}

func (s *StmtClassDefineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtClassDefine(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtDeferBlockContext struct {
	StmtContext
}

func NewStmtDeferBlockContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtDeferBlockContext {
	var p = new(StmtDeferBlockContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtDeferBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtDeferBlockContext) CodeBlock() ICodeBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodeBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *StmtDeferBlockContext) DEFER() antlr.TerminalNode {
	return s.GetToken(ZggParserDEFER, 0)
}

func (s *StmtDeferBlockContext) BLOCK_DEFER() antlr.TerminalNode {
	return s.GetToken(ZggParserBLOCK_DEFER, 0)
}

func (s *StmtDeferBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtDeferBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtIfContext struct {
	StmtContext
}

func NewStmtIfContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtIfContext {
	var p = new(StmtIfContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtIfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtIfContext) AllIF() []antlr.TerminalNode {
	return s.GetTokens(ZggParserIF)
}

func (s *StmtIfContext) IF(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserIF, i)
}

func (s *StmtIfContext) AllIfCondition() []IIfConditionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIfConditionContext); ok {
			len++
		}
	}

	tst := make([]IIfConditionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIfConditionContext); ok {
			tst[i] = t.(IIfConditionContext)
			i++
		}
	}

	return tst
}

func (s *StmtIfContext) IfCondition(i int) IIfConditionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfConditionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfConditionContext)
}

func (s *StmtIfContext) AllCodeBlock() []ICodeBlockContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICodeBlockContext); ok {
			len++
		}
	}

	tst := make([]ICodeBlockContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICodeBlockContext); ok {
			tst[i] = t.(ICodeBlockContext)
			i++
		}
	}

	return tst
}

func (s *StmtIfContext) CodeBlock(i int) ICodeBlockContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodeBlockContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *StmtIfContext) AllELSE() []antlr.TerminalNode {
	return s.GetTokens(ZggParserELSE)
}

func (s *StmtIfContext) ELSE(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserELSE, i)
}

func (s *StmtIfContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtIf(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtFuncCallContext struct {
	StmtContext
}

func NewStmtFuncCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtFuncCallContext {
	var p = new(StmtFuncCallContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtFuncCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtFuncCallContext) CallStmt() ICallStmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICallStmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICallStmtContext)
}

func (s *StmtFuncCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtFuncCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtDeferContext struct {
	StmtContext
}

func NewStmtDeferContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtDeferContext {
	var p = new(StmtDeferContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtDeferContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtDeferContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *StmtDeferContext) Arguments() IArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentsContext)
}

func (s *StmtDeferContext) DEFER() antlr.TerminalNode {
	return s.GetToken(ZggParserDEFER, 0)
}

func (s *StmtDeferContext) BLOCK_DEFER() antlr.TerminalNode {
	return s.GetToken(ZggParserBLOCK_DEFER, 0)
}

func (s *StmtDeferContext) OPTIONAL_CALL() antlr.TerminalNode {
	return s.GetToken(ZggParserOPTIONAL_CALL, 0)
}

func (s *StmtDeferContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtDefer(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtExportFuncDefineContext struct {
	StmtContext
}

func NewStmtExportFuncDefineContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtExportFuncDefineContext {
	var p = new(StmtExportFuncDefineContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtExportFuncDefineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtExportFuncDefineContext) EXPORT() antlr.TerminalNode {
	return s.GetToken(ZggParserEXPORT, 0)
}

func (s *StmtExportFuncDefineContext) FUNC() antlr.TerminalNode {
	return s.GetToken(ZggParserFUNC, 0)
}

func (s *StmtExportFuncDefineContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(ZggParserIDENTIFIER)
}

func (s *StmtExportFuncDefineContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, i)
}

func (s *StmtExportFuncDefineContext) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ZggParserL_PAREN, 0)
}

func (s *StmtExportFuncDefineContext) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ZggParserR_PAREN, 0)
}

func (s *StmtExportFuncDefineContext) CodeBlock() ICodeBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodeBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *StmtExportFuncDefineContext) MORE_ARGS() antlr.TerminalNode {
	return s.GetToken(ZggParserMORE_ARGS, 0)
}

func (s *StmtExportFuncDefineContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZggParserCOMMA)
}

func (s *StmtExportFuncDefineContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserCOMMA, i)
}

func (s *StmtExportFuncDefineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtExportFuncDefine(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtBlockContext struct {
	StmtContext
}

func NewStmtBlockContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtBlockContext {
	var p = new(StmtBlockContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtBlockContext) CodeBlock() ICodeBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodeBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *StmtBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtExportIdentifierContext struct {
	StmtContext
}

func NewStmtExportIdentifierContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtExportIdentifierContext {
	var p = new(StmtExportIdentifierContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtExportIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtExportIdentifierContext) EXPORT() antlr.TerminalNode {
	return s.GetToken(ZggParserEXPORT, 0)
}

func (s *StmtExportIdentifierContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, 0)
}

func (s *StmtExportIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtExportIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtWhileContext struct {
	StmtContext
	label     antlr.Token
	checkExpr IExprContext
	execBlock ICodeBlockContext
}

func NewStmtWhileContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtWhileContext {
	var p = new(StmtWhileContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtWhileContext) GetLabel() antlr.Token { return s.label }

func (s *StmtWhileContext) SetLabel(v antlr.Token) { s.label = v }

func (s *StmtWhileContext) GetCheckExpr() IExprContext { return s.checkExpr }

func (s *StmtWhileContext) GetExecBlock() ICodeBlockContext { return s.execBlock }

func (s *StmtWhileContext) SetCheckExpr(v IExprContext) { s.checkExpr = v }

func (s *StmtWhileContext) SetExecBlock(v ICodeBlockContext) { s.execBlock = v }

func (s *StmtWhileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtWhileContext) WHILE() antlr.TerminalNode {
	return s.GetToken(ZggParserWHILE, 0)
}

func (s *StmtWhileContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *StmtWhileContext) CodeBlock() ICodeBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodeBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *StmtWhileContext) COLON() antlr.TerminalNode {
	return s.GetToken(ZggParserCOLON, 0)
}

func (s *StmtWhileContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, 0)
}

func (s *StmtWhileContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtWhile(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtFuncDefineContext struct {
	StmtContext
}

func NewStmtFuncDefineContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtFuncDefineContext {
	var p = new(StmtFuncDefineContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtFuncDefineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtFuncDefineContext) FUNC() antlr.TerminalNode {
	return s.GetToken(ZggParserFUNC, 0)
}

func (s *StmtFuncDefineContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(ZggParserIDENTIFIER)
}

func (s *StmtFuncDefineContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, i)
}

func (s *StmtFuncDefineContext) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ZggParserL_PAREN, 0)
}

func (s *StmtFuncDefineContext) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ZggParserR_PAREN, 0)
}

func (s *StmtFuncDefineContext) CodeBlock() ICodeBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodeBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *StmtFuncDefineContext) MORE_ARGS() antlr.TerminalNode {
	return s.GetToken(ZggParserMORE_ARGS, 0)
}

func (s *StmtFuncDefineContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZggParserCOMMA)
}

func (s *StmtFuncDefineContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserCOMMA, i)
}

func (s *StmtFuncDefineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtFuncDefine(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtForContext struct {
	StmtContext
	label     antlr.Token
	initExpr  IExprContext
	checkExpr IExprContext
	nextExpr  IExprContext
	execBlock ICodeBlockContext
}

func NewStmtForContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtForContext {
	var p = new(StmtForContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtForContext) GetLabel() antlr.Token { return s.label }

func (s *StmtForContext) SetLabel(v antlr.Token) { s.label = v }

func (s *StmtForContext) GetInitExpr() IExprContext { return s.initExpr }

func (s *StmtForContext) GetCheckExpr() IExprContext { return s.checkExpr }

func (s *StmtForContext) GetNextExpr() IExprContext { return s.nextExpr }

func (s *StmtForContext) GetExecBlock() ICodeBlockContext { return s.execBlock }

func (s *StmtForContext) SetInitExpr(v IExprContext) { s.initExpr = v }

func (s *StmtForContext) SetCheckExpr(v IExprContext) { s.checkExpr = v }

func (s *StmtForContext) SetNextExpr(v IExprContext) { s.nextExpr = v }

func (s *StmtForContext) SetExecBlock(v ICodeBlockContext) { s.execBlock = v }

func (s *StmtForContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtForContext) FOR() antlr.TerminalNode {
	return s.GetToken(ZggParserFOR, 0)
}

func (s *StmtForContext) AllSEMICOLON() []antlr.TerminalNode {
	return s.GetTokens(ZggParserSEMICOLON)
}

func (s *StmtForContext) SEMICOLON(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserSEMICOLON, i)
}

func (s *StmtForContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *StmtForContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *StmtForContext) CodeBlock() ICodeBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodeBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *StmtForContext) COLON() antlr.TerminalNode {
	return s.GetToken(ZggParserCOLON, 0)
}

func (s *StmtForContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, 0)
}

func (s *StmtForContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtFor(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtForEachContext struct {
	StmtContext
	label     antlr.Token
	idIndex   antlr.Token
	idValue   antlr.Token
	begin     IExprContext
	end       IExprContext
	check     IExprContext
	execBlock ICodeBlockContext
}

func NewStmtForEachContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtForEachContext {
	var p = new(StmtForEachContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtForEachContext) GetLabel() antlr.Token { return s.label }

func (s *StmtForEachContext) GetIdIndex() antlr.Token { return s.idIndex }

func (s *StmtForEachContext) GetIdValue() antlr.Token { return s.idValue }

func (s *StmtForEachContext) SetLabel(v antlr.Token) { s.label = v }

func (s *StmtForEachContext) SetIdIndex(v antlr.Token) { s.idIndex = v }

func (s *StmtForEachContext) SetIdValue(v antlr.Token) { s.idValue = v }

func (s *StmtForEachContext) GetBegin() IExprContext { return s.begin }

func (s *StmtForEachContext) GetEnd() IExprContext { return s.end }

func (s *StmtForEachContext) GetCheck() IExprContext { return s.check }

func (s *StmtForEachContext) GetExecBlock() ICodeBlockContext { return s.execBlock }

func (s *StmtForEachContext) SetBegin(v IExprContext) { s.begin = v }

func (s *StmtForEachContext) SetEnd(v IExprContext) { s.end = v }

func (s *StmtForEachContext) SetCheck(v IExprContext) { s.check = v }

func (s *StmtForEachContext) SetExecBlock(v ICodeBlockContext) { s.execBlock = v }

func (s *StmtForEachContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtForEachContext) FOR() antlr.TerminalNode {
	return s.GetToken(ZggParserFOR, 0)
}

func (s *StmtForEachContext) IN() antlr.TerminalNode {
	return s.GetToken(ZggParserIN, 0)
}

func (s *StmtForEachContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(ZggParserIDENTIFIER)
}

func (s *StmtForEachContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, i)
}

func (s *StmtForEachContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *StmtForEachContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *StmtForEachContext) CodeBlock() ICodeBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodeBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *StmtForEachContext) COLON() antlr.TerminalNode {
	return s.GetToken(ZggParserCOLON, 0)
}

func (s *StmtForEachContext) COMMA() antlr.TerminalNode {
	return s.GetToken(ZggParserCOMMA, 0)
}

func (s *StmtForEachContext) IF() antlr.TerminalNode {
	return s.GetToken(ZggParserIF, 0)
}

func (s *StmtForEachContext) RANGE_WITH_END() antlr.TerminalNode {
	return s.GetToken(ZggParserRANGE_WITH_END, 0)
}

func (s *StmtForEachContext) RANGE_WITHOUT_END() antlr.TerminalNode {
	return s.GetToken(ZggParserRANGE_WITHOUT_END, 0)
}

func (s *StmtForEachContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtForEach(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtReturnNoneContext struct {
	StmtContext
}

func NewStmtReturnNoneContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtReturnNoneContext {
	var p = new(StmtReturnNoneContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtReturnNoneContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtReturnNoneContext) RETURN_NONE() antlr.TerminalNode {
	return s.GetToken(ZggParserRETURN_NONE, 0)
}

func (s *StmtReturnNoneContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtReturnNone(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtExportExprContext struct {
	StmtContext
}

func NewStmtExportExprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtExportExprContext {
	var p = new(StmtExportExprContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtExportExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtExportExprContext) EXPORT() antlr.TerminalNode {
	return s.GetToken(ZggParserEXPORT, 0)
}

func (s *StmtExportExprContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, 0)
}

func (s *StmtExportExprContext) LOCAL_ASSIGN() antlr.TerminalNode {
	return s.GetToken(ZggParserLOCAL_ASSIGN, 0)
}

func (s *StmtExportExprContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *StmtExportExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtExportExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtReturnContext struct {
	StmtContext
}

func NewStmtReturnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtReturnContext {
	var p = new(StmtReturnContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtReturnContext) RETURN() antlr.TerminalNode {
	return s.GetToken(ZggParserRETURN, 0)
}

func (s *StmtReturnContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *StmtReturnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtReturn(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtPostIncDecContext struct {
	StmtContext
}

func NewStmtPostIncDecContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtPostIncDecContext {
	var p = new(StmtPostIncDecContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtPostIncDecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtPostIncDecContext) PostIncDec() IPostIncDecContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPostIncDecContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPostIncDecContext)
}

func (s *StmtPostIncDecContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtPostIncDec(s)

	default:
		return t.VisitChildren(s)
	}
}

type StmtAssignContext struct {
	StmtContext
}

func NewStmtAssignContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StmtAssignContext {
	var p = new(StmtAssignContext)

	InitEmptyStmtContext(&p.StmtContext)
	p.parser = parser
	p.CopyAll(ctx.(*StmtContext))

	return p
}

func (s *StmtAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtAssignContext) AssignExpr() IAssignExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignExprContext)
}

func (s *StmtAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStmtAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) Stmt() (localctx IStmtContext) {
	localctx = NewStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, ZggParserRULE_stmt)
	var _la int

	var _alt int

	p.SetState(299)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 36, p.GetParserRuleContext()) {
	case 1:
		localctx = NewStmtBlockContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(73)
			p.CodeBlock()
		}

	case 2:
		localctx = NewStmtPreIncDecContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(74)
			p.PreIncDec()
		}

	case 3:
		localctx = NewStmtPostIncDecContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(75)
			p.PostIncDec()
		}

	case 4:
		localctx = NewStmtAssignContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(76)
			p.AssignExpr()
		}

	case 5:
		localctx = NewStmtFuncCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(77)
			p.CallStmt()
		}

	case 6:
		localctx = NewStmtFuncDefineContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(78)
			p.Match(ZggParserFUNC)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(79)
			p.Match(ZggParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(80)
			p.Match(ZggParserL_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(102)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		switch p.GetTokenStream().LA(1) {
		case ZggParserIDENTIFIER:
			{
				p.SetState(81)
				p.Match(ZggParserIDENTIFIER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(86)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 3, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(82)
						p.Match(ZggParserCOMMA)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(83)
						p.Match(ZggParserIDENTIFIER)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				p.SetState(88)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 3, p.GetParserRuleContext())
				if p.HasError() {
					goto errorExit
				}
			}
			p.SetState(92)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 4, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(89)
					p.Match(ZggParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(90)
					p.Match(ZggParserMORE_ARGS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(91)
					p.Match(ZggParserIDENTIFIER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			} else if p.HasError() { // JIM
				goto errorExit
			}
			p.SetState(95)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ZggParserCOMMA {
				{
					p.SetState(94)
					p.Match(ZggParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		case ZggParserMORE_ARGS:
			{
				p.SetState(97)
				p.Match(ZggParserMORE_ARGS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(98)
				p.Match(ZggParserIDENTIFIER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(100)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ZggParserCOMMA {
				{
					p.SetState(99)
					p.Match(ZggParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		case ZggParserR_PAREN:

		default:
		}
		{
			p.SetState(104)
			p.Match(ZggParserR_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(105)
			p.CodeBlock()
		}

	case 7:
		localctx = NewStmtClassDefineContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		p.SetState(107)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserEXPORT {
			{
				p.SetState(106)
				p.Match(ZggParserEXPORT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(109)
			p.Match(ZggParserCLASS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(110)

			var _m = p.Match(ZggParserIDENTIFIER)

			localctx.(*StmtClassDefineContext).className = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(119)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserL_PAREN {
			{
				p.SetState(111)
				p.Match(ZggParserL_PAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(112)

				var _x = p.expr(0)

				localctx.(*StmtClassDefineContext)._expr = _x
			}
			localctx.(*StmtClassDefineContext).baseCls = append(localctx.(*StmtClassDefineContext).baseCls, localctx.(*StmtClassDefineContext)._expr)
			p.SetState(115)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ZggParserCOMMA {
				{
					p.SetState(113)
					p.Match(ZggParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(114)

					var _x = p.expr(0)

					localctx.(*StmtClassDefineContext)._expr = _x
				}
				localctx.(*StmtClassDefineContext).baseCls = append(localctx.(*StmtClassDefineContext).baseCls, localctx.(*StmtClassDefineContext)._expr)

			}
			{
				p.SetState(117)
				p.Match(ZggParserR_PAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(121)
			p.Match(ZggParserL_CURLY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(125)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&422212498620416) != 0) || ((int64((_la-90)) & ^0x3f) == 0 && ((int64(1)<<(_la-90))&49153) != 0) {
			{
				p.SetState(122)
				p.MemberDef()
			}

			p.SetState(127)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(128)
			p.Match(ZggParserR_CURLY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 8:
		localctx = NewStmtForContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		p.SetState(131)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserIDENTIFIER {
			{
				p.SetState(129)

				var _m = p.Match(ZggParserIDENTIFIER)

				localctx.(*StmtForContext).label = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(130)
				p.Match(ZggParserCOLON)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(133)
			p.Match(ZggParserFOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(134)

			var _x = p.expr(0)

			localctx.(*StmtForContext).initExpr = _x
		}
		{
			p.SetState(135)
			p.Match(ZggParserSEMICOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(136)

			var _x = p.expr(0)

			localctx.(*StmtForContext).checkExpr = _x
		}
		{
			p.SetState(137)
			p.Match(ZggParserSEMICOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(138)

			var _x = p.expr(0)

			localctx.(*StmtForContext).nextExpr = _x
		}
		{
			p.SetState(139)

			var _x = p.CodeBlock()

			localctx.(*StmtForContext).execBlock = _x
		}

	case 9:
		localctx = NewStmtForEachContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		p.SetState(143)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserIDENTIFIER {
			{
				p.SetState(141)

				var _m = p.Match(ZggParserIDENTIFIER)

				localctx.(*StmtForEachContext).label = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(142)
				p.Match(ZggParserCOLON)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(145)
			p.Match(ZggParserFOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(148)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 14, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(146)

				var _m = p.Match(ZggParserIDENTIFIER)

				localctx.(*StmtForEachContext).idIndex = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(147)
				p.Match(ZggParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(150)

			var _m = p.Match(ZggParserIDENTIFIER)

			localctx.(*StmtForEachContext).idValue = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(151)
			p.Match(ZggParserIN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(152)

			var _x = p.expr(0)

			localctx.(*StmtForEachContext).begin = _x
		}
		p.SetState(155)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserRANGE_WITHOUT_END || _la == ZggParserRANGE_WITH_END {
			{
				p.SetState(153)
				_la = p.GetTokenStream().LA(1)

				if !(_la == ZggParserRANGE_WITHOUT_END || _la == ZggParserRANGE_WITH_END) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(154)

				var _x = p.expr(0)

				localctx.(*StmtForEachContext).end = _x
			}

		}
		p.SetState(159)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserIF {
			{
				p.SetState(157)
				p.Match(ZggParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(158)

				var _x = p.expr(0)

				localctx.(*StmtForEachContext).check = _x
			}

		}
		{
			p.SetState(161)

			var _x = p.CodeBlock()

			localctx.(*StmtForEachContext).execBlock = _x
		}

	case 10:
		localctx = NewStmtDoWhileContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		p.SetState(165)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserIDENTIFIER {
			{
				p.SetState(163)

				var _m = p.Match(ZggParserIDENTIFIER)

				localctx.(*StmtDoWhileContext).label = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(164)
				p.Match(ZggParserCOLON)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(167)
			p.Match(ZggParserDO)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(168)

			var _x = p.CodeBlock()

			localctx.(*StmtDoWhileContext).execBlock = _x
		}
		{
			p.SetState(169)
			p.Match(ZggParserWHILE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(170)

			var _x = p.expr(0)

			localctx.(*StmtDoWhileContext).checkExpr = _x
		}

	case 11:
		localctx = NewStmtWhileContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		p.SetState(174)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserIDENTIFIER {
			{
				p.SetState(172)

				var _m = p.Match(ZggParserIDENTIFIER)

				localctx.(*StmtWhileContext).label = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(173)
				p.Match(ZggParserCOLON)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(176)
			p.Match(ZggParserWHILE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(177)

			var _x = p.expr(0)

			localctx.(*StmtWhileContext).checkExpr = _x
		}
		{
			p.SetState(178)

			var _x = p.CodeBlock()

			localctx.(*StmtWhileContext).execBlock = _x
		}

	case 12:
		localctx = NewStmtContinueContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(180)
			p.Match(ZggParserCONTINUE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(182)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 19, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(181)

				var _m = p.Match(ZggParserIDENTIFIER)

				localctx.(*StmtContinueContext).label = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 13:
		localctx = NewStmtBreakContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(184)
			p.Match(ZggParserBREAK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(186)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 20, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(185)

				var _m = p.Match(ZggParserIDENTIFIER)

				localctx.(*StmtBreakContext).label = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 14:
		localctx = NewStmtIfContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(188)
			p.Match(ZggParserIF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(189)
			p.IfCondition()
		}
		{
			p.SetState(190)
			p.CodeBlock()
		}
		p.SetState(198)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 21, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(191)
					p.Match(ZggParserELSE)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(192)
					p.Match(ZggParserIF)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(193)
					p.IfCondition()
				}
				{
					p.SetState(194)
					p.CodeBlock()
				}

			}
			p.SetState(200)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 21, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(203)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserELSE {
			{
				p.SetState(201)
				p.Match(ZggParserELSE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(202)
				p.CodeBlock()
			}

		}

	case 15:
		localctx = NewStmtSwitchContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(205)
			p.Match(ZggParserSWITCH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(206)

			var _x = p.expr(0)

			localctx.(*StmtSwitchContext).testValue = _x
		}
		{
			p.SetState(207)
			p.Match(ZggParserL_CURLY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(209)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == ZggParserCASE {
			{
				p.SetState(208)
				p.SwitchCase()
			}

			p.SetState(211)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(214)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserDEFAULT {
			{
				p.SetState(213)
				p.SwitchDefault()
			}

		}
		{
			p.SetState(216)
			p.Match(ZggParserR_CURLY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 16:
		localctx = NewStmtReturnNoneContext(p, localctx)
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(218)
			p.Match(ZggParserRETURN_NONE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 17:
		localctx = NewStmtReturnContext(p, localctx)
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(219)
			p.Match(ZggParserRETURN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(221)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 25, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(220)
				p.expr(0)
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 18:
		localctx = NewStmtExportIdentifierContext(p, localctx)
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(223)
			p.Match(ZggParserEXPORT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(224)
			p.Match(ZggParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 19:
		localctx = NewStmtExportExprContext(p, localctx)
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(225)
			p.Match(ZggParserEXPORT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(226)
			p.Match(ZggParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(227)
			p.Match(ZggParserLOCAL_ASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(228)
			p.expr(0)
		}

	case 20:
		localctx = NewStmtExportFuncDefineContext(p, localctx)
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(229)
			p.Match(ZggParserEXPORT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(230)
			p.Match(ZggParserFUNC)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(231)
			p.Match(ZggParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(232)
			p.Match(ZggParserL_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(251)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		switch p.GetTokenStream().LA(1) {
		case ZggParserIDENTIFIER:
			{
				p.SetState(233)
				p.Match(ZggParserIDENTIFIER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(238)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 26, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(234)
						p.Match(ZggParserCOMMA)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(235)
						p.Match(ZggParserIDENTIFIER)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				p.SetState(240)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 26, p.GetParserRuleContext())
				if p.HasError() {
					goto errorExit
				}
			}
			p.SetState(244)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 27, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(241)
					p.Match(ZggParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(242)
					p.Match(ZggParserMORE_ARGS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(243)
					p.Match(ZggParserIDENTIFIER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			} else if p.HasError() { // JIM
				goto errorExit
			}
			p.SetState(247)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ZggParserCOMMA {
				{
					p.SetState(246)
					p.Match(ZggParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		case ZggParserMORE_ARGS:
			{
				p.SetState(249)
				p.Match(ZggParserMORE_ARGS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(250)
				p.Match(ZggParserIDENTIFIER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case ZggParserR_PAREN:

		default:
		}
		{
			p.SetState(253)
			p.Match(ZggParserR_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(254)
			p.CodeBlock()
		}

	case 21:
		localctx = NewStmtDeferContext(p, localctx)
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(255)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ZggParserDEFER || _la == ZggParserBLOCK_DEFER) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(256)
			p.expr(0)
		}
		p.SetState(258)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserOPTIONAL_CALL {
			{
				p.SetState(257)
				p.Match(ZggParserOPTIONAL_CALL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(260)
			p.Arguments()
		}

	case 22:
		localctx = NewStmtDeferBlockContext(p, localctx)
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(262)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ZggParserDEFER || _la == ZggParserBLOCK_DEFER) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(263)
			p.CodeBlock()
		}

	case 23:
		localctx = NewStmtTryContext(p, localctx)
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(264)
			p.Match(ZggParserTRY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(265)

			var _x = p.CodeBlock()

			localctx.(*StmtTryContext).tryBlock = _x
		}
		p.SetState(277)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case ZggParserCATCH:
			{
				p.SetState(266)
				p.Match(ZggParserCATCH)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(267)
				p.Match(ZggParserL_PAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(268)

				var _m = p.Match(ZggParserIDENTIFIER)

				localctx.(*StmtTryContext).excName = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(269)
				p.Match(ZggParserR_PAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(270)

				var _x = p.CodeBlock()

				localctx.(*StmtTryContext).catchBlock = _x
			}
			p.SetState(273)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ZggParserFINALLY {
				{
					p.SetState(271)
					p.Match(ZggParserFINALLY)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(272)

					var _x = p.CodeBlock()

					localctx.(*StmtTryContext).finallyBlock = _x
				}

			}

		case ZggParserFINALLY:
			{
				p.SetState(275)
				p.Match(ZggParserFINALLY)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(276)

				var _x = p.CodeBlock()

				localctx.(*StmtTryContext).finallyBlock = _x
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	case 24:
		localctx = NewStmtAssertContext(p, localctx)
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(279)
			p.Match(ZggParserASSERT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(280)
			p.expr(0)
		}
		p.SetState(283)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserCOMMA {
			{
				p.SetState(281)
				p.Match(ZggParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(282)
				p.expr(0)
			}

		}

	case 25:
		localctx = NewStmtExtendContext(p, localctx)
		p.EnterOuterAlt(localctx, 25)
		p.SetState(286)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserEXPORT {
			{
				p.SetState(285)
				p.Match(ZggParserEXPORT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(288)
			p.Match(ZggParserEXTEND)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(289)
			p.expr(0)
		}
		{
			p.SetState(290)
			p.Match(ZggParserL_CURLY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(294)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for (int64((_la-47)) & ^0x3f) == 0 && ((int64(1)<<(_la-47))&432354360320589827) != 0 {
			{
				p.SetState(291)
				p.KeyValue()
			}

			p.SetState(296)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(297)
			p.Match(ZggParserR_CURLY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIfConditionContext is an interface to support dynamic dispatch.
type IIfConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expr() IExprContext
	AssignExpr() IAssignExprContext
	SEMICOLON() antlr.TerminalNode

	// IsIfConditionContext differentiates from other interfaces.
	IsIfConditionContext()
}

type IfConditionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfConditionContext() *IfConditionContext {
	var p = new(IfConditionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_ifCondition
	return p
}

func InitEmptyIfConditionContext(p *IfConditionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_ifCondition
}

func (*IfConditionContext) IsIfConditionContext() {}

func NewIfConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfConditionContext {
	var p = new(IfConditionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_ifCondition

	return p
}

func (s *IfConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *IfConditionContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IfConditionContext) AssignExpr() IAssignExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignExprContext)
}

func (s *IfConditionContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZggParserSEMICOLON, 0)
}

func (s *IfConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfConditionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitIfCondition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) IfCondition() (localctx IIfConditionContext) {
	localctx = NewIfConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, ZggParserRULE_ifCondition)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(304)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 37, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(301)
			p.AssignExpr()
		}
		{
			p.SetState(302)
			p.Match(ZggParserSEMICOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(306)
		p.expr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMemberDefContext is an interface to support dynamic dispatch.
type IMemberDefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	KeyValue() IKeyValueContext
	STATIC() antlr.TerminalNode

	// IsMemberDefContext differentiates from other interfaces.
	IsMemberDefContext()
}

type MemberDefContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberDefContext() *MemberDefContext {
	var p = new(MemberDefContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_memberDef
	return p
}

func InitEmptyMemberDefContext(p *MemberDefContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_memberDef
}

func (*MemberDefContext) IsMemberDefContext() {}

func NewMemberDefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberDefContext {
	var p = new(MemberDefContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_memberDef

	return p
}

func (s *MemberDefContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberDefContext) KeyValue() IKeyValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeyValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeyValueContext)
}

func (s *MemberDefContext) STATIC() antlr.TerminalNode {
	return s.GetToken(ZggParserSTATIC, 0)
}

func (s *MemberDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberDefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberDefContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitMemberDef(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) MemberDef() (localctx IMemberDefContext) {
	localctx = NewMemberDefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, ZggParserRULE_memberDef)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(309)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZggParserSTATIC {
		{
			p.SetState(308)
			p.Match(ZggParserSTATIC)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(311)
		p.KeyValue()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICallStmtContext is an interface to support dynamic dispatch.
type ICallStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expr() IExprContext
	Arguments() IArgumentsContext
	OPTIONAL_CALL() antlr.TerminalNode
	OPTIONAL_ELSE() antlr.TerminalNode
	CodeBlock() ICodeBlockContext

	// IsCallStmtContext differentiates from other interfaces.
	IsCallStmtContext()
}

type CallStmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallStmtContext() *CallStmtContext {
	var p = new(CallStmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_callStmt
	return p
}

func InitEmptyCallStmtContext(p *CallStmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_callStmt
}

func (*CallStmtContext) IsCallStmtContext() {}

func NewCallStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallStmtContext {
	var p = new(CallStmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_callStmt

	return p
}

func (s *CallStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *CallStmtContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *CallStmtContext) Arguments() IArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentsContext)
}

func (s *CallStmtContext) OPTIONAL_CALL() antlr.TerminalNode {
	return s.GetToken(ZggParserOPTIONAL_CALL, 0)
}

func (s *CallStmtContext) OPTIONAL_ELSE() antlr.TerminalNode {
	return s.GetToken(ZggParserOPTIONAL_ELSE, 0)
}

func (s *CallStmtContext) CodeBlock() ICodeBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodeBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *CallStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallStmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitCallStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) CallStmt() (localctx ICallStmtContext) {
	localctx = NewCallStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, ZggParserRULE_callStmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(313)
		p.expr(0)
	}
	p.SetState(315)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZggParserOPTIONAL_CALL {
		{
			p.SetState(314)
			p.Match(ZggParserOPTIONAL_CALL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(317)
		p.Arguments()
	}
	p.SetState(320)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZggParserOPTIONAL_ELSE {
		{
			p.SetState(318)
			p.Match(ZggParserOPTIONAL_ELSE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(319)
			p.CodeBlock()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISwitchCaseContext is an interface to support dynamic dispatch.
type ISwitchCaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CASE() antlr.TerminalNode
	WhenCondition() IWhenConditionContext
	COLON() antlr.TerminalNode
	Block() IBlockContext
	FALLTHROUGH() antlr.TerminalNode

	// IsSwitchCaseContext differentiates from other interfaces.
	IsSwitchCaseContext()
}

type SwitchCaseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchCaseContext() *SwitchCaseContext {
	var p = new(SwitchCaseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_switchCase
	return p
}

func InitEmptySwitchCaseContext(p *SwitchCaseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_switchCase
}

func (*SwitchCaseContext) IsSwitchCaseContext() {}

func NewSwitchCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchCaseContext {
	var p = new(SwitchCaseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_switchCase

	return p
}

func (s *SwitchCaseContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchCaseContext) CASE() antlr.TerminalNode {
	return s.GetToken(ZggParserCASE, 0)
}

func (s *SwitchCaseContext) WhenCondition() IWhenConditionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhenConditionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhenConditionContext)
}

func (s *SwitchCaseContext) COLON() antlr.TerminalNode {
	return s.GetToken(ZggParserCOLON, 0)
}

func (s *SwitchCaseContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *SwitchCaseContext) FALLTHROUGH() antlr.TerminalNode {
	return s.GetToken(ZggParserFALLTHROUGH, 0)
}

func (s *SwitchCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchCaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitSwitchCase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) SwitchCase() (localctx ISwitchCaseContext) {
	localctx = NewSwitchCaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, ZggParserRULE_switchCase)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(322)
		p.Match(ZggParserCASE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(323)
		p.WhenCondition()
	}
	{
		p.SetState(324)
		p.Match(ZggParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(325)
		p.Block()
	}
	p.SetState(327)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZggParserFALLTHROUGH {
		{
			p.SetState(326)
			p.Match(ZggParserFALLTHROUGH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISwitchDefaultContext is an interface to support dynamic dispatch.
type ISwitchDefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DEFAULT() antlr.TerminalNode
	COLON() antlr.TerminalNode
	Block() IBlockContext

	// IsSwitchDefaultContext differentiates from other interfaces.
	IsSwitchDefaultContext()
}

type SwitchDefaultContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchDefaultContext() *SwitchDefaultContext {
	var p = new(SwitchDefaultContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_switchDefault
	return p
}

func InitEmptySwitchDefaultContext(p *SwitchDefaultContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_switchDefault
}

func (*SwitchDefaultContext) IsSwitchDefaultContext() {}

func NewSwitchDefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchDefaultContext {
	var p = new(SwitchDefaultContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_switchDefault

	return p
}

func (s *SwitchDefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchDefaultContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(ZggParserDEFAULT, 0)
}

func (s *SwitchDefaultContext) COLON() antlr.TerminalNode {
	return s.GetToken(ZggParserCOLON, 0)
}

func (s *SwitchDefaultContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *SwitchDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchDefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchDefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitSwitchDefault(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) SwitchDefault() (localctx ISwitchDefaultContext) {
	localctx = NewSwitchDefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, ZggParserRULE_switchDefault)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(329)
		p.Match(ZggParserDEFAULT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(330)
		p.Match(ZggParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(331)
		p.Block()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IComparatorContext is an interface to support dynamic dispatch.
type IComparatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EQUAL() antlr.TerminalNode
	NOT_EQUAL() antlr.TerminalNode
	GTEQ() antlr.TerminalNode
	LTEQ() antlr.TerminalNode
	LT() antlr.TerminalNode
	GT() antlr.TerminalNode

	// IsComparatorContext differentiates from other interfaces.
	IsComparatorContext()
}

type ComparatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparatorContext() *ComparatorContext {
	var p = new(ComparatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_comparator
	return p
}

func InitEmptyComparatorContext(p *ComparatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_comparator
}

func (*ComparatorContext) IsComparatorContext() {}

func NewComparatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComparatorContext {
	var p = new(ComparatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_comparator

	return p
}

func (s *ComparatorContext) GetParser() antlr.Parser { return s.parser }

func (s *ComparatorContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(ZggParserEQUAL, 0)
}

func (s *ComparatorContext) NOT_EQUAL() antlr.TerminalNode {
	return s.GetToken(ZggParserNOT_EQUAL, 0)
}

func (s *ComparatorContext) GTEQ() antlr.TerminalNode {
	return s.GetToken(ZggParserGTEQ, 0)
}

func (s *ComparatorContext) LTEQ() antlr.TerminalNode {
	return s.GetToken(ZggParserLTEQ, 0)
}

func (s *ComparatorContext) LT() antlr.TerminalNode {
	return s.GetToken(ZggParserLT, 0)
}

func (s *ComparatorContext) GT() antlr.TerminalNode {
	return s.GetToken(ZggParserGT, 0)
}

func (s *ComparatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComparatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitComparator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) Comparator() (localctx IComparatorContext) {
	localctx = NewComparatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, ZggParserRULE_comparator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(333)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-55)) & ^0x3f) == 0 && ((int64(1)<<(_la-55))&1649267441679) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExprContext is an interface to support dynamic dispatch.
type IExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsExprContext differentiates from other interfaces.
	IsExprContext()
}

type ExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprContext() *ExprContext {
	var p = new(ExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_expr
	return p
}

func InitEmptyExprContext(p *ExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_expr
}

func (*ExprContext) IsExprContext() {}

func NewExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprContext {
	var p = new(ExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_expr

	return p
}

func (s *ExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprContext) CopyAll(ctx *ExprContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ExprPlusMinusContext struct {
	ExprContext
	op antlr.Token
}

func NewExprPlusMinusContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprPlusMinusContext {
	var p = new(ExprPlusMinusContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprPlusMinusContext) GetOp() antlr.Token { return s.op }

func (s *ExprPlusMinusContext) SetOp(v antlr.Token) { s.op = v }

func (s *ExprPlusMinusContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprPlusMinusContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprPlusMinusContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprPlusMinusContext) PLUS() antlr.TerminalNode {
	return s.GetToken(ZggParserPLUS, 0)
}

func (s *ExprPlusMinusContext) MINUS() antlr.TerminalNode {
	return s.GetToken(ZggParserMINUS, 0)
}

func (s *ExprPlusMinusContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprPlusMinus(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprUseCloserContext struct {
	ExprContext
}

func NewExprUseCloserContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprUseCloserContext {
	var p = new(ExprUseCloserContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprUseCloserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprUseCloserContext) USE() antlr.TerminalNode {
	return s.GetToken(ZggParserUSE, 0)
}

func (s *ExprUseCloserContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprUseCloserContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprUseCloser(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprInRangeContext struct {
	ExprContext
}

func NewExprInRangeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprInRangeContext {
	var p = new(ExprInRangeContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprInRangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprInRangeContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprInRangeContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprInRangeContext) IN() antlr.TerminalNode {
	return s.GetToken(ZggParserIN, 0)
}

func (s *ExprInRangeContext) RANGE_WITH_END() antlr.TerminalNode {
	return s.GetToken(ZggParserRANGE_WITH_END, 0)
}

func (s *ExprInRangeContext) RANGE_WITHOUT_END() antlr.TerminalNode {
	return s.GetToken(ZggParserRANGE_WITHOUT_END, 0)
}

func (s *ExprInRangeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprInRange(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprAssignContext struct {
	ExprContext
}

func NewExprAssignContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprAssignContext {
	var p = new(ExprAssignContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprAssignContext) AssignExpr() IAssignExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignExprContext)
}

func (s *ExprAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprInContainerContext struct {
	ExprContext
}

func NewExprInContainerContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprInContainerContext {
	var p = new(ExprInContainerContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprInContainerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprInContainerContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprInContainerContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprInContainerContext) IN() antlr.TerminalNode {
	return s.GetToken(ZggParserIN, 0)
}

func (s *ExprInContainerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprInContainer(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprUseMethodContext struct {
	ExprContext
}

func NewExprUseMethodContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprUseMethodContext {
	var p = new(ExprUseMethodContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprUseMethodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprUseMethodContext) USE_AT() antlr.TerminalNode {
	return s.GetToken(ZggParserUSE_AT, 0)
}

func (s *ExprUseMethodContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, 0)
}

func (s *ExprUseMethodContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprUseMethodContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprUseMethod(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprWhenValueContext struct {
	ExprContext
}

func NewExprWhenValueContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprWhenValueContext {
	var p = new(ExprWhenValueContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprWhenValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprWhenValueContext) WHEN() antlr.TerminalNode {
	return s.GetToken(ZggParserWHEN, 0)
}

func (s *ExprWhenValueContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprWhenValueContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprWhenValueContext) L_CURLY() antlr.TerminalNode {
	return s.GetToken(ZggParserL_CURLY, 0)
}

func (s *ExprWhenValueContext) R_CURLY() antlr.TerminalNode {
	return s.GetToken(ZggParserR_CURLY, 0)
}

func (s *ExprWhenValueContext) AllWhenCondition() []IWhenConditionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWhenConditionContext); ok {
			len++
		}
	}

	tst := make([]IWhenConditionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWhenConditionContext); ok {
			tst[i] = t.(IWhenConditionContext)
			i++
		}
	}

	return tst
}

func (s *ExprWhenValueContext) WhenCondition(i int) IWhenConditionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhenConditionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhenConditionContext)
}

func (s *ExprWhenValueContext) AllLEAD_TO() []antlr.TerminalNode {
	return s.GetTokens(ZggParserLEAD_TO)
}

func (s *ExprWhenValueContext) LEAD_TO(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserLEAD_TO, i)
}

func (s *ExprWhenValueContext) ELSE() antlr.TerminalNode {
	return s.GetToken(ZggParserELSE, 0)
}

func (s *ExprWhenValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprWhenValue(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprLiteralContext struct {
	ExprContext
}

func NewExprLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprLiteralContext {
	var p = new(ExprLiteralContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprLiteralContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *ExprLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprCompareContext struct {
	ExprContext
}

func NewExprCompareContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprCompareContext {
	var p = new(ExprCompareContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprCompareContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprCompareContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprCompareContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprCompareContext) Comparator() IComparatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComparatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComparatorContext)
}

func (s *ExprCompareContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprCompare(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprByFieldContext struct {
	ExprContext
	field antlr.Token
}

func NewExprByFieldContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprByFieldContext {
	var p = new(ExprByFieldContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprByFieldContext) GetField() antlr.Token { return s.field }

func (s *ExprByFieldContext) SetField(v antlr.Token) { s.field = v }

func (s *ExprByFieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprByFieldContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprByFieldContext) DOT() antlr.TerminalNode {
	return s.GetToken(ZggParserDOT, 0)
}

func (s *ExprByFieldContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, 0)
}

func (s *ExprByFieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprByField(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprLogicOrContext struct {
	ExprContext
}

func NewExprLogicOrContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprLogicOrContext {
	var p = new(ExprLogicOrContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprLogicOrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprLogicOrContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprLogicOrContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprLogicOrContext) LOGIC_OR() antlr.TerminalNode {
	return s.GetToken(ZggParserLOGIC_OR, 0)
}

func (s *ExprLogicOrContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprLogicOr(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprBitXorContext struct {
	ExprContext
}

func NewExprBitXorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprBitXorContext {
	var p = new(ExprBitXorContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprBitXorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprBitXorContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprBitXorContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprBitXorContext) BIT_XOR() antlr.TerminalNode {
	return s.GetToken(ZggParserBIT_XOR, 0)
}

func (s *ExprBitXorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprBitXor(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprPreIncDecContext struct {
	ExprContext
}

func NewExprPreIncDecContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprPreIncDecContext {
	var p = new(ExprPreIncDecContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprPreIncDecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprPreIncDecContext) PreIncDec() IPreIncDecContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPreIncDecContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPreIncDecContext)
}

func (s *ExprPreIncDecContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprPreIncDec(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprUseBlockContext struct {
	ExprContext
}

func NewExprUseBlockContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprUseBlockContext {
	var p = new(ExprUseBlockContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprUseBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprUseBlockContext) USE_AT() antlr.TerminalNode {
	return s.GetToken(ZggParserUSE_AT, 0)
}

func (s *ExprUseBlockContext) CodeBlock() ICodeBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodeBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *ExprUseBlockContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprUseBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprUseBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprPowContext struct {
	ExprContext
}

func NewExprPowContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprPowContext {
	var p = new(ExprPowContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprPowContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprPowContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprPowContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprPowContext) POW() antlr.TerminalNode {
	return s.GetToken(ZggParserPOW, 0)
}

func (s *ExprPowContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprPow(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprWhenContext struct {
	ExprContext
}

func NewExprWhenContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprWhenContext {
	var p = new(ExprWhenContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprWhenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprWhenContext) WHEN() antlr.TerminalNode {
	return s.GetToken(ZggParserWHEN, 0)
}

func (s *ExprWhenContext) L_CURLY() antlr.TerminalNode {
	return s.GetToken(ZggParserL_CURLY, 0)
}

func (s *ExprWhenContext) R_CURLY() antlr.TerminalNode {
	return s.GetToken(ZggParserR_CURLY, 0)
}

func (s *ExprWhenContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprWhenContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprWhenContext) AllLEAD_TO() []antlr.TerminalNode {
	return s.GetTokens(ZggParserLEAD_TO)
}

func (s *ExprWhenContext) LEAD_TO(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserLEAD_TO, i)
}

func (s *ExprWhenContext) ELSE() antlr.TerminalNode {
	return s.GetToken(ZggParserELSE, 0)
}

func (s *ExprWhenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprWhen(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprBitShiftContext struct {
	ExprContext
	op antlr.Token
}

func NewExprBitShiftContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprBitShiftContext {
	var p = new(ExprBitShiftContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprBitShiftContext) GetOp() antlr.Token { return s.op }

func (s *ExprBitShiftContext) SetOp(v antlr.Token) { s.op = v }

func (s *ExprBitShiftContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprBitShiftContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprBitShiftContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprBitShiftContext) BIT_SHL() antlr.TerminalNode {
	return s.GetToken(ZggParserBIT_SHL, 0)
}

func (s *ExprBitShiftContext) BIT_SHR() antlr.TerminalNode {
	return s.GetToken(ZggParserBIT_SHR, 0)
}

func (s *ExprBitShiftContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprBitShift(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprLogicNotContext struct {
	ExprContext
}

func NewExprLogicNotContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprLogicNotContext {
	var p = new(ExprLogicNotContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprLogicNotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprLogicNotContext) LOGIC_NOT() antlr.TerminalNode {
	return s.GetToken(ZggParserLOGIC_NOT, 0)
}

func (s *ExprLogicNotContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprLogicNotContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprLogicNot(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprItByFieldContext struct {
	ExprContext
	field antlr.Token
}

func NewExprItByFieldContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprItByFieldContext {
	var p = new(ExprItByFieldContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprItByFieldContext) GetField() antlr.Token { return s.field }

func (s *ExprItByFieldContext) SetField(v antlr.Token) { s.field = v }

func (s *ExprItByFieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprItByFieldContext) DOT() antlr.TerminalNode {
	return s.GetToken(ZggParserDOT, 0)
}

func (s *ExprItByFieldContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, 0)
}

func (s *ExprItByFieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprItByField(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprLogicAndContext struct {
	ExprContext
}

func NewExprLogicAndContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprLogicAndContext {
	var p = new(ExprLogicAndContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprLogicAndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprLogicAndContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprLogicAndContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprLogicAndContext) LOGIC_AND() antlr.TerminalNode {
	return s.GetToken(ZggParserLOGIC_AND, 0)
}

func (s *ExprLogicAndContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprLogicAnd(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprIdentifierContext struct {
	ExprContext
}

func NewExprIdentifierContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprIdentifierContext {
	var p = new(ExprIdentifierContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprIdentifierContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, 0)
}

func (s *ExprIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprFallbackContext struct {
	ExprContext
}

func NewExprFallbackContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprFallbackContext {
	var p = new(ExprFallbackContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprFallbackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprFallbackContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprFallbackContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprFallbackContext) OPTIONAL_ELSE() antlr.TerminalNode {
	return s.GetToken(ZggParserOPTIONAL_ELSE, 0)
}

func (s *ExprFallbackContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprFallback(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprBitAndContext struct {
	ExprContext
}

func NewExprBitAndContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprBitAndContext {
	var p = new(ExprBitAndContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprBitAndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprBitAndContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprBitAndContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprBitAndContext) BIT_AND() antlr.TerminalNode {
	return s.GetToken(ZggParserBIT_AND, 0)
}

func (s *ExprBitAndContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprBitAnd(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprNegativeContext struct {
	ExprContext
}

func NewExprNegativeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprNegativeContext {
	var p = new(ExprNegativeContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprNegativeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprNegativeContext) MINUS() antlr.TerminalNode {
	return s.GetToken(ZggParserMINUS, 0)
}

func (s *ExprNegativeContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprNegativeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprNegative(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprTimesDivModContext struct {
	ExprContext
	op antlr.Token
}

func NewExprTimesDivModContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprTimesDivModContext {
	var p = new(ExprTimesDivModContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprTimesDivModContext) GetOp() antlr.Token { return s.op }

func (s *ExprTimesDivModContext) SetOp(v antlr.Token) { s.op = v }

func (s *ExprTimesDivModContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprTimesDivModContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprTimesDivModContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprTimesDivModContext) TIMES() antlr.TerminalNode {
	return s.GetToken(ZggParserTIMES, 0)
}

func (s *ExprTimesDivModContext) DIV() antlr.TerminalNode {
	return s.GetToken(ZggParserDIV, 0)
}

func (s *ExprTimesDivModContext) MOD() antlr.TerminalNode {
	return s.GetToken(ZggParserMOD, 0)
}

func (s *ExprTimesDivModContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprTimesDivMod(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprByIndexContext struct {
	ExprContext
	index IExprContext
}

func NewExprByIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprByIndexContext {
	var p = new(ExprByIndexContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprByIndexContext) GetIndex() IExprContext { return s.index }

func (s *ExprByIndexContext) SetIndex(v IExprContext) { s.index = v }

func (s *ExprByIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprByIndexContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprByIndexContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprByIndexContext) L_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZggParserL_BRACKET, 0)
}

func (s *ExprByIndexContext) R_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZggParserR_BRACKET, 0)
}

func (s *ExprByIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprByIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprBitNotContext struct {
	ExprContext
}

func NewExprBitNotContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprBitNotContext {
	var p = new(ExprBitNotContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprBitNotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprBitNotContext) BIT_NOT() antlr.TerminalNode {
	return s.GetToken(ZggParserBIT_NOT, 0)
}

func (s *ExprBitNotContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprBitNotContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprBitNot(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprShortImportContext struct {
	ExprContext
}

func NewExprShortImportContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprShortImportContext {
	var p = new(ExprShortImportContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprShortImportContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprShortImportContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, 0)
}

func (s *ExprShortImportContext) SINGLE_AT() antlr.TerminalNode {
	return s.GetToken(ZggParserSINGLE_AT, 0)
}

func (s *ExprShortImportContext) DOUBLE_AT() antlr.TerminalNode {
	return s.GetToken(ZggParserDOUBLE_AT, 0)
}

func (s *ExprShortImportContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprShortImport(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprSubContext struct {
	ExprContext
}

func NewExprSubContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprSubContext {
	var p = new(ExprSubContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprSubContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprSubContext) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ZggParserL_PAREN, 0)
}

func (s *ExprSubContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprSubContext) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ZggParserR_PAREN, 0)
}

func (s *ExprSubContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprSub(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprCallContext struct {
	ExprContext
}

func NewExprCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprCallContext {
	var p = new(ExprCallContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprCallContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprCallContext) Arguments() IArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentsContext)
}

func (s *ExprCallContext) OPTIONAL_CALL() antlr.TerminalNode {
	return s.GetToken(ZggParserOPTIONAL_CALL, 0)
}

func (s *ExprCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprBitOrContext struct {
	ExprContext
}

func NewExprBitOrContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprBitOrContext {
	var p = new(ExprBitOrContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprBitOrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprBitOrContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprBitOrContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprBitOrContext) BIT_OR() antlr.TerminalNode {
	return s.GetToken(ZggParserBIT_OR, 0)
}

func (s *ExprBitOrContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprBitOr(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprAssertErrorContext struct {
	ExprContext
}

func NewExprAssertErrorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprAssertErrorContext {
	var p = new(ExprAssertErrorContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprAssertErrorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprAssertErrorContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprAssertErrorContext) LOGIC_NOT() antlr.TerminalNode {
	return s.GetToken(ZggParserLOGIC_NOT, 0)
}

func (s *ExprAssertErrorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprAssertError(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprQuestionContext struct {
	ExprContext
	condition IExprContext
	trueExpr  IExprContext
	falseExpr IExprContext
}

func NewExprQuestionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprQuestionContext {
	var p = new(ExprQuestionContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprQuestionContext) GetCondition() IExprContext { return s.condition }

func (s *ExprQuestionContext) GetTrueExpr() IExprContext { return s.trueExpr }

func (s *ExprQuestionContext) GetFalseExpr() IExprContext { return s.falseExpr }

func (s *ExprQuestionContext) SetCondition(v IExprContext) { s.condition = v }

func (s *ExprQuestionContext) SetTrueExpr(v IExprContext) { s.trueExpr = v }

func (s *ExprQuestionContext) SetFalseExpr(v IExprContext) { s.falseExpr = v }

func (s *ExprQuestionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprQuestionContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(ZggParserQUESTION, 0)
}

func (s *ExprQuestionContext) COLON() antlr.TerminalNode {
	return s.GetToken(ZggParserCOLON, 0)
}

func (s *ExprQuestionContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprQuestionContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprQuestionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprQuestion(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprPostIncDecContext struct {
	ExprContext
}

func NewExprPostIncDecContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprPostIncDecContext {
	var p = new(ExprPostIncDecContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprPostIncDecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprPostIncDecContext) PostIncDec() IPostIncDecContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPostIncDecContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPostIncDecContext)
}

func (s *ExprPostIncDecContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprPostIncDec(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprBySliceContext struct {
	ExprContext
	container IExprContext
	begin     IExprContext
	end       IExprContext
}

func NewExprBySliceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprBySliceContext {
	var p = new(ExprBySliceContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprBySliceContext) GetContainer() IExprContext { return s.container }

func (s *ExprBySliceContext) GetBegin() IExprContext { return s.begin }

func (s *ExprBySliceContext) GetEnd() IExprContext { return s.end }

func (s *ExprBySliceContext) SetContainer(v IExprContext) { s.container = v }

func (s *ExprBySliceContext) SetBegin(v IExprContext) { s.begin = v }

func (s *ExprBySliceContext) SetEnd(v IExprContext) { s.end = v }

func (s *ExprBySliceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprBySliceContext) L_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZggParserL_BRACKET, 0)
}

func (s *ExprBySliceContext) COLON() antlr.TerminalNode {
	return s.GetToken(ZggParserCOLON, 0)
}

func (s *ExprBySliceContext) R_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZggParserR_BRACKET, 0)
}

func (s *ExprBySliceContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprBySliceContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprBySliceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprBySlice(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExprIsTypeContext struct {
	ExprContext
}

func NewExprIsTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExprIsTypeContext {
	var p = new(ExprIsTypeContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *ExprIsTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprIsTypeContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprIsTypeContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprIsTypeContext) IS() antlr.TerminalNode {
	return s.GetToken(ZggParserIS, 0)
}

func (s *ExprIsTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitExprIsType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) Expr() (localctx IExprContext) {
	return p.expr(0)
}

func (p *ZggParser) expr(_p int) (localctx IExprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 22
	p.EnterRecursionRule(localctx, 22, ZggParserRULE_expr, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(399)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 46, p.GetParserRuleContext()) {
	case 1:
		localctx = NewExprShortImportContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(336)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ZggParserSINGLE_AT || _la == ZggParserDOUBLE_AT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(337)
			p.Match(ZggParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewExprPreIncDecContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(338)
			p.PreIncDec()
		}

	case 3:
		localctx = NewExprPostIncDecContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(339)
			p.PostIncDec()
		}

	case 4:
		localctx = NewExprItByFieldContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(340)
			p.Match(ZggParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(341)

			var _m = p.Match(ZggParserIDENTIFIER)

			localctx.(*ExprItByFieldContext).field = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		localctx = NewExprIdentifierContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(342)
			p.Match(ZggParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		localctx = NewExprLiteralContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(343)
			p.Literal()
		}

	case 7:
		localctx = NewExprNegativeContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(344)
			p.Match(ZggParserMINUS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(345)
			p.expr(26)
		}

	case 8:
		localctx = NewExprLogicNotContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(346)
			p.Match(ZggParserLOGIC_NOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(347)
			p.expr(25)
		}

	case 9:
		localctx = NewExprBitNotContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(348)
			p.Match(ZggParserBIT_NOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(349)
			p.expr(24)
		}

	case 10:
		localctx = NewExprWhenContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(350)
			p.Match(ZggParserWHEN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(351)
			p.Match(ZggParserL_CURLY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(356)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&28146948720585734) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&32349259777) != 0) {
			{
				p.SetState(352)
				p.expr(0)
			}
			{
				p.SetState(353)
				p.Match(ZggParserLEAD_TO)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(354)
				p.expr(0)
			}

			p.SetState(358)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(363)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserELSE {
			{
				p.SetState(360)
				p.Match(ZggParserELSE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(361)
				p.Match(ZggParserLEAD_TO)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(362)
				p.expr(0)
			}

		}
		{
			p.SetState(365)
			p.Match(ZggParserR_CURLY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 11:
		localctx = NewExprWhenValueContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(367)
			p.Match(ZggParserWHEN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(368)
			p.expr(0)
		}
		{
			p.SetState(369)
			p.Match(ZggParserL_CURLY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(374)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&28146965900454918) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&32349261313) != 0) {
			{
				p.SetState(370)
				p.WhenCondition()
			}
			{
				p.SetState(371)
				p.Match(ZggParserLEAD_TO)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(372)
				p.expr(0)
			}

			p.SetState(376)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(381)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserELSE {
			{
				p.SetState(378)
				p.Match(ZggParserELSE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(379)
				p.Match(ZggParserLEAD_TO)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(380)
				p.expr(0)
			}

		}
		{
			p.SetState(383)
			p.Match(ZggParserR_CURLY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 12:
		localctx = NewExprAssignContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(385)
			p.AssignExpr()
		}

	case 13:
		localctx = NewExprSubContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(386)
			p.Match(ZggParserL_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(387)
			p.expr(0)
		}
		{
			p.SetState(388)
			p.Match(ZggParserR_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 14:
		localctx = NewExprUseMethodContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(390)
			p.Match(ZggParserUSE_AT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(391)
			p.Match(ZggParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(392)
			p.expr(4)
		}

	case 15:
		localctx = NewExprUseBlockContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(393)
			p.Match(ZggParserUSE_AT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(394)
			p.CodeBlock()
		}
		{
			p.SetState(395)
			p.expr(3)
		}

	case 16:
		localctx = NewExprUseCloserContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(397)
			p.Match(ZggParserUSE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(398)
			p.expr(2)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(480)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 51, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(478)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 50, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExprPowContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_expr)
				p.SetState(401)

				if !(p.Precpred(p.GetParserRuleContext(), 23)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 23)", ""))
					goto errorExit
				}
				{
					p.SetState(402)
					p.Match(ZggParserPOW)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(403)
					p.expr(23)
				}

			case 2:
				localctx = NewExprTimesDivModContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_expr)
				p.SetState(404)

				if !(p.Precpred(p.GetParserRuleContext(), 22)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 22)", ""))
					goto errorExit
				}
				{
					p.SetState(405)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExprTimesDivModContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !((int64((_la-99)) & ^0x3f) == 0 && ((int64(1)<<(_la-99))&7) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExprTimesDivModContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(406)
					p.expr(23)
				}

			case 3:
				localctx = NewExprPlusMinusContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_expr)
				p.SetState(407)

				if !(p.Precpred(p.GetParserRuleContext(), 21)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 21)", ""))
					goto errorExit
				}
				{
					p.SetState(408)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExprPlusMinusContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == ZggParserPLUS || _la == ZggParserMINUS) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExprPlusMinusContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(409)
					p.expr(22)
				}

			case 4:
				localctx = NewExprBitShiftContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_expr)
				p.SetState(410)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
					goto errorExit
				}
				{
					p.SetState(411)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExprBitShiftContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == ZggParserBIT_SHL || _la == ZggParserBIT_SHR) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExprBitShiftContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(412)
					p.expr(21)
				}

			case 5:
				localctx = NewExprBitAndContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_expr)
				p.SetState(413)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
					goto errorExit
				}
				{
					p.SetState(414)
					p.Match(ZggParserBIT_AND)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(415)
					p.expr(20)
				}

			case 6:
				localctx = NewExprBitOrContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_expr)
				p.SetState(416)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
					goto errorExit
				}
				{
					p.SetState(417)
					p.Match(ZggParserBIT_OR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(418)
					p.expr(19)
				}

			case 7:
				localctx = NewExprBitXorContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_expr)
				p.SetState(419)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
					goto errorExit
				}
				{
					p.SetState(420)
					p.Match(ZggParserBIT_XOR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(421)
					p.expr(18)
				}

			case 8:
				localctx = NewExprCompareContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_expr)
				p.SetState(422)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
					goto errorExit
				}
				{
					p.SetState(423)
					p.Comparator()
				}
				{
					p.SetState(424)
					p.expr(17)
				}

			case 9:
				localctx = NewExprIsTypeContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_expr)
				p.SetState(426)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
					goto errorExit
				}
				{
					p.SetState(427)
					p.Match(ZggParserIS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(428)
					p.expr(16)
				}

			case 10:
				localctx = NewExprInContainerContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_expr)
				p.SetState(429)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
					goto errorExit
				}
				{
					p.SetState(430)
					p.Match(ZggParserIN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(431)
					p.expr(15)
				}

			case 11:
				localctx = NewExprInRangeContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_expr)
				p.SetState(432)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
					goto errorExit
				}
				{
					p.SetState(433)
					p.Match(ZggParserIN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(434)
					p.expr(0)
				}
				{
					p.SetState(435)
					_la = p.GetTokenStream().LA(1)

					if !(_la == ZggParserRANGE_WITHOUT_END || _la == ZggParserRANGE_WITH_END) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(436)
					p.expr(14)
				}

			case 12:
				localctx = NewExprLogicAndContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_expr)
				p.SetState(438)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
					goto errorExit
				}
				{
					p.SetState(439)
					p.Match(ZggParserLOGIC_AND)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(440)
					p.expr(13)
				}

			case 13:
				localctx = NewExprLogicOrContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_expr)
				p.SetState(441)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
					goto errorExit
				}
				{
					p.SetState(442)
					p.Match(ZggParserLOGIC_OR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(443)
					p.expr(12)
				}

			case 14:
				localctx = NewExprQuestionContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*ExprQuestionContext).condition = _prevctx

				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_expr)
				p.SetState(444)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
					goto errorExit
				}
				{
					p.SetState(445)
					p.Match(ZggParserQUESTION)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(446)

					var _x = p.expr(0)

					localctx.(*ExprQuestionContext).trueExpr = _x
				}
				{
					p.SetState(447)
					p.Match(ZggParserCOLON)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(448)

					var _x = p.expr(9)

					localctx.(*ExprQuestionContext).falseExpr = _x
				}

			case 15:
				localctx = NewExprFallbackContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_expr)
				p.SetState(450)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
					goto errorExit
				}
				{
					p.SetState(451)
					p.Match(ZggParserOPTIONAL_ELSE)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(452)
					p.expr(8)
				}

			case 16:
				localctx = NewExprCallContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_expr)
				p.SetState(453)

				if !(p.Precpred(p.GetParserRuleContext(), 36)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 36)", ""))
					goto errorExit
				}
				p.SetState(455)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == ZggParserOPTIONAL_CALL {
					{
						p.SetState(454)
						p.Match(ZggParserOPTIONAL_CALL)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(457)
					p.Arguments()
				}

			case 17:
				localctx = NewExprByFieldContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_expr)
				p.SetState(458)

				if !(p.Precpred(p.GetParserRuleContext(), 31)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 31)", ""))
					goto errorExit
				}
				{
					p.SetState(459)
					p.Match(ZggParserDOT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(460)

					var _m = p.Match(ZggParserIDENTIFIER)

					localctx.(*ExprByFieldContext).field = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 18:
				localctx = NewExprByIndexContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_expr)
				p.SetState(461)

				if !(p.Precpred(p.GetParserRuleContext(), 30)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 30)", ""))
					goto errorExit
				}
				{
					p.SetState(462)
					p.Match(ZggParserL_BRACKET)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(463)

					var _x = p.expr(0)

					localctx.(*ExprByIndexContext).index = _x
				}
				{
					p.SetState(464)
					p.Match(ZggParserR_BRACKET)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 19:
				localctx = NewExprBySliceContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*ExprBySliceContext).container = _prevctx

				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_expr)
				p.SetState(466)

				if !(p.Precpred(p.GetParserRuleContext(), 29)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 29)", ""))
					goto errorExit
				}
				{
					p.SetState(467)
					p.Match(ZggParserL_BRACKET)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(469)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&28146948720585734) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&32349259777) != 0) {
					{
						p.SetState(468)

						var _x = p.expr(0)

						localctx.(*ExprBySliceContext).begin = _x
					}

				}
				{
					p.SetState(471)
					p.Match(ZggParserCOLON)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(473)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&28146948720585734) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&32349259777) != 0) {
					{
						p.SetState(472)

						var _x = p.expr(0)

						localctx.(*ExprBySliceContext).end = _x
					}

				}
				{
					p.SetState(475)
					p.Match(ZggParserR_BRACKET)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 20:
				localctx = NewExprAssertErrorContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_expr)
				p.SetState(476)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(477)
					p.Match(ZggParserLOGIC_NOT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(482)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 51, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWhenConditionContext is an interface to support dynamic dispatch.
type IWhenConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsWhenConditionContext differentiates from other interfaces.
	IsWhenConditionContext()
}

type WhenConditionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhenConditionContext() *WhenConditionContext {
	var p = new(WhenConditionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_whenCondition
	return p
}

func InitEmptyWhenConditionContext(p *WhenConditionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_whenCondition
}

func (*WhenConditionContext) IsWhenConditionContext() {}

func NewWhenConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhenConditionContext {
	var p = new(WhenConditionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_whenCondition

	return p
}

func (s *WhenConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *WhenConditionContext) CopyAll(ctx *WhenConditionContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *WhenConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhenConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type WhenConditionIsTypeContext struct {
	WhenConditionContext
}

func NewWhenConditionIsTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *WhenConditionIsTypeContext {
	var p = new(WhenConditionIsTypeContext)

	InitEmptyWhenConditionContext(&p.WhenConditionContext)
	p.parser = parser
	p.CopyAll(ctx.(*WhenConditionContext))

	return p
}

func (s *WhenConditionIsTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhenConditionIsTypeContext) IS() antlr.TerminalNode {
	return s.GetToken(ZggParserIS, 0)
}

func (s *WhenConditionIsTypeContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *WhenConditionIsTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitWhenConditionIsType(s)

	default:
		return t.VisitChildren(s)
	}
}

type WhenConditionInRangeContext struct {
	WhenConditionContext
	lowerBound IExprContext
	upperBound IExprContext
}

func NewWhenConditionInRangeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *WhenConditionInRangeContext {
	var p = new(WhenConditionInRangeContext)

	InitEmptyWhenConditionContext(&p.WhenConditionContext)
	p.parser = parser
	p.CopyAll(ctx.(*WhenConditionContext))

	return p
}

func (s *WhenConditionInRangeContext) GetLowerBound() IExprContext { return s.lowerBound }

func (s *WhenConditionInRangeContext) GetUpperBound() IExprContext { return s.upperBound }

func (s *WhenConditionInRangeContext) SetLowerBound(v IExprContext) { s.lowerBound = v }

func (s *WhenConditionInRangeContext) SetUpperBound(v IExprContext) { s.upperBound = v }

func (s *WhenConditionInRangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhenConditionInRangeContext) RANGE_WITH_END() antlr.TerminalNode {
	return s.GetToken(ZggParserRANGE_WITH_END, 0)
}

func (s *WhenConditionInRangeContext) RANGE_WITHOUT_END() antlr.TerminalNode {
	return s.GetToken(ZggParserRANGE_WITHOUT_END, 0)
}

func (s *WhenConditionInRangeContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *WhenConditionInRangeContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *WhenConditionInRangeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitWhenConditionInRange(s)

	default:
		return t.VisitChildren(s)
	}
}

type WhenConditionInListContext struct {
	WhenConditionContext
}

func NewWhenConditionInListContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *WhenConditionInListContext {
	var p = new(WhenConditionInListContext)

	InitEmptyWhenConditionContext(&p.WhenConditionContext)
	p.parser = parser
	p.CopyAll(ctx.(*WhenConditionContext))

	return p
}

func (s *WhenConditionInListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhenConditionInListContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *WhenConditionInListContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *WhenConditionInListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZggParserCOMMA)
}

func (s *WhenConditionInListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserCOMMA, i)
}

func (s *WhenConditionInListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitWhenConditionInList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) WhenCondition() (localctx IWhenConditionContext) {
	localctx = NewWhenConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, ZggParserRULE_whenCondition)
	var _la int

	p.SetState(500)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 55, p.GetParserRuleContext()) {
	case 1:
		localctx = NewWhenConditionInListContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(483)
			p.expr(0)
		}
		p.SetState(488)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == ZggParserCOMMA {
			{
				p.SetState(484)
				p.Match(ZggParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(485)
				p.expr(0)
			}

			p.SetState(490)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewWhenConditionInRangeContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(492)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&28146948720585734) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&32349259777) != 0) {
			{
				p.SetState(491)

				var _x = p.expr(0)

				localctx.(*WhenConditionInRangeContext).lowerBound = _x
			}

		}
		{
			p.SetState(494)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ZggParserRANGE_WITHOUT_END || _la == ZggParserRANGE_WITH_END) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(496)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&28146948720585734) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&32349259777) != 0) {
			{
				p.SetState(495)

				var _x = p.expr(0)

				localctx.(*WhenConditionInRangeContext).upperBound = _x
			}

		}

	case 3:
		localctx = NewWhenConditionIsTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(498)
			p.Match(ZggParserIS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(499)
			p.expr(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArgumentsContext is an interface to support dynamic dispatch.
type IArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	L_PAREN() antlr.TerminalNode
	R_PAREN() antlr.TerminalNode
	AllFuncArgument() []IFuncArgumentContext
	FuncArgument(i int) IFuncArgumentContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsArgumentsContext differentiates from other interfaces.
	IsArgumentsContext()
}

type ArgumentsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentsContext() *ArgumentsContext {
	var p = new(ArgumentsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_arguments
	return p
}

func InitEmptyArgumentsContext(p *ArgumentsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_arguments
}

func (*ArgumentsContext) IsArgumentsContext() {}

func NewArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentsContext {
	var p = new(ArgumentsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_arguments

	return p
}

func (s *ArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentsContext) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ZggParserL_PAREN, 0)
}

func (s *ArgumentsContext) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ZggParserR_PAREN, 0)
}

func (s *ArgumentsContext) AllFuncArgument() []IFuncArgumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFuncArgumentContext); ok {
			len++
		}
	}

	tst := make([]IFuncArgumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFuncArgumentContext); ok {
			tst[i] = t.(IFuncArgumentContext)
			i++
		}
	}

	return tst
}

func (s *ArgumentsContext) FuncArgument(i int) IFuncArgumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFuncArgumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFuncArgumentContext)
}

func (s *ArgumentsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZggParserCOMMA)
}

func (s *ArgumentsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserCOMMA, i)
}

func (s *ArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitArguments(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) Arguments() (localctx IArgumentsContext) {
	localctx = NewArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, ZggParserRULE_arguments)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(502)
		p.Match(ZggParserL_PAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(514)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&28146948720585734) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&33423001601) != 0) {
		{
			p.SetState(503)
			p.FuncArgument()
		}
		p.SetState(508)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 56, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(504)
					p.Match(ZggParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(505)
					p.FuncArgument()
				}

			}
			p.SetState(510)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 56, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(512)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserCOMMA {
			{
				p.SetState(511)
				p.Match(ZggParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	}
	{
		p.SetState(516)
		p.Match(ZggParserR_PAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFuncArgumentContext is an interface to support dynamic dispatch.
type IFuncArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPlaceholder returns the placeholder token.
	GetPlaceholder() antlr.Token

	// GetHoleIndex returns the holeIndex token.
	GetHoleIndex() antlr.Token

	// SetPlaceholder sets the placeholder token.
	SetPlaceholder(antlr.Token)

	// SetHoleIndex sets the holeIndex token.
	SetHoleIndex(antlr.Token)

	// GetSimpleArg returns the simpleArg rule contexts.
	GetSimpleArg() IExprContext

	// GetLambdaExpr returns the lambdaExpr rule contexts.
	GetLambdaExpr() IExprContext

	// SetSimpleArg sets the simpleArg rule contexts.
	SetSimpleArg(IExprContext)

	// SetLambdaExpr sets the lambdaExpr rule contexts.
	SetLambdaExpr(IExprContext)

	// Getter signatures
	CodeBlock() ICodeBlockContext
	L_CURLY() antlr.TerminalNode
	R_CURLY() antlr.TerminalNode
	Expr() IExprContext
	MORE_ARGS() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode
	COLON() antlr.TerminalNode
	MOD() antlr.TerminalNode
	INT_ZERO() antlr.TerminalNode
	INT_DEC() antlr.TerminalNode

	// IsFuncArgumentContext differentiates from other interfaces.
	IsFuncArgumentContext()
}

type FuncArgumentContext struct {
	antlr.BaseParserRuleContext
	parser      antlr.Parser
	simpleArg   IExprContext
	lambdaExpr  IExprContext
	placeholder antlr.Token
	holeIndex   antlr.Token
}

func NewEmptyFuncArgumentContext() *FuncArgumentContext {
	var p = new(FuncArgumentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_funcArgument
	return p
}

func InitEmptyFuncArgumentContext(p *FuncArgumentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_funcArgument
}

func (*FuncArgumentContext) IsFuncArgumentContext() {}

func NewFuncArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FuncArgumentContext {
	var p = new(FuncArgumentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_funcArgument

	return p
}

func (s *FuncArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *FuncArgumentContext) GetPlaceholder() antlr.Token { return s.placeholder }

func (s *FuncArgumentContext) GetHoleIndex() antlr.Token { return s.holeIndex }

func (s *FuncArgumentContext) SetPlaceholder(v antlr.Token) { s.placeholder = v }

func (s *FuncArgumentContext) SetHoleIndex(v antlr.Token) { s.holeIndex = v }

func (s *FuncArgumentContext) GetSimpleArg() IExprContext { return s.simpleArg }

func (s *FuncArgumentContext) GetLambdaExpr() IExprContext { return s.lambdaExpr }

func (s *FuncArgumentContext) SetSimpleArg(v IExprContext) { s.simpleArg = v }

func (s *FuncArgumentContext) SetLambdaExpr(v IExprContext) { s.lambdaExpr = v }

func (s *FuncArgumentContext) CodeBlock() ICodeBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodeBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *FuncArgumentContext) L_CURLY() antlr.TerminalNode {
	return s.GetToken(ZggParserL_CURLY, 0)
}

func (s *FuncArgumentContext) R_CURLY() antlr.TerminalNode {
	return s.GetToken(ZggParserR_CURLY, 0)
}

func (s *FuncArgumentContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *FuncArgumentContext) MORE_ARGS() antlr.TerminalNode {
	return s.GetToken(ZggParserMORE_ARGS, 0)
}

func (s *FuncArgumentContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, 0)
}

func (s *FuncArgumentContext) COLON() antlr.TerminalNode {
	return s.GetToken(ZggParserCOLON, 0)
}

func (s *FuncArgumentContext) MOD() antlr.TerminalNode {
	return s.GetToken(ZggParserMOD, 0)
}

func (s *FuncArgumentContext) INT_ZERO() antlr.TerminalNode {
	return s.GetToken(ZggParserINT_ZERO, 0)
}

func (s *FuncArgumentContext) INT_DEC() antlr.TerminalNode {
	return s.GetToken(ZggParserINT_DEC, 0)
}

func (s *FuncArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FuncArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FuncArgumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitFuncArgument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) FuncArgument() (localctx IFuncArgumentContext) {
	localctx = NewFuncArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, ZggParserRULE_funcArgument)
	var _la int

	p.SetState(536)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 62, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(527)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 60, p.GetParserRuleContext()) {
		case 1:
			p.SetState(519)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 59, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(518)
					p.Match(ZggParserMORE_ARGS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			} else if p.HasError() { // JIM
				goto errorExit
			}
			{
				p.SetState(521)

				var _x = p.expr(0)

				localctx.(*FuncArgumentContext).simpleArg = _x
			}

		case 2:
			{
				p.SetState(522)
				p.CodeBlock()
			}

		case 3:
			{
				p.SetState(523)
				p.Match(ZggParserL_CURLY)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(524)

				var _x = p.expr(0)

				localctx.(*FuncArgumentContext).lambdaExpr = _x
			}
			{
				p.SetState(525)
				p.Match(ZggParserR_CURLY)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(529)
			p.Match(ZggParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(530)
			p.Match(ZggParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(531)

			var _x = p.expr(0)

			localctx.(*FuncArgumentContext).simpleArg = _x
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(532)

			var _m = p.Match(ZggParserMOD)

			localctx.(*FuncArgumentContext).placeholder = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(534)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserINT_ZERO || _la == ZggParserINT_DEC {
			{
				p.SetState(533)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*FuncArgumentContext).holeIndex = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == ZggParserINT_ZERO || _la == ZggParserINT_DEC) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*FuncArgumentContext).holeIndex = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAssignExprContext is an interface to support dynamic dispatch.
type IAssignExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsAssignExprContext differentiates from other interfaces.
	IsAssignExprContext()
}

type AssignExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignExprContext() *AssignExprContext {
	var p = new(AssignExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_assignExpr
	return p
}

func InitEmptyAssignExprContext(p *AssignExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_assignExpr
}

func (*AssignExprContext) IsAssignExprContext() {}

func NewAssignExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignExprContext {
	var p = new(AssignExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_assignExpr

	return p
}

func (s *AssignExprContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignExprContext) CopyAll(ctx *AssignExprContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *AssignExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type AssignNewLocalContext struct {
	AssignExprContext
}

func NewAssignNewLocalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AssignNewLocalContext {
	var p = new(AssignNewLocalContext)

	InitEmptyAssignExprContext(&p.AssignExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*AssignExprContext))

	return p
}

func (s *AssignNewLocalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignNewLocalContext) MORE_ARGS() antlr.TerminalNode {
	return s.GetToken(ZggParserMORE_ARGS, 0)
}

func (s *AssignNewLocalContext) LOCAL_ASSIGN() antlr.TerminalNode {
	return s.GetToken(ZggParserLOCAL_ASSIGN, 0)
}

func (s *AssignNewLocalContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *AssignNewLocalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitAssignNewLocal(s)

	default:
		return t.VisitChildren(s)
	}
}

type AssignExistsContext struct {
	AssignExprContext
	op antlr.Token
}

func NewAssignExistsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AssignExistsContext {
	var p = new(AssignExistsContext)

	InitEmptyAssignExprContext(&p.AssignExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*AssignExprContext))

	return p
}

func (s *AssignExistsContext) GetOp() antlr.Token { return s.op }

func (s *AssignExistsContext) SetOp(v antlr.Token) { s.op = v }

func (s *AssignExistsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignExistsContext) Lval() ILvalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILvalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILvalContext)
}

func (s *AssignExistsContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *AssignExistsContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(ZggParserASSIGN, 0)
}

func (s *AssignExistsContext) PLUS_ASSIGN() antlr.TerminalNode {
	return s.GetToken(ZggParserPLUS_ASSIGN, 0)
}

func (s *AssignExistsContext) MINUS_ASSIGN() antlr.TerminalNode {
	return s.GetToken(ZggParserMINUS_ASSIGN, 0)
}

func (s *AssignExistsContext) TIMES_ASSIGN() antlr.TerminalNode {
	return s.GetToken(ZggParserTIMES_ASSIGN, 0)
}

func (s *AssignExistsContext) DIV_ASSIGN() antlr.TerminalNode {
	return s.GetToken(ZggParserDIV_ASSIGN, 0)
}

func (s *AssignExistsContext) BIT_AND_ASSIGN() antlr.TerminalNode {
	return s.GetToken(ZggParserBIT_AND_ASSIGN, 0)
}

func (s *AssignExistsContext) BIT_OR_ASSIGN() antlr.TerminalNode {
	return s.GetToken(ZggParserBIT_OR_ASSIGN, 0)
}

func (s *AssignExistsContext) BIT_XOR_ASSIGN() antlr.TerminalNode {
	return s.GetToken(ZggParserBIT_XOR_ASSIGN, 0)
}

func (s *AssignExistsContext) BIT_SHL_ASSIGN() antlr.TerminalNode {
	return s.GetToken(ZggParserBIT_SHL_ASSIGN, 0)
}

func (s *AssignExistsContext) BIT_SHR_ASSIGN() antlr.TerminalNode {
	return s.GetToken(ZggParserBIT_SHR_ASSIGN, 0)
}

func (s *AssignExistsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitAssignExists(s)

	default:
		return t.VisitChildren(s)
	}
}

type AssignNewDeObjectContext struct {
	AssignExprContext
}

func NewAssignNewDeObjectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AssignNewDeObjectContext {
	var p = new(AssignNewDeObjectContext)

	InitEmptyAssignExprContext(&p.AssignExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*AssignExprContext))

	return p
}

func (s *AssignNewDeObjectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignNewDeObjectContext) AllL_CURLY() []antlr.TerminalNode {
	return s.GetTokens(ZggParserL_CURLY)
}

func (s *AssignNewDeObjectContext) L_CURLY(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserL_CURLY, i)
}

func (s *AssignNewDeObjectContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(ZggParserIDENTIFIER)
}

func (s *AssignNewDeObjectContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, i)
}

func (s *AssignNewDeObjectContext) LOCAL_ASSIGN() antlr.TerminalNode {
	return s.GetToken(ZggParserLOCAL_ASSIGN, 0)
}

func (s *AssignNewDeObjectContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *AssignNewDeObjectContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZggParserCOMMA)
}

func (s *AssignNewDeObjectContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserCOMMA, i)
}

func (s *AssignNewDeObjectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitAssignNewDeObject(s)

	default:
		return t.VisitChildren(s)
	}
}

type AssignNewContext struct {
	AssignExprContext
}

func NewAssignNewContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AssignNewContext {
	var p = new(AssignNewContext)

	InitEmptyAssignExprContext(&p.AssignExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*AssignExprContext))

	return p
}

func (s *AssignNewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignNewContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, 0)
}

func (s *AssignNewContext) LOCAL_ASSIGN() antlr.TerminalNode {
	return s.GetToken(ZggParserLOCAL_ASSIGN, 0)
}

func (s *AssignNewContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *AssignNewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitAssignNew(s)

	default:
		return t.VisitChildren(s)
	}
}

type AssignNewDeArrayContext struct {
	AssignExprContext
}

func NewAssignNewDeArrayContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AssignNewDeArrayContext {
	var p = new(AssignNewDeArrayContext)

	InitEmptyAssignExprContext(&p.AssignExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*AssignExprContext))

	return p
}

func (s *AssignNewDeArrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignNewDeArrayContext) L_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZggParserL_BRACKET, 0)
}

func (s *AssignNewDeArrayContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(ZggParserIDENTIFIER)
}

func (s *AssignNewDeArrayContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, i)
}

func (s *AssignNewDeArrayContext) R_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZggParserR_BRACKET, 0)
}

func (s *AssignNewDeArrayContext) LOCAL_ASSIGN() antlr.TerminalNode {
	return s.GetToken(ZggParserLOCAL_ASSIGN, 0)
}

func (s *AssignNewDeArrayContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *AssignNewDeArrayContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZggParserCOMMA)
}

func (s *AssignNewDeArrayContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserCOMMA, i)
}

func (s *AssignNewDeArrayContext) MORE_ARGS() antlr.TerminalNode {
	return s.GetToken(ZggParserMORE_ARGS, 0)
}

func (s *AssignNewDeArrayContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitAssignNewDeArray(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) AssignExpr() (localctx IAssignExprContext) {
	localctx = NewAssignExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, ZggParserRULE_assignExpr)
	var _la int

	var _alt int

	p.SetState(580)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 67, p.GetParserRuleContext()) {
	case 1:
		localctx = NewAssignExistsContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(538)
			p.lval(0)
		}
		{
			p.SetState(539)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AssignExistsContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !((int64((_la-60)) & ^0x3f) == 0 && ((int64(1)<<(_la-60))&68720492559) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AssignExistsContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(540)
			p.expr(0)
		}

	case 2:
		localctx = NewAssignNewContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(542)
			p.Match(ZggParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(543)
			p.Match(ZggParserLOCAL_ASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(544)
			p.expr(0)
		}

	case 3:
		localctx = NewAssignNewDeArrayContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(545)
			p.Match(ZggParserL_BRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(546)
			p.Match(ZggParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(551)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 63, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(547)
					p.Match(ZggParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(548)
					p.Match(ZggParserIDENTIFIER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(553)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 63, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(557)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 64, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(554)
				p.Match(ZggParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(555)
				p.Match(ZggParserMORE_ARGS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(556)
				p.Match(ZggParserIDENTIFIER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(560)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserCOMMA {
			{
				p.SetState(559)
				p.Match(ZggParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(562)
			p.Match(ZggParserR_BRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(563)
			p.Match(ZggParserLOCAL_ASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(564)
			p.expr(0)
		}

	case 4:
		localctx = NewAssignNewDeObjectContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(565)
			p.Match(ZggParserL_CURLY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(566)
			p.Match(ZggParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(571)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == ZggParserCOMMA {
			{
				p.SetState(567)
				p.Match(ZggParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(568)
				p.Match(ZggParserIDENTIFIER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(573)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(574)
			p.Match(ZggParserL_CURLY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(575)
			p.Match(ZggParserLOCAL_ASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(576)
			p.expr(0)
		}

	case 5:
		localctx = NewAssignNewLocalContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(577)
			p.Match(ZggParserMORE_ARGS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(578)
			p.Match(ZggParserLOCAL_ASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(579)
			p.expr(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPreIncDecContext is an interface to support dynamic dispatch.
type IPreIncDecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// Getter signatures
	Lval() ILvalContext
	PLUS_PLUS() antlr.TerminalNode
	MINUS_MINUS() antlr.TerminalNode

	// IsPreIncDecContext differentiates from other interfaces.
	IsPreIncDecContext()
}

type PreIncDecContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyPreIncDecContext() *PreIncDecContext {
	var p = new(PreIncDecContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_preIncDec
	return p
}

func InitEmptyPreIncDecContext(p *PreIncDecContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_preIncDec
}

func (*PreIncDecContext) IsPreIncDecContext() {}

func NewPreIncDecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PreIncDecContext {
	var p = new(PreIncDecContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_preIncDec

	return p
}

func (s *PreIncDecContext) GetParser() antlr.Parser { return s.parser }

func (s *PreIncDecContext) GetOp() antlr.Token { return s.op }

func (s *PreIncDecContext) SetOp(v antlr.Token) { s.op = v }

func (s *PreIncDecContext) Lval() ILvalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILvalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILvalContext)
}

func (s *PreIncDecContext) PLUS_PLUS() antlr.TerminalNode {
	return s.GetToken(ZggParserPLUS_PLUS, 0)
}

func (s *PreIncDecContext) MINUS_MINUS() antlr.TerminalNode {
	return s.GetToken(ZggParserMINUS_MINUS, 0)
}

func (s *PreIncDecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PreIncDecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PreIncDecContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitPreIncDec(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) PreIncDec() (localctx IPreIncDecContext) {
	localctx = NewPreIncDecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, ZggParserRULE_preIncDec)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(582)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*PreIncDecContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == ZggParserPLUS_PLUS || _la == ZggParserMINUS_MINUS) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*PreIncDecContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(583)
		p.lval(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPostIncDecContext is an interface to support dynamic dispatch.
type IPostIncDecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// Getter signatures
	Lval() ILvalContext
	PLUS_PLUS() antlr.TerminalNode
	MINUS_MINUS() antlr.TerminalNode

	// IsPostIncDecContext differentiates from other interfaces.
	IsPostIncDecContext()
}

type PostIncDecContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyPostIncDecContext() *PostIncDecContext {
	var p = new(PostIncDecContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_postIncDec
	return p
}

func InitEmptyPostIncDecContext(p *PostIncDecContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_postIncDec
}

func (*PostIncDecContext) IsPostIncDecContext() {}

func NewPostIncDecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostIncDecContext {
	var p = new(PostIncDecContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_postIncDec

	return p
}

func (s *PostIncDecContext) GetParser() antlr.Parser { return s.parser }

func (s *PostIncDecContext) GetOp() antlr.Token { return s.op }

func (s *PostIncDecContext) SetOp(v antlr.Token) { s.op = v }

func (s *PostIncDecContext) Lval() ILvalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILvalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILvalContext)
}

func (s *PostIncDecContext) PLUS_PLUS() antlr.TerminalNode {
	return s.GetToken(ZggParserPLUS_PLUS, 0)
}

func (s *PostIncDecContext) MINUS_MINUS() antlr.TerminalNode {
	return s.GetToken(ZggParserMINUS_MINUS, 0)
}

func (s *PostIncDecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostIncDecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PostIncDecContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitPostIncDec(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) PostIncDec() (localctx IPostIncDecContext) {
	localctx = NewPostIncDecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, ZggParserRULE_postIncDec)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(585)
		p.lval(0)
	}
	{
		p.SetState(586)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*PostIncDecContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == ZggParserPLUS_PLUS || _la == ZggParserMINUS_MINUS) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*PostIncDecContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILvalContext is an interface to support dynamic dispatch.
type ILvalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsLvalContext differentiates from other interfaces.
	IsLvalContext()
}

type LvalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLvalContext() *LvalContext {
	var p = new(LvalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_lval
	return p
}

func InitEmptyLvalContext(p *LvalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_lval
}

func (*LvalContext) IsLvalContext() {}

func NewLvalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LvalContext {
	var p = new(LvalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_lval

	return p
}

func (s *LvalContext) GetParser() antlr.Parser { return s.parser }

func (s *LvalContext) CopyAll(ctx *LvalContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *LvalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LvalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type LvalByIdContext struct {
	LvalContext
}

func NewLvalByIdContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LvalByIdContext {
	var p = new(LvalByIdContext)

	InitEmptyLvalContext(&p.LvalContext)
	p.parser = parser
	p.CopyAll(ctx.(*LvalContext))

	return p
}

func (s *LvalByIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LvalByIdContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, 0)
}

func (s *LvalByIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitLvalById(s)

	default:
		return t.VisitChildren(s)
	}
}

type LvalByIndexContext struct {
	LvalContext
	index IExprContext
}

func NewLvalByIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LvalByIndexContext {
	var p = new(LvalByIndexContext)

	InitEmptyLvalContext(&p.LvalContext)
	p.parser = parser
	p.CopyAll(ctx.(*LvalContext))

	return p
}

func (s *LvalByIndexContext) GetIndex() IExprContext { return s.index }

func (s *LvalByIndexContext) SetIndex(v IExprContext) { s.index = v }

func (s *LvalByIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LvalByIndexContext) Lval() ILvalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILvalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILvalContext)
}

func (s *LvalByIndexContext) L_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZggParserL_BRACKET, 0)
}

func (s *LvalByIndexContext) R_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZggParserR_BRACKET, 0)
}

func (s *LvalByIndexContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *LvalByIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitLvalByIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

type LvalItByFieldContext struct {
	LvalContext
	field antlr.Token
}

func NewLvalItByFieldContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LvalItByFieldContext {
	var p = new(LvalItByFieldContext)

	InitEmptyLvalContext(&p.LvalContext)
	p.parser = parser
	p.CopyAll(ctx.(*LvalContext))

	return p
}

func (s *LvalItByFieldContext) GetField() antlr.Token { return s.field }

func (s *LvalItByFieldContext) SetField(v antlr.Token) { s.field = v }

func (s *LvalItByFieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LvalItByFieldContext) DOT() antlr.TerminalNode {
	return s.GetToken(ZggParserDOT, 0)
}

func (s *LvalItByFieldContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, 0)
}

func (s *LvalItByFieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitLvalItByField(s)

	default:
		return t.VisitChildren(s)
	}
}

type LvalByFieldContext struct {
	LvalContext
	field antlr.Token
}

func NewLvalByFieldContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LvalByFieldContext {
	var p = new(LvalByFieldContext)

	InitEmptyLvalContext(&p.LvalContext)
	p.parser = parser
	p.CopyAll(ctx.(*LvalContext))

	return p
}

func (s *LvalByFieldContext) GetField() antlr.Token { return s.field }

func (s *LvalByFieldContext) SetField(v antlr.Token) { s.field = v }

func (s *LvalByFieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LvalByFieldContext) Lval() ILvalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILvalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILvalContext)
}

func (s *LvalByFieldContext) DOT() antlr.TerminalNode {
	return s.GetToken(ZggParserDOT, 0)
}

func (s *LvalByFieldContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, 0)
}

func (s *LvalByFieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitLvalByField(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) Lval() (localctx ILvalContext) {
	return p.lval(0)
}

func (p *ZggParser) lval(_p int) (localctx ILvalContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewLvalContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILvalContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 36
	p.EnterRecursionRule(localctx, 36, ZggParserRULE_lval, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(592)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ZggParserDOT:
		localctx = NewLvalItByFieldContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(589)
			p.Match(ZggParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(590)

			var _m = p.Match(ZggParserIDENTIFIER)

			localctx.(*LvalItByFieldContext).field = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ZggParserIDENTIFIER:
		localctx = NewLvalByIdContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(591)
			p.Match(ZggParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(604)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 70, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(602)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 69, p.GetParserRuleContext()) {
			case 1:
				localctx = NewLvalByFieldContext(p, NewLvalContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_lval)
				p.SetState(594)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
					goto errorExit
				}
				{
					p.SetState(595)
					p.Match(ZggParserDOT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(596)

					var _m = p.Match(ZggParserIDENTIFIER)

					localctx.(*LvalByFieldContext).field = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 2:
				localctx = NewLvalByIndexContext(p, NewLvalContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZggParserRULE_lval)
				p.SetState(597)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(598)
					p.Match(ZggParserL_BRACKET)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(599)

					var _x = p.expr(0)

					localctx.(*LvalByIndexContext).index = _x
				}
				{
					p.SetState(600)
					p.Match(ZggParserR_BRACKET)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(606)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 70, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIntegerContext is an interface to support dynamic dispatch.
type IIntegerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsIntegerContext differentiates from other interfaces.
	IsIntegerContext()
}

type IntegerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntegerContext() *IntegerContext {
	var p = new(IntegerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_integer
	return p
}

func InitEmptyIntegerContext(p *IntegerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_integer
}

func (*IntegerContext) IsIntegerContext() {}

func NewIntegerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntegerContext {
	var p = new(IntegerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_integer

	return p
}

func (s *IntegerContext) GetParser() antlr.Parser { return s.parser }

func (s *IntegerContext) CopyAll(ctx *IntegerContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *IntegerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntegerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type IntegerHexContext struct {
	IntegerContext
}

func NewIntegerHexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IntegerHexContext {
	var p = new(IntegerHexContext)

	InitEmptyIntegerContext(&p.IntegerContext)
	p.parser = parser
	p.CopyAll(ctx.(*IntegerContext))

	return p
}

func (s *IntegerHexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntegerHexContext) INT_HEX() antlr.TerminalNode {
	return s.GetToken(ZggParserINT_HEX, 0)
}

func (s *IntegerHexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitIntegerHex(s)

	default:
		return t.VisitChildren(s)
	}
}

type IntegerBinContext struct {
	IntegerContext
}

func NewIntegerBinContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IntegerBinContext {
	var p = new(IntegerBinContext)

	InitEmptyIntegerContext(&p.IntegerContext)
	p.parser = parser
	p.CopyAll(ctx.(*IntegerContext))

	return p
}

func (s *IntegerBinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntegerBinContext) INT_BIN() antlr.TerminalNode {
	return s.GetToken(ZggParserINT_BIN, 0)
}

func (s *IntegerBinContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitIntegerBin(s)

	default:
		return t.VisitChildren(s)
	}
}

type IntegerDecContext struct {
	IntegerContext
}

func NewIntegerDecContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IntegerDecContext {
	var p = new(IntegerDecContext)

	InitEmptyIntegerContext(&p.IntegerContext)
	p.parser = parser
	p.CopyAll(ctx.(*IntegerContext))

	return p
}

func (s *IntegerDecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntegerDecContext) INT_DEC() antlr.TerminalNode {
	return s.GetToken(ZggParserINT_DEC, 0)
}

func (s *IntegerDecContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitIntegerDec(s)

	default:
		return t.VisitChildren(s)
	}
}

type IntegerZeroContext struct {
	IntegerContext
}

func NewIntegerZeroContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IntegerZeroContext {
	var p = new(IntegerZeroContext)

	InitEmptyIntegerContext(&p.IntegerContext)
	p.parser = parser
	p.CopyAll(ctx.(*IntegerContext))

	return p
}

func (s *IntegerZeroContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntegerZeroContext) INT_ZERO() antlr.TerminalNode {
	return s.GetToken(ZggParserINT_ZERO, 0)
}

func (s *IntegerZeroContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitIntegerZero(s)

	default:
		return t.VisitChildren(s)
	}
}

type IntegerOctContext struct {
	IntegerContext
}

func NewIntegerOctContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IntegerOctContext {
	var p = new(IntegerOctContext)

	InitEmptyIntegerContext(&p.IntegerContext)
	p.parser = parser
	p.CopyAll(ctx.(*IntegerContext))

	return p
}

func (s *IntegerOctContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntegerOctContext) INT_OCT() antlr.TerminalNode {
	return s.GetToken(ZggParserINT_OCT, 0)
}

func (s *IntegerOctContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitIntegerOct(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) Integer() (localctx IIntegerContext) {
	localctx = NewIntegerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, ZggParserRULE_integer)
	p.SetState(612)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ZggParserINT_ZERO:
		localctx = NewIntegerZeroContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(607)
			p.Match(ZggParserINT_ZERO)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ZggParserINT_DEC:
		localctx = NewIntegerDecContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(608)
			p.Match(ZggParserINT_DEC)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ZggParserINT_HEX:
		localctx = NewIntegerHexContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(609)
			p.Match(ZggParserINT_HEX)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ZggParserINT_OCT:
		localctx = NewIntegerOctContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(610)
			p.Match(ZggParserINT_OCT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ZggParserINT_BIN:
		localctx = NewIntegerBinContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(611)
			p.Match(ZggParserINT_BIN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_literal
	return p
}

func InitEmptyLiteralContext(p *LiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_literal
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) CopyAll(ctx *LiteralContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type LiteralFloatContext struct {
	LiteralContext
}

func NewLiteralFloatContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralFloatContext {
	var p = new(LiteralFloatContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralFloatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralFloatContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(ZggParserFLOAT, 0)
}

func (s *LiteralFloatContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitLiteralFloat(s)

	default:
		return t.VisitChildren(s)
	}
}

type LiteralObjectContext struct {
	LiteralContext
}

func NewLiteralObjectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralObjectContext {
	var p = new(LiteralObjectContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralObjectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralObjectContext) L_CURLY() antlr.TerminalNode {
	return s.GetToken(ZggParserL_CURLY, 0)
}

func (s *LiteralObjectContext) R_CURLY() antlr.TerminalNode {
	return s.GetToken(ZggParserR_CURLY, 0)
}

func (s *LiteralObjectContext) AllObjItem() []IObjItemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObjItemContext); ok {
			len++
		}
	}

	tst := make([]IObjItemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObjItemContext); ok {
			tst[i] = t.(IObjItemContext)
			i++
		}
	}

	return tst
}

func (s *LiteralObjectContext) ObjItem(i int) IObjItemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObjItemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObjItemContext)
}

func (s *LiteralObjectContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZggParserCOMMA)
}

func (s *LiteralObjectContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserCOMMA, i)
}

func (s *LiteralObjectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitLiteralObject(s)

	default:
		return t.VisitChildren(s)
	}
}

type LiteralBoolContext struct {
	LiteralContext
}

func NewLiteralBoolContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralBoolContext {
	var p = new(LiteralBoolContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralBoolContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralBoolContext) TRUE() antlr.TerminalNode {
	return s.GetToken(ZggParserTRUE, 0)
}

func (s *LiteralBoolContext) FALSE() antlr.TerminalNode {
	return s.GetToken(ZggParserFALSE, 0)
}

func (s *LiteralBoolContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitLiteralBool(s)

	default:
		return t.VisitChildren(s)
	}
}

type LiteralArrayContext struct {
	LiteralContext
}

func NewLiteralArrayContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralArrayContext {
	var p = new(LiteralArrayContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralArrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralArrayContext) L_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZggParserL_BRACKET, 0)
}

func (s *LiteralArrayContext) R_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZggParserR_BRACKET, 0)
}

func (s *LiteralArrayContext) AllArrayItem() []IArrayItemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IArrayItemContext); ok {
			len++
		}
	}

	tst := make([]IArrayItemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IArrayItemContext); ok {
			tst[i] = t.(IArrayItemContext)
			i++
		}
	}

	return tst
}

func (s *LiteralArrayContext) ArrayItem(i int) IArrayItemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayItemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayItemContext)
}

func (s *LiteralArrayContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZggParserCOMMA)
}

func (s *LiteralArrayContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserCOMMA, i)
}

func (s *LiteralArrayContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitLiteralArray(s)

	default:
		return t.VisitChildren(s)
	}
}

type LiteralStringContext struct {
	LiteralContext
}

func NewLiteralStringContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralStringContext {
	var p = new(LiteralStringContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralStringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralStringContext) StringLiteral() IStringLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *LiteralStringContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitLiteralString(s)

	default:
		return t.VisitChildren(s)
	}
}

type LiteralLambdaExprContext struct {
	LiteralContext
}

func NewLiteralLambdaExprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralLambdaExprContext {
	var p = new(LiteralLambdaExprContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralLambdaExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralLambdaExprContext) ARROW() antlr.TerminalNode {
	return s.GetToken(ZggParserARROW, 0)
}

func (s *LiteralLambdaExprContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *LiteralLambdaExprContext) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ZggParserL_PAREN, 0)
}

func (s *LiteralLambdaExprContext) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ZggParserR_PAREN, 0)
}

func (s *LiteralLambdaExprContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(ZggParserIDENTIFIER)
}

func (s *LiteralLambdaExprContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, i)
}

func (s *LiteralLambdaExprContext) MORE_ARGS() antlr.TerminalNode {
	return s.GetToken(ZggParserMORE_ARGS, 0)
}

func (s *LiteralLambdaExprContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZggParserCOMMA)
}

func (s *LiteralLambdaExprContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserCOMMA, i)
}

func (s *LiteralLambdaExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitLiteralLambdaExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

type LiteralENumContext struct {
	LiteralContext
}

func NewLiteralENumContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralENumContext {
	var p = new(LiteralENumContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralENumContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralENumContext) ENUM() antlr.TerminalNode {
	return s.GetToken(ZggParserENUM, 0)
}

func (s *LiteralENumContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitLiteralENum(s)

	default:
		return t.VisitChildren(s)
	}
}

type LiteralNilContext struct {
	LiteralContext
}

func NewLiteralNilContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralNilContext {
	var p = new(LiteralNilContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralNilContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralNilContext) NIL() antlr.TerminalNode {
	return s.GetToken(ZggParserNIL, 0)
}

func (s *LiteralNilContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitLiteralNil(s)

	default:
		return t.VisitChildren(s)
	}
}

type LiteralUndefinedContext struct {
	LiteralContext
}

func NewLiteralUndefinedContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralUndefinedContext {
	var p = new(LiteralUndefinedContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralUndefinedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralUndefinedContext) UNDEFINED() antlr.TerminalNode {
	return s.GetToken(ZggParserUNDEFINED, 0)
}

func (s *LiteralUndefinedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitLiteralUndefined(s)

	default:
		return t.VisitChildren(s)
	}
}

type LiteralFuncContext struct {
	LiteralContext
}

func NewLiteralFuncContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralFuncContext {
	var p = new(LiteralFuncContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralFuncContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralFuncContext) FUNC() antlr.TerminalNode {
	return s.GetToken(ZggParserFUNC, 0)
}

func (s *LiteralFuncContext) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ZggParserL_PAREN, 0)
}

func (s *LiteralFuncContext) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ZggParserR_PAREN, 0)
}

func (s *LiteralFuncContext) CodeBlock() ICodeBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodeBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *LiteralFuncContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(ZggParserIDENTIFIER)
}

func (s *LiteralFuncContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, i)
}

func (s *LiteralFuncContext) MORE_ARGS() antlr.TerminalNode {
	return s.GetToken(ZggParserMORE_ARGS, 0)
}

func (s *LiteralFuncContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZggParserCOMMA)
}

func (s *LiteralFuncContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserCOMMA, i)
}

func (s *LiteralFuncContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitLiteralFunc(s)

	default:
		return t.VisitChildren(s)
	}
}

type LiteralLambdaBlockContext struct {
	LiteralContext
}

func NewLiteralLambdaBlockContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralLambdaBlockContext {
	var p = new(LiteralLambdaBlockContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralLambdaBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralLambdaBlockContext) ARROW() antlr.TerminalNode {
	return s.GetToken(ZggParserARROW, 0)
}

func (s *LiteralLambdaBlockContext) CodeBlock() ICodeBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodeBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *LiteralLambdaBlockContext) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ZggParserL_PAREN, 0)
}

func (s *LiteralLambdaBlockContext) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ZggParserR_PAREN, 0)
}

func (s *LiteralLambdaBlockContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(ZggParserIDENTIFIER)
}

func (s *LiteralLambdaBlockContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, i)
}

func (s *LiteralLambdaBlockContext) MORE_ARGS() antlr.TerminalNode {
	return s.GetToken(ZggParserMORE_ARGS, 0)
}

func (s *LiteralLambdaBlockContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZggParserCOMMA)
}

func (s *LiteralLambdaBlockContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserCOMMA, i)
}

func (s *LiteralLambdaBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitLiteralLambdaBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

type ArrayComprehensionContext struct {
	LiteralContext
	itemExpr IExprContext
	indexer  antlr.Token
	value    antlr.Token
	begin    IExprContext
	end      IExprContext
	filter   IExprContext
}

func NewArrayComprehensionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ArrayComprehensionContext {
	var p = new(ArrayComprehensionContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *ArrayComprehensionContext) GetIndexer() antlr.Token { return s.indexer }

func (s *ArrayComprehensionContext) GetValue() antlr.Token { return s.value }

func (s *ArrayComprehensionContext) SetIndexer(v antlr.Token) { s.indexer = v }

func (s *ArrayComprehensionContext) SetValue(v antlr.Token) { s.value = v }

func (s *ArrayComprehensionContext) GetItemExpr() IExprContext { return s.itemExpr }

func (s *ArrayComprehensionContext) GetBegin() IExprContext { return s.begin }

func (s *ArrayComprehensionContext) GetEnd() IExprContext { return s.end }

func (s *ArrayComprehensionContext) GetFilter() IExprContext { return s.filter }

func (s *ArrayComprehensionContext) SetItemExpr(v IExprContext) { s.itemExpr = v }

func (s *ArrayComprehensionContext) SetBegin(v IExprContext) { s.begin = v }

func (s *ArrayComprehensionContext) SetEnd(v IExprContext) { s.end = v }

func (s *ArrayComprehensionContext) SetFilter(v IExprContext) { s.filter = v }

func (s *ArrayComprehensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayComprehensionContext) L_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZggParserL_BRACKET, 0)
}

func (s *ArrayComprehensionContext) FOR() antlr.TerminalNode {
	return s.GetToken(ZggParserFOR, 0)
}

func (s *ArrayComprehensionContext) IN() antlr.TerminalNode {
	return s.GetToken(ZggParserIN, 0)
}

func (s *ArrayComprehensionContext) R_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZggParserR_BRACKET, 0)
}

func (s *ArrayComprehensionContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ArrayComprehensionContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ArrayComprehensionContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(ZggParserIDENTIFIER)
}

func (s *ArrayComprehensionContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, i)
}

func (s *ArrayComprehensionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(ZggParserCOMMA, 0)
}

func (s *ArrayComprehensionContext) IF() antlr.TerminalNode {
	return s.GetToken(ZggParserIF, 0)
}

func (s *ArrayComprehensionContext) RANGE_WITH_END() antlr.TerminalNode {
	return s.GetToken(ZggParserRANGE_WITH_END, 0)
}

func (s *ArrayComprehensionContext) RANGE_WITHOUT_END() antlr.TerminalNode {
	return s.GetToken(ZggParserRANGE_WITHOUT_END, 0)
}

func (s *ArrayComprehensionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitArrayComprehension(s)

	default:
		return t.VisitChildren(s)
	}
}

type LiteralIntegerContext struct {
	LiteralContext
}

func NewLiteralIntegerContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralIntegerContext {
	var p = new(LiteralIntegerContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralIntegerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralIntegerContext) Integer() IIntegerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerContext)
}

func (s *LiteralIntegerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitLiteralInteger(s)

	default:
		return t.VisitChildren(s)
	}
}

type LiteralBigNumContext struct {
	LiteralContext
}

func NewLiteralBigNumContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralBigNumContext {
	var p = new(LiteralBigNumContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *LiteralBigNumContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralBigNumContext) BIGNUM() antlr.TerminalNode {
	return s.GetToken(ZggParserBIGNUM, 0)
}

func (s *LiteralBigNumContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitLiteralBigNum(s)

	default:
		return t.VisitChildren(s)
	}
}

type ObjectComprehensionContext struct {
	LiteralContext
	keyExpr   IExprContext
	valueExpr IExprContext
	indexer   antlr.Token
	value     antlr.Token
	begin     IExprContext
	end       IExprContext
	filter    IExprContext
}

func NewObjectComprehensionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ObjectComprehensionContext {
	var p = new(ObjectComprehensionContext)

	InitEmptyLiteralContext(&p.LiteralContext)
	p.parser = parser
	p.CopyAll(ctx.(*LiteralContext))

	return p
}

func (s *ObjectComprehensionContext) GetIndexer() antlr.Token { return s.indexer }

func (s *ObjectComprehensionContext) GetValue() antlr.Token { return s.value }

func (s *ObjectComprehensionContext) SetIndexer(v antlr.Token) { s.indexer = v }

func (s *ObjectComprehensionContext) SetValue(v antlr.Token) { s.value = v }

func (s *ObjectComprehensionContext) GetKeyExpr() IExprContext { return s.keyExpr }

func (s *ObjectComprehensionContext) GetValueExpr() IExprContext { return s.valueExpr }

func (s *ObjectComprehensionContext) GetBegin() IExprContext { return s.begin }

func (s *ObjectComprehensionContext) GetEnd() IExprContext { return s.end }

func (s *ObjectComprehensionContext) GetFilter() IExprContext { return s.filter }

func (s *ObjectComprehensionContext) SetKeyExpr(v IExprContext) { s.keyExpr = v }

func (s *ObjectComprehensionContext) SetValueExpr(v IExprContext) { s.valueExpr = v }

func (s *ObjectComprehensionContext) SetBegin(v IExprContext) { s.begin = v }

func (s *ObjectComprehensionContext) SetEnd(v IExprContext) { s.end = v }

func (s *ObjectComprehensionContext) SetFilter(v IExprContext) { s.filter = v }

func (s *ObjectComprehensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectComprehensionContext) L_CURLY() antlr.TerminalNode {
	return s.GetToken(ZggParserL_CURLY, 0)
}

func (s *ObjectComprehensionContext) COLON() antlr.TerminalNode {
	return s.GetToken(ZggParserCOLON, 0)
}

func (s *ObjectComprehensionContext) FOR() antlr.TerminalNode {
	return s.GetToken(ZggParserFOR, 0)
}

func (s *ObjectComprehensionContext) IN() antlr.TerminalNode {
	return s.GetToken(ZggParserIN, 0)
}

func (s *ObjectComprehensionContext) R_CURLY() antlr.TerminalNode {
	return s.GetToken(ZggParserR_CURLY, 0)
}

func (s *ObjectComprehensionContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ObjectComprehensionContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ObjectComprehensionContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(ZggParserIDENTIFIER)
}

func (s *ObjectComprehensionContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, i)
}

func (s *ObjectComprehensionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(ZggParserCOMMA, 0)
}

func (s *ObjectComprehensionContext) IF() antlr.TerminalNode {
	return s.GetToken(ZggParserIF, 0)
}

func (s *ObjectComprehensionContext) RANGE_WITH_END() antlr.TerminalNode {
	return s.GetToken(ZggParserRANGE_WITH_END, 0)
}

func (s *ObjectComprehensionContext) RANGE_WITHOUT_END() antlr.TerminalNode {
	return s.GetToken(ZggParserRANGE_WITHOUT_END, 0)
}

func (s *ObjectComprehensionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitObjectComprehension(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) Literal() (localctx ILiteralContext) {
	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, ZggParserRULE_literal)
	var _la int

	var _alt int

	p.SetState(772)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 98, p.GetParserRuleContext()) {
	case 1:
		localctx = NewLiteralIntegerContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(614)
			p.Integer()
		}

	case 2:
		localctx = NewLiteralFloatContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(615)
			p.Match(ZggParserFLOAT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		localctx = NewLiteralENumContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(616)
			p.Match(ZggParserENUM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		localctx = NewLiteralBigNumContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(617)
			p.Match(ZggParserBIGNUM)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		localctx = NewLiteralBoolContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(618)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ZggParserTRUE || _la == ZggParserFALSE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 6:
		localctx = NewLiteralStringContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(619)
			p.StringLiteral()
		}

	case 7:
		localctx = NewLiteralNilContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(620)
			p.Match(ZggParserNIL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 8:
		localctx = NewLiteralUndefinedContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(621)
			p.Match(ZggParserUNDEFINED)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 9:
		localctx = NewLiteralFuncContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(622)
			p.Match(ZggParserFUNC)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(623)
			p.Match(ZggParserL_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(642)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		switch p.GetTokenStream().LA(1) {
		case ZggParserIDENTIFIER:
			{
				p.SetState(624)
				p.Match(ZggParserIDENTIFIER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(629)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 72, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(625)
						p.Match(ZggParserCOMMA)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(626)
						p.Match(ZggParserIDENTIFIER)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				p.SetState(631)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 72, p.GetParserRuleContext())
				if p.HasError() {
					goto errorExit
				}
			}
			p.SetState(635)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 73, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(632)
					p.Match(ZggParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(633)
					p.Match(ZggParserMORE_ARGS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(634)
					p.Match(ZggParserIDENTIFIER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			} else if p.HasError() { // JIM
				goto errorExit
			}
			p.SetState(638)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ZggParserCOMMA {
				{
					p.SetState(637)
					p.Match(ZggParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		case ZggParserMORE_ARGS:
			{
				p.SetState(640)
				p.Match(ZggParserMORE_ARGS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(641)
				p.Match(ZggParserIDENTIFIER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case ZggParserR_PAREN:

		default:
		}
		{
			p.SetState(644)
			p.Match(ZggParserR_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(645)
			p.CodeBlock()
		}

	case 10:
		localctx = NewLiteralLambdaExprContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		p.SetState(669)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case ZggParserL_PAREN:
			{
				p.SetState(646)
				p.Match(ZggParserL_PAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(665)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			switch p.GetTokenStream().LA(1) {
			case ZggParserIDENTIFIER:
				{
					p.SetState(647)
					p.Match(ZggParserIDENTIFIER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(652)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 76, p.GetParserRuleContext())
				if p.HasError() {
					goto errorExit
				}
				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(648)
							p.Match(ZggParserCOMMA)
							if p.HasError() {
								// Recognition error - abort rule
								goto errorExit
							}
						}
						{
							p.SetState(649)
							p.Match(ZggParserIDENTIFIER)
							if p.HasError() {
								// Recognition error - abort rule
								goto errorExit
							}
						}

					}
					p.SetState(654)
					p.GetErrorHandler().Sync(p)
					if p.HasError() {
						goto errorExit
					}
					_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 76, p.GetParserRuleContext())
					if p.HasError() {
						goto errorExit
					}
				}
				p.SetState(658)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 77, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(655)
						p.Match(ZggParserCOMMA)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(656)
						p.Match(ZggParserMORE_ARGS)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(657)
						p.Match(ZggParserIDENTIFIER)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				} else if p.HasError() { // JIM
					goto errorExit
				}
				p.SetState(661)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == ZggParserCOMMA {
					{
						p.SetState(660)
						p.Match(ZggParserCOMMA)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}

			case ZggParserMORE_ARGS:
				{
					p.SetState(663)
					p.Match(ZggParserMORE_ARGS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(664)
					p.Match(ZggParserIDENTIFIER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case ZggParserR_PAREN:

			default:
			}
			{
				p.SetState(667)
				p.Match(ZggParserR_PAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case ZggParserIDENTIFIER:
			{
				p.SetState(668)
				p.Match(ZggParserIDENTIFIER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		{
			p.SetState(671)
			p.Match(ZggParserARROW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(672)
			p.expr(0)
		}

	case 11:
		localctx = NewLiteralLambdaBlockContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		p.SetState(696)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case ZggParserL_PAREN:
			{
				p.SetState(673)
				p.Match(ZggParserL_PAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(692)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			switch p.GetTokenStream().LA(1) {
			case ZggParserIDENTIFIER:
				{
					p.SetState(674)
					p.Match(ZggParserIDENTIFIER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(679)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 81, p.GetParserRuleContext())
				if p.HasError() {
					goto errorExit
				}
				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(675)
							p.Match(ZggParserCOMMA)
							if p.HasError() {
								// Recognition error - abort rule
								goto errorExit
							}
						}
						{
							p.SetState(676)
							p.Match(ZggParserIDENTIFIER)
							if p.HasError() {
								// Recognition error - abort rule
								goto errorExit
							}
						}

					}
					p.SetState(681)
					p.GetErrorHandler().Sync(p)
					if p.HasError() {
						goto errorExit
					}
					_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 81, p.GetParserRuleContext())
					if p.HasError() {
						goto errorExit
					}
				}
				p.SetState(685)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 82, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(682)
						p.Match(ZggParserCOMMA)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(683)
						p.Match(ZggParserMORE_ARGS)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(684)
						p.Match(ZggParserIDENTIFIER)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				} else if p.HasError() { // JIM
					goto errorExit
				}
				p.SetState(688)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == ZggParserCOMMA {
					{
						p.SetState(687)
						p.Match(ZggParserCOMMA)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}

			case ZggParserMORE_ARGS:
				{
					p.SetState(690)
					p.Match(ZggParserMORE_ARGS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(691)
					p.Match(ZggParserIDENTIFIER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case ZggParserR_PAREN:

			default:
			}
			{
				p.SetState(694)
				p.Match(ZggParserR_PAREN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case ZggParserIDENTIFIER:
			{
				p.SetState(695)
				p.Match(ZggParserIDENTIFIER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		{
			p.SetState(698)
			p.Match(ZggParserARROW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(699)
			p.CodeBlock()
		}

	case 12:
		localctx = NewLiteralObjectContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(700)
			p.Match(ZggParserL_CURLY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(712)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-47)) & ^0x3f) == 0 && ((int64(1)<<(_la-47))&432354360320589831) != 0 {
			{
				p.SetState(701)
				p.ObjItem()
			}
			p.SetState(706)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 86, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(702)
						p.Match(ZggParserCOMMA)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(703)
						p.ObjItem()
					}

				}
				p.SetState(708)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 86, p.GetParserRuleContext())
				if p.HasError() {
					goto errorExit
				}
			}
			p.SetState(710)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ZggParserCOMMA {
				{
					p.SetState(709)
					p.Match(ZggParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		}
		{
			p.SetState(714)
			p.Match(ZggParserR_CURLY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 13:
		localctx = NewObjectComprehensionContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(715)
			p.Match(ZggParserL_CURLY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(716)

			var _x = p.expr(0)

			localctx.(*ObjectComprehensionContext).keyExpr = _x
		}
		{
			p.SetState(717)
			p.Match(ZggParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(718)

			var _x = p.expr(0)

			localctx.(*ObjectComprehensionContext).valueExpr = _x
		}
		{
			p.SetState(719)
			p.Match(ZggParserFOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(722)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 89, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(720)

				var _m = p.Match(ZggParserIDENTIFIER)

				localctx.(*ObjectComprehensionContext).indexer = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(721)
				p.Match(ZggParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(724)

			var _m = p.Match(ZggParserIDENTIFIER)

			localctx.(*ObjectComprehensionContext).value = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(725)
			p.Match(ZggParserIN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(726)

			var _x = p.expr(0)

			localctx.(*ObjectComprehensionContext).begin = _x
		}
		p.SetState(729)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserRANGE_WITHOUT_END || _la == ZggParserRANGE_WITH_END {
			{
				p.SetState(727)
				_la = p.GetTokenStream().LA(1)

				if !(_la == ZggParserRANGE_WITHOUT_END || _la == ZggParserRANGE_WITH_END) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(728)

				var _x = p.expr(0)

				localctx.(*ObjectComprehensionContext).end = _x
			}

		}
		p.SetState(733)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserIF {
			{
				p.SetState(731)
				p.Match(ZggParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(732)

				var _x = p.expr(0)

				localctx.(*ObjectComprehensionContext).filter = _x
			}

		}
		{
			p.SetState(735)
			p.Match(ZggParserR_CURLY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 14:
		localctx = NewLiteralArrayContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(737)
			p.Match(ZggParserL_BRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(749)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&28146948720585734) != 0) || ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&32349259777) != 0) {
			{
				p.SetState(738)
				p.ArrayItem()
			}
			p.SetState(743)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 92, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(739)
						p.Match(ZggParserCOMMA)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(740)
						p.ArrayItem()
					}

				}
				p.SetState(745)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 92, p.GetParserRuleContext())
				if p.HasError() {
					goto errorExit
				}
			}
			p.SetState(747)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ZggParserCOMMA {
				{
					p.SetState(746)
					p.Match(ZggParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		}
		{
			p.SetState(751)
			p.Match(ZggParserR_BRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 15:
		localctx = NewArrayComprehensionContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(752)
			p.Match(ZggParserL_BRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(753)

			var _x = p.expr(0)

			localctx.(*ArrayComprehensionContext).itemExpr = _x
		}
		{
			p.SetState(754)
			p.Match(ZggParserFOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(757)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 95, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(755)

				var _m = p.Match(ZggParserIDENTIFIER)

				localctx.(*ArrayComprehensionContext).indexer = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(756)
				p.Match(ZggParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(759)

			var _m = p.Match(ZggParserIDENTIFIER)

			localctx.(*ArrayComprehensionContext).value = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(760)
			p.Match(ZggParserIN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(761)

			var _x = p.expr(0)

			localctx.(*ArrayComprehensionContext).begin = _x
		}
		p.SetState(764)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserRANGE_WITHOUT_END || _la == ZggParserRANGE_WITH_END {
			{
				p.SetState(762)
				_la = p.GetTokenStream().LA(1)

				if !(_la == ZggParserRANGE_WITHOUT_END || _la == ZggParserRANGE_WITH_END) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(763)

				var _x = p.expr(0)

				localctx.(*ArrayComprehensionContext).end = _x
			}

		}
		p.SetState(768)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == ZggParserIF {
			{
				p.SetState(766)
				p.Match(ZggParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(767)

				var _x = p.expr(0)

				localctx.(*ArrayComprehensionContext).filter = _x
			}

		}
		{
			p.SetState(770)
			p.Match(ZggParserR_BRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArrayItemContext is an interface to support dynamic dispatch.
type IArrayItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCondition returns the condition rule contexts.
	GetCondition() IExprContext

	// SetCondition sets the condition rule contexts.
	SetCondition(IExprContext)

	// Getter signatures
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	MORE_ARGS() antlr.TerminalNode
	IF() antlr.TerminalNode

	// IsArrayItemContext differentiates from other interfaces.
	IsArrayItemContext()
}

type ArrayItemContext struct {
	antlr.BaseParserRuleContext
	parser    antlr.Parser
	condition IExprContext
}

func NewEmptyArrayItemContext() *ArrayItemContext {
	var p = new(ArrayItemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_arrayItem
	return p
}

func InitEmptyArrayItemContext(p *ArrayItemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_arrayItem
}

func (*ArrayItemContext) IsArrayItemContext() {}

func NewArrayItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayItemContext {
	var p = new(ArrayItemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_arrayItem

	return p
}

func (s *ArrayItemContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayItemContext) GetCondition() IExprContext { return s.condition }

func (s *ArrayItemContext) SetCondition(v IExprContext) { s.condition = v }

func (s *ArrayItemContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ArrayItemContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ArrayItemContext) MORE_ARGS() antlr.TerminalNode {
	return s.GetToken(ZggParserMORE_ARGS, 0)
}

func (s *ArrayItemContext) IF() antlr.TerminalNode {
	return s.GetToken(ZggParserIF, 0)
}

func (s *ArrayItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitArrayItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) ArrayItem() (localctx IArrayItemContext) {
	localctx = NewArrayItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, ZggParserRULE_arrayItem)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(775)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 99, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(774)
			p.Match(ZggParserMORE_ARGS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(777)
		p.expr(0)
	}
	p.SetState(780)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZggParserIF {
		{
			p.SetState(778)
			p.Match(ZggParserIF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(779)

			var _x = p.expr(0)

			localctx.(*ArrayItemContext).condition = _x
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IObjItemContext is an interface to support dynamic dispatch.
type IObjItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsObjItemContext differentiates from other interfaces.
	IsObjItemContext()
}

type ObjItemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjItemContext() *ObjItemContext {
	var p = new(ObjItemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_objItem
	return p
}

func InitEmptyObjItemContext(p *ObjItemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_objItem
}

func (*ObjItemContext) IsObjItemContext() {}

func NewObjItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjItemContext {
	var p = new(ObjItemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_objItem

	return p
}

func (s *ObjItemContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjItemContext) CopyAll(ctx *ObjItemContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ObjItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ObjItemExpandedContext struct {
	ObjItemContext
}

func NewObjItemExpandedContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ObjItemExpandedContext {
	var p = new(ObjItemExpandedContext)

	InitEmptyObjItemContext(&p.ObjItemContext)
	p.parser = parser
	p.CopyAll(ctx.(*ObjItemContext))

	return p
}

func (s *ObjItemExpandedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjItemExpandedContext) MORE_ARGS() antlr.TerminalNode {
	return s.GetToken(ZggParserMORE_ARGS, 0)
}

func (s *ObjItemExpandedContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ObjItemExpandedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitObjItemExpanded(s)

	default:
		return t.VisitChildren(s)
	}
}

type ObjItemKVContext struct {
	ObjItemContext
}

func NewObjItemKVContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ObjItemKVContext {
	var p = new(ObjItemKVContext)

	InitEmptyObjItemContext(&p.ObjItemContext)
	p.parser = parser
	p.CopyAll(ctx.(*ObjItemContext))

	return p
}

func (s *ObjItemKVContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjItemKVContext) KeyValue() IKeyValueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeyValueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeyValueContext)
}

func (s *ObjItemKVContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitObjItemKV(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) ObjItem() (localctx IObjItemContext) {
	localctx = NewObjItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, ZggParserRULE_objItem)
	p.SetState(785)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ZggParserSTRING, ZggParserRSTRING, ZggParserL_BRACKET, ZggParserQUOTE, ZggParserIDENTIFIER:
		localctx = NewObjItemKVContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(782)
			p.KeyValue()
		}

	case ZggParserMORE_ARGS:
		localctx = NewObjItemExpandedContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(783)
			p.Match(ZggParserMORE_ARGS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(784)
			p.expr(0)
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IKeyValueContext is an interface to support dynamic dispatch.
type IKeyValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsKeyValueContext differentiates from other interfaces.
	IsKeyValueContext()
}

type KeyValueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyValueContext() *KeyValueContext {
	var p = new(KeyValueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_keyValue
	return p
}

func InitEmptyKeyValueContext(p *KeyValueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_keyValue
}

func (*KeyValueContext) IsKeyValueContext() {}

func NewKeyValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyValueContext {
	var p = new(KeyValueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_keyValue

	return p
}

func (s *KeyValueContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyValueContext) CopyAll(ctx *KeyValueContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *KeyValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type KVStrKeyContext struct {
	KeyValueContext
}

func NewKVStrKeyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *KVStrKeyContext {
	var p = new(KVStrKeyContext)

	InitEmptyKeyValueContext(&p.KeyValueContext)
	p.parser = parser
	p.CopyAll(ctx.(*KeyValueContext))

	return p
}

func (s *KVStrKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KVStrKeyContext) StringLiteral() IStringLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *KVStrKeyContext) COLON() antlr.TerminalNode {
	return s.GetToken(ZggParserCOLON, 0)
}

func (s *KVStrKeyContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *KVStrKeyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitKVStrKey(s)

	default:
		return t.VisitChildren(s)
	}
}

type KVKeyFuncContext struct {
	KeyValueContext
}

func NewKVKeyFuncContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *KVKeyFuncContext {
	var p = new(KVKeyFuncContext)

	InitEmptyKeyValueContext(&p.KeyValueContext)
	p.parser = parser
	p.CopyAll(ctx.(*KeyValueContext))

	return p
}

func (s *KVKeyFuncContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KVKeyFuncContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(ZggParserIDENTIFIER)
}

func (s *KVKeyFuncContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, i)
}

func (s *KVKeyFuncContext) L_PAREN() antlr.TerminalNode {
	return s.GetToken(ZggParserL_PAREN, 0)
}

func (s *KVKeyFuncContext) R_PAREN() antlr.TerminalNode {
	return s.GetToken(ZggParserR_PAREN, 0)
}

func (s *KVKeyFuncContext) CodeBlock() ICodeBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodeBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *KVKeyFuncContext) MORE_ARGS() antlr.TerminalNode {
	return s.GetToken(ZggParserMORE_ARGS, 0)
}

func (s *KVKeyFuncContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZggParserCOMMA)
}

func (s *KVKeyFuncContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserCOMMA, i)
}

func (s *KVKeyFuncContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitKVKeyFunc(s)

	default:
		return t.VisitChildren(s)
	}
}

type KVExprOnlyContext struct {
	KeyValueContext
}

func NewKVExprOnlyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *KVExprOnlyContext {
	var p = new(KVExprOnlyContext)

	InitEmptyKeyValueContext(&p.KeyValueContext)
	p.parser = parser
	p.CopyAll(ctx.(*KeyValueContext))

	return p
}

func (s *KVExprOnlyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KVExprOnlyContext) L_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZggParserL_BRACKET, 0)
}

func (s *KVExprOnlyContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *KVExprOnlyContext) R_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZggParserR_BRACKET, 0)
}

func (s *KVExprOnlyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitKVExprOnly(s)

	default:
		return t.VisitChildren(s)
	}
}

type KVIdOnlyContext struct {
	KeyValueContext
}

func NewKVIdOnlyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *KVIdOnlyContext {
	var p = new(KVIdOnlyContext)

	InitEmptyKeyValueContext(&p.KeyValueContext)
	p.parser = parser
	p.CopyAll(ctx.(*KeyValueContext))

	return p
}

func (s *KVIdOnlyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KVIdOnlyContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, 0)
}

func (s *KVIdOnlyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitKVIdOnly(s)

	default:
		return t.VisitChildren(s)
	}
}

type KVExprKeyContext struct {
	KeyValueContext
}

func NewKVExprKeyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *KVExprKeyContext {
	var p = new(KVExprKeyContext)

	InitEmptyKeyValueContext(&p.KeyValueContext)
	p.parser = parser
	p.CopyAll(ctx.(*KeyValueContext))

	return p
}

func (s *KVExprKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KVExprKeyContext) L_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZggParserL_BRACKET, 0)
}

func (s *KVExprKeyContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *KVExprKeyContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *KVExprKeyContext) R_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZggParserR_BRACKET, 0)
}

func (s *KVExprKeyContext) COLON() antlr.TerminalNode {
	return s.GetToken(ZggParserCOLON, 0)
}

func (s *KVExprKeyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitKVExprKey(s)

	default:
		return t.VisitChildren(s)
	}
}

type KVIdKeyContext struct {
	KeyValueContext
}

func NewKVIdKeyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *KVIdKeyContext {
	var p = new(KVIdKeyContext)

	InitEmptyKeyValueContext(&p.KeyValueContext)
	p.parser = parser
	p.CopyAll(ctx.(*KeyValueContext))

	return p
}

func (s *KVIdKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KVIdKeyContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserIDENTIFIER, 0)
}

func (s *KVIdKeyContext) COLON() antlr.TerminalNode {
	return s.GetToken(ZggParserCOLON, 0)
}

func (s *KVIdKeyContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *KVIdKeyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitKVIdKey(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) KeyValue() (localctx IKeyValueContext) {
	localctx = NewKeyValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, ZggParserRULE_keyValue)
	var _la int

	var _alt int

	p.SetState(829)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 106, p.GetParserRuleContext()) {
	case 1:
		localctx = NewKVIdKeyContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(787)
			p.Match(ZggParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(788)
			p.Match(ZggParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(789)
			p.expr(0)
		}

	case 2:
		localctx = NewKVStrKeyContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(790)
			p.StringLiteral()
		}
		{
			p.SetState(791)
			p.Match(ZggParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(792)
			p.expr(0)
		}

	case 3:
		localctx = NewKVExprKeyContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(794)
			p.Match(ZggParserL_BRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(795)
			p.expr(0)
		}
		{
			p.SetState(796)
			p.Match(ZggParserR_BRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(797)
			p.Match(ZggParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(798)
			p.expr(0)
		}

	case 4:
		localctx = NewKVKeyFuncContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(800)
			p.Match(ZggParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(801)
			p.Match(ZggParserL_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(820)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		switch p.GetTokenStream().LA(1) {
		case ZggParserIDENTIFIER:
			{
				p.SetState(802)
				p.Match(ZggParserIDENTIFIER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(807)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 102, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(803)
						p.Match(ZggParserCOMMA)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(804)
						p.Match(ZggParserIDENTIFIER)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				p.SetState(809)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 102, p.GetParserRuleContext())
				if p.HasError() {
					goto errorExit
				}
			}
			p.SetState(813)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 103, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(810)
					p.Match(ZggParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(811)
					p.Match(ZggParserMORE_ARGS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(812)
					p.Match(ZggParserIDENTIFIER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			} else if p.HasError() { // JIM
				goto errorExit
			}
			p.SetState(816)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == ZggParserCOMMA {
				{
					p.SetState(815)
					p.Match(ZggParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		case ZggParserMORE_ARGS:
			{
				p.SetState(818)
				p.Match(ZggParserMORE_ARGS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(819)
				p.Match(ZggParserIDENTIFIER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case ZggParserR_PAREN:

		default:
		}
		{
			p.SetState(822)
			p.Match(ZggParserR_PAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(823)
			p.CodeBlock()
		}

	case 5:
		localctx = NewKVIdOnlyContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(824)
			p.Match(ZggParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		localctx = NewKVExprOnlyContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(825)
			p.Match(ZggParserL_BRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(826)
			p.expr(0)
		}
		{
			p.SetState(827)
			p.Match(ZggParserR_BRACKET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStringLiteralContext is an interface to support dynamic dispatch.
type IStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRING() antlr.TerminalNode
	RSTRING() antlr.TerminalNode
	TemplateString() ITemplateStringContext

	// IsStringLiteralContext differentiates from other interfaces.
	IsStringLiteralContext()
}

type StringLiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringLiteralContext() *StringLiteralContext {
	var p = new(StringLiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_stringLiteral
	return p
}

func InitEmptyStringLiteralContext(p *StringLiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_stringLiteral
}

func (*StringLiteralContext) IsStringLiteralContext() {}

func NewStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringLiteralContext {
	var p = new(StringLiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_stringLiteral

	return p
}

func (s *StringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *StringLiteralContext) STRING() antlr.TerminalNode {
	return s.GetToken(ZggParserSTRING, 0)
}

func (s *StringLiteralContext) RSTRING() antlr.TerminalNode {
	return s.GetToken(ZggParserRSTRING, 0)
}

func (s *StringLiteralContext) TemplateString() ITemplateStringContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateStringContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateStringContext)
}

func (s *StringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) StringLiteral() (localctx IStringLiteralContext) {
	localctx = NewStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, ZggParserRULE_stringLiteral)
	p.SetState(834)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ZggParserSTRING:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(831)
			p.Match(ZggParserSTRING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ZggParserRSTRING:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(832)
			p.Match(ZggParserRSTRING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ZggParserQUOTE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(833)
			p.TemplateString()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITemplateStringContext is an interface to support dynamic dispatch.
type ITemplateStringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllQUOTE() []antlr.TerminalNode
	QUOTE(i int) antlr.TerminalNode
	AllTsItem() []ITsItemContext
	TsItem(i int) ITsItemContext

	// IsTemplateStringContext differentiates from other interfaces.
	IsTemplateStringContext()
}

type TemplateStringContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateStringContext() *TemplateStringContext {
	var p = new(TemplateStringContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_templateString
	return p
}

func InitEmptyTemplateStringContext(p *TemplateStringContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_templateString
}

func (*TemplateStringContext) IsTemplateStringContext() {}

func NewTemplateStringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateStringContext {
	var p = new(TemplateStringContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_templateString

	return p
}

func (s *TemplateStringContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateStringContext) AllQUOTE() []antlr.TerminalNode {
	return s.GetTokens(ZggParserQUOTE)
}

func (s *TemplateStringContext) QUOTE(i int) antlr.TerminalNode {
	return s.GetToken(ZggParserQUOTE, i)
}

func (s *TemplateStringContext) AllTsItem() []ITsItemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITsItemContext); ok {
			len++
		}
	}

	tst := make([]ITsItemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITsItemContext); ok {
			tst[i] = t.(ITsItemContext)
			i++
		}
	}

	return tst
}

func (s *TemplateStringContext) TsItem(i int) ITsItemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITsItemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITsItemContext)
}

func (s *TemplateStringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateStringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateStringContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitTemplateString(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) TemplateString() (localctx ITemplateStringContext) {
	localctx = NewTemplateStringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, ZggParserRULE_templateString)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(836)
		p.Match(ZggParserQUOTE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(840)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-106)) & ^0x3f) == 0 && ((int64(1)<<(_la-106))&7) != 0 {
		{
			p.SetState(837)
			p.TsItem()
		}

		p.SetState(842)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(843)
		p.Match(ZggParserQUOTE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITsItemContext is an interface to support dynamic dispatch.
type ITsItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsTsItemContext differentiates from other interfaces.
	IsTsItemContext()
}

type TsItemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTsItemContext() *TsItemContext {
	var p = new(TsItemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_tsItem
	return p
}

func InitEmptyTsItemContext(p *TsItemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZggParserRULE_tsItem
}

func (*TsItemContext) IsTsItemContext() {}

func NewTsItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TsItemContext {
	var p = new(TsItemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZggParserRULE_tsItem

	return p
}

func (s *TsItemContext) GetParser() antlr.Parser { return s.parser }

func (s *TsItemContext) CopyAll(ctx *TsItemContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *TsItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TsItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TsRawContext struct {
	TsItemContext
}

func NewTsRawContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TsRawContext {
	var p = new(TsRawContext)

	InitEmptyTsItemContext(&p.TsItemContext)
	p.parser = parser
	p.CopyAll(ctx.(*TsItemContext))

	return p
}

func (s *TsRawContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TsRawContext) TS_RAW() antlr.TerminalNode {
	return s.GetToken(ZggParserTS_RAW, 0)
}

func (s *TsRawContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitTsRaw(s)

	default:
		return t.VisitChildren(s)
	}
}

type TsExprContext struct {
	TsItemContext
}

func NewTsExprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TsExprContext {
	var p = new(TsExprContext)

	InitEmptyTsItemContext(&p.TsItemContext)
	p.parser = parser
	p.CopyAll(ctx.(*TsItemContext))

	return p
}

func (s *TsExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TsExprContext) TS_EXPR_START() antlr.TerminalNode {
	return s.GetToken(ZggParserTS_EXPR_START, 0)
}

func (s *TsExprContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *TsExprContext) R_CURLY() antlr.TerminalNode {
	return s.GetToken(ZggParserR_CURLY, 0)
}

func (s *TsExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitTsExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

type TsIdentifierContext struct {
	TsItemContext
}

func NewTsIdentifierContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TsIdentifierContext {
	var p = new(TsIdentifierContext)

	InitEmptyTsItemContext(&p.TsItemContext)
	p.parser = parser
	p.CopyAll(ctx.(*TsItemContext))

	return p
}

func (s *TsIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TsIdentifierContext) TS_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(ZggParserTS_IDENTIFIER, 0)
}

func (s *TsIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZggParserVisitor:
		return t.VisitTsIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZggParser) TsItem() (localctx ITsItemContext) {
	localctx = NewTsItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, ZggParserRULE_tsItem)
	p.SetState(851)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ZggParserTS_RAW:
		localctx = NewTsRawContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(845)
			p.Match(ZggParserTS_RAW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ZggParserTS_IDENTIFIER:
		localctx = NewTsIdentifierContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(846)
			p.Match(ZggParserTS_IDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ZggParserTS_EXPR_START:
		localctx = NewTsExprContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(847)
			p.Match(ZggParserTS_EXPR_START)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(848)
			p.expr(0)
		}
		{
			p.SetState(849)
			p.Match(ZggParserR_CURLY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

func (p *ZggParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 11:
		var t *ExprContext = nil
		if localctx != nil {
			t = localctx.(*ExprContext)
		}
		return p.Expr_Sempred(t, predIndex)

	case 18:
		var t *LvalContext = nil
		if localctx != nil {
			t = localctx.(*LvalContext)
		}
		return p.Lval_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *ZggParser) Expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 23)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 22)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 21)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 20)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 19)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 18)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 17)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 36)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 31)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 30)

	case 18:
		return p.Precpred(p.GetParserRuleContext(), 29)

	case 19:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ZggParser) Lval_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 20:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 21:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
