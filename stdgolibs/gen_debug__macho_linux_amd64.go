package stdgolibs

import (
	pkg "debug/macho"

	"reflect"
)

func init() {
	registerValues("debug/macho", map[string]reflect.Value{
		// Functions
		"Open":       reflect.ValueOf(pkg.Open),
		"NewFile":    reflect.ValueOf(pkg.NewFile),
		"NewFatFile": reflect.ValueOf(pkg.NewFatFile),
		"OpenFat":    reflect.ValueOf(pkg.OpenFat),

		// Consts

		"Magic32":                         reflect.ValueOf(pkg.Magic32),
		"Magic64":                         reflect.ValueOf(pkg.Magic64),
		"MagicFat":                        reflect.ValueOf(pkg.MagicFat),
		"TypeObj":                         reflect.ValueOf(pkg.TypeObj),
		"TypeExec":                        reflect.ValueOf(pkg.TypeExec),
		"TypeDylib":                       reflect.ValueOf(pkg.TypeDylib),
		"TypeBundle":                      reflect.ValueOf(pkg.TypeBundle),
		"Cpu386":                          reflect.ValueOf(pkg.Cpu386),
		"CpuAmd64":                        reflect.ValueOf(pkg.CpuAmd64),
		"CpuArm":                          reflect.ValueOf(pkg.CpuArm),
		"CpuArm64":                        reflect.ValueOf(pkg.CpuArm64),
		"CpuPpc":                          reflect.ValueOf(pkg.CpuPpc),
		"CpuPpc64":                        reflect.ValueOf(pkg.CpuPpc64),
		"LoadCmdSegment":                  reflect.ValueOf(pkg.LoadCmdSegment),
		"LoadCmdSymtab":                   reflect.ValueOf(pkg.LoadCmdSymtab),
		"LoadCmdThread":                   reflect.ValueOf(pkg.LoadCmdThread),
		"LoadCmdUnixThread":               reflect.ValueOf(pkg.LoadCmdUnixThread),
		"LoadCmdDysymtab":                 reflect.ValueOf(pkg.LoadCmdDysymtab),
		"LoadCmdDylib":                    reflect.ValueOf(pkg.LoadCmdDylib),
		"LoadCmdDylinker":                 reflect.ValueOf(pkg.LoadCmdDylinker),
		"LoadCmdSegment64":                reflect.ValueOf(pkg.LoadCmdSegment64),
		"LoadCmdRpath":                    reflect.ValueOf(pkg.LoadCmdRpath),
		"FlagNoUndefs":                    reflect.ValueOf(pkg.FlagNoUndefs),
		"FlagIncrLink":                    reflect.ValueOf(pkg.FlagIncrLink),
		"FlagDyldLink":                    reflect.ValueOf(pkg.FlagDyldLink),
		"FlagBindAtLoad":                  reflect.ValueOf(pkg.FlagBindAtLoad),
		"FlagPrebound":                    reflect.ValueOf(pkg.FlagPrebound),
		"FlagSplitSegs":                   reflect.ValueOf(pkg.FlagSplitSegs),
		"FlagLazyInit":                    reflect.ValueOf(pkg.FlagLazyInit),
		"FlagTwoLevel":                    reflect.ValueOf(pkg.FlagTwoLevel),
		"FlagForceFlat":                   reflect.ValueOf(pkg.FlagForceFlat),
		"FlagNoMultiDefs":                 reflect.ValueOf(pkg.FlagNoMultiDefs),
		"FlagNoFixPrebinding":             reflect.ValueOf(pkg.FlagNoFixPrebinding),
		"FlagPrebindable":                 reflect.ValueOf(pkg.FlagPrebindable),
		"FlagAllModsBound":                reflect.ValueOf(pkg.FlagAllModsBound),
		"FlagSubsectionsViaSymbols":       reflect.ValueOf(pkg.FlagSubsectionsViaSymbols),
		"FlagCanonical":                   reflect.ValueOf(pkg.FlagCanonical),
		"FlagWeakDefines":                 reflect.ValueOf(pkg.FlagWeakDefines),
		"FlagBindsToWeak":                 reflect.ValueOf(pkg.FlagBindsToWeak),
		"FlagAllowStackExecution":         reflect.ValueOf(pkg.FlagAllowStackExecution),
		"FlagRootSafe":                    reflect.ValueOf(pkg.FlagRootSafe),
		"FlagSetuidSafe":                  reflect.ValueOf(pkg.FlagSetuidSafe),
		"FlagNoReexportedDylibs":          reflect.ValueOf(pkg.FlagNoReexportedDylibs),
		"FlagPIE":                         reflect.ValueOf(pkg.FlagPIE),
		"FlagDeadStrippableDylib":         reflect.ValueOf(pkg.FlagDeadStrippableDylib),
		"FlagHasTLVDescriptors":           reflect.ValueOf(pkg.FlagHasTLVDescriptors),
		"FlagNoHeapExecution":             reflect.ValueOf(pkg.FlagNoHeapExecution),
		"FlagAppExtensionSafe":            reflect.ValueOf(pkg.FlagAppExtensionSafe),
		"GENERIC_RELOC_VANILLA":           reflect.ValueOf(pkg.GENERIC_RELOC_VANILLA),
		"GENERIC_RELOC_PAIR":              reflect.ValueOf(pkg.GENERIC_RELOC_PAIR),
		"GENERIC_RELOC_SECTDIFF":          reflect.ValueOf(pkg.GENERIC_RELOC_SECTDIFF),
		"GENERIC_RELOC_PB_LA_PTR":         reflect.ValueOf(pkg.GENERIC_RELOC_PB_LA_PTR),
		"GENERIC_RELOC_LOCAL_SECTDIFF":    reflect.ValueOf(pkg.GENERIC_RELOC_LOCAL_SECTDIFF),
		"GENERIC_RELOC_TLV":               reflect.ValueOf(pkg.GENERIC_RELOC_TLV),
		"X86_64_RELOC_UNSIGNED":           reflect.ValueOf(pkg.X86_64_RELOC_UNSIGNED),
		"X86_64_RELOC_SIGNED":             reflect.ValueOf(pkg.X86_64_RELOC_SIGNED),
		"X86_64_RELOC_BRANCH":             reflect.ValueOf(pkg.X86_64_RELOC_BRANCH),
		"X86_64_RELOC_GOT_LOAD":           reflect.ValueOf(pkg.X86_64_RELOC_GOT_LOAD),
		"X86_64_RELOC_GOT":                reflect.ValueOf(pkg.X86_64_RELOC_GOT),
		"X86_64_RELOC_SUBTRACTOR":         reflect.ValueOf(pkg.X86_64_RELOC_SUBTRACTOR),
		"X86_64_RELOC_SIGNED_1":           reflect.ValueOf(pkg.X86_64_RELOC_SIGNED_1),
		"X86_64_RELOC_SIGNED_2":           reflect.ValueOf(pkg.X86_64_RELOC_SIGNED_2),
		"X86_64_RELOC_SIGNED_4":           reflect.ValueOf(pkg.X86_64_RELOC_SIGNED_4),
		"X86_64_RELOC_TLV":                reflect.ValueOf(pkg.X86_64_RELOC_TLV),
		"ARM_RELOC_VANILLA":               reflect.ValueOf(pkg.ARM_RELOC_VANILLA),
		"ARM_RELOC_PAIR":                  reflect.ValueOf(pkg.ARM_RELOC_PAIR),
		"ARM_RELOC_SECTDIFF":              reflect.ValueOf(pkg.ARM_RELOC_SECTDIFF),
		"ARM_RELOC_LOCAL_SECTDIFF":        reflect.ValueOf(pkg.ARM_RELOC_LOCAL_SECTDIFF),
		"ARM_RELOC_PB_LA_PTR":             reflect.ValueOf(pkg.ARM_RELOC_PB_LA_PTR),
		"ARM_RELOC_BR24":                  reflect.ValueOf(pkg.ARM_RELOC_BR24),
		"ARM_THUMB_RELOC_BR22":            reflect.ValueOf(pkg.ARM_THUMB_RELOC_BR22),
		"ARM_THUMB_32BIT_BRANCH":          reflect.ValueOf(pkg.ARM_THUMB_32BIT_BRANCH),
		"ARM_RELOC_HALF":                  reflect.ValueOf(pkg.ARM_RELOC_HALF),
		"ARM_RELOC_HALF_SECTDIFF":         reflect.ValueOf(pkg.ARM_RELOC_HALF_SECTDIFF),
		"ARM64_RELOC_UNSIGNED":            reflect.ValueOf(pkg.ARM64_RELOC_UNSIGNED),
		"ARM64_RELOC_SUBTRACTOR":          reflect.ValueOf(pkg.ARM64_RELOC_SUBTRACTOR),
		"ARM64_RELOC_BRANCH26":            reflect.ValueOf(pkg.ARM64_RELOC_BRANCH26),
		"ARM64_RELOC_PAGE21":              reflect.ValueOf(pkg.ARM64_RELOC_PAGE21),
		"ARM64_RELOC_PAGEOFF12":           reflect.ValueOf(pkg.ARM64_RELOC_PAGEOFF12),
		"ARM64_RELOC_GOT_LOAD_PAGE21":     reflect.ValueOf(pkg.ARM64_RELOC_GOT_LOAD_PAGE21),
		"ARM64_RELOC_GOT_LOAD_PAGEOFF12":  reflect.ValueOf(pkg.ARM64_RELOC_GOT_LOAD_PAGEOFF12),
		"ARM64_RELOC_POINTER_TO_GOT":      reflect.ValueOf(pkg.ARM64_RELOC_POINTER_TO_GOT),
		"ARM64_RELOC_TLVP_LOAD_PAGE21":    reflect.ValueOf(pkg.ARM64_RELOC_TLVP_LOAD_PAGE21),
		"ARM64_RELOC_TLVP_LOAD_PAGEOFF12": reflect.ValueOf(pkg.ARM64_RELOC_TLVP_LOAD_PAGEOFF12),
		"ARM64_RELOC_ADDEND":              reflect.ValueOf(pkg.ARM64_RELOC_ADDEND),

		// Variables

		"ErrNotFat": reflect.ValueOf(&pkg.ErrNotFat),
	})
	registerTypes("debug/macho", map[string]reflect.Type{
		// Non interfaces

		"File":             reflect.TypeOf((*pkg.File)(nil)).Elem(),
		"LoadBytes":        reflect.TypeOf((*pkg.LoadBytes)(nil)).Elem(),
		"SegmentHeader":    reflect.TypeOf((*pkg.SegmentHeader)(nil)).Elem(),
		"Segment":          reflect.TypeOf((*pkg.Segment)(nil)).Elem(),
		"SectionHeader":    reflect.TypeOf((*pkg.SectionHeader)(nil)).Elem(),
		"Reloc":            reflect.TypeOf((*pkg.Reloc)(nil)).Elem(),
		"Section":          reflect.TypeOf((*pkg.Section)(nil)).Elem(),
		"Dylib":            reflect.TypeOf((*pkg.Dylib)(nil)).Elem(),
		"Symtab":           reflect.TypeOf((*pkg.Symtab)(nil)).Elem(),
		"Dysymtab":         reflect.TypeOf((*pkg.Dysymtab)(nil)).Elem(),
		"Rpath":            reflect.TypeOf((*pkg.Rpath)(nil)).Elem(),
		"Symbol":           reflect.TypeOf((*pkg.Symbol)(nil)).Elem(),
		"FormatError":      reflect.TypeOf((*pkg.FormatError)(nil)).Elem(),
		"FileHeader":       reflect.TypeOf((*pkg.FileHeader)(nil)).Elem(),
		"Type":             reflect.TypeOf((*pkg.Type)(nil)).Elem(),
		"Cpu":              reflect.TypeOf((*pkg.Cpu)(nil)).Elem(),
		"LoadCmd":          reflect.TypeOf((*pkg.LoadCmd)(nil)).Elem(),
		"Segment32":        reflect.TypeOf((*pkg.Segment32)(nil)).Elem(),
		"Segment64":        reflect.TypeOf((*pkg.Segment64)(nil)).Elem(),
		"SymtabCmd":        reflect.TypeOf((*pkg.SymtabCmd)(nil)).Elem(),
		"DysymtabCmd":      reflect.TypeOf((*pkg.DysymtabCmd)(nil)).Elem(),
		"DylibCmd":         reflect.TypeOf((*pkg.DylibCmd)(nil)).Elem(),
		"RpathCmd":         reflect.TypeOf((*pkg.RpathCmd)(nil)).Elem(),
		"Thread":           reflect.TypeOf((*pkg.Thread)(nil)).Elem(),
		"Section32":        reflect.TypeOf((*pkg.Section32)(nil)).Elem(),
		"Section64":        reflect.TypeOf((*pkg.Section64)(nil)).Elem(),
		"Nlist32":          reflect.TypeOf((*pkg.Nlist32)(nil)).Elem(),
		"Nlist64":          reflect.TypeOf((*pkg.Nlist64)(nil)).Elem(),
		"Regs386":          reflect.TypeOf((*pkg.Regs386)(nil)).Elem(),
		"RegsAMD64":        reflect.TypeOf((*pkg.RegsAMD64)(nil)).Elem(),
		"RelocTypeGeneric": reflect.TypeOf((*pkg.RelocTypeGeneric)(nil)).Elem(),
		"RelocTypeX86_64":  reflect.TypeOf((*pkg.RelocTypeX86_64)(nil)).Elem(),
		"RelocTypeARM":     reflect.TypeOf((*pkg.RelocTypeARM)(nil)).Elem(),
		"RelocTypeARM64":   reflect.TypeOf((*pkg.RelocTypeARM64)(nil)).Elem(),
		"FatFile":          reflect.TypeOf((*pkg.FatFile)(nil)).Elem(),
		"FatArchHeader":    reflect.TypeOf((*pkg.FatArchHeader)(nil)).Elem(),
		"FatArch":          reflect.TypeOf((*pkg.FatArch)(nil)).Elem(),
	})
}
