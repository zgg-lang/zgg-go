package stdgolibs

import (
	pkg "net/http"

	"reflect"
)

func init() {
	registerValues("net/http", map[string]reflect.Value{
		// Functions
		"Get":                   reflect.ValueOf(pkg.Get),
		"Post":                  reflect.ValueOf(pkg.Post),
		"PostForm":              reflect.ValueOf(pkg.PostForm),
		"Head":                  reflect.ValueOf(pkg.Head),
		"ParseHTTPVersion":      reflect.ValueOf(pkg.ParseHTTPVersion),
		"NewRequest":            reflect.ValueOf(pkg.NewRequest),
		"NewRequestWithContext": reflect.ValueOf(pkg.NewRequestWithContext),
		"ReadRequest":           reflect.ValueOf(pkg.ReadRequest),
		"MaxBytesReader":        reflect.ValueOf(pkg.MaxBytesReader),
		"StatusText":            reflect.ValueOf(pkg.StatusText),
		"ServeContent":          reflect.ValueOf(pkg.ServeContent),
		"ServeFile":             reflect.ValueOf(pkg.ServeFile),
		"FS":                    reflect.ValueOf(pkg.FS),
		"FileServer":            reflect.ValueOf(pkg.FileServer),
		"Error":                 reflect.ValueOf(pkg.Error),
		"NotFound":              reflect.ValueOf(pkg.NotFound),
		"NotFoundHandler":       reflect.ValueOf(pkg.NotFoundHandler),
		"StripPrefix":           reflect.ValueOf(pkg.StripPrefix),
		"Redirect":              reflect.ValueOf(pkg.Redirect),
		"RedirectHandler":       reflect.ValueOf(pkg.RedirectHandler),
		"NewServeMux":           reflect.ValueOf(pkg.NewServeMux),
		"Handle":                reflect.ValueOf(pkg.Handle),
		"HandleFunc":            reflect.ValueOf(pkg.HandleFunc),
		"Serve":                 reflect.ValueOf(pkg.Serve),
		"ServeTLS":              reflect.ValueOf(pkg.ServeTLS),
		"ListenAndServe":        reflect.ValueOf(pkg.ListenAndServe),
		"ListenAndServeTLS":     reflect.ValueOf(pkg.ListenAndServeTLS),
		"TimeoutHandler":        reflect.ValueOf(pkg.TimeoutHandler),
		"SetCookie":             reflect.ValueOf(pkg.SetCookie),
		"ParseTime":             reflect.ValueOf(pkg.ParseTime),
		"CanonicalHeaderKey":    reflect.ValueOf(pkg.CanonicalHeaderKey),
		"ReadResponse":          reflect.ValueOf(pkg.ReadResponse),
		"DetectContentType":     reflect.ValueOf(pkg.DetectContentType),
		"ProxyFromEnvironment":  reflect.ValueOf(pkg.ProxyFromEnvironment),
		"ProxyURL":              reflect.ValueOf(pkg.ProxyURL),
		"NewFileTransport":      reflect.ValueOf(pkg.NewFileTransport),

		// Consts

		"StatusContinue":                      reflect.ValueOf(pkg.StatusContinue),
		"StatusSwitchingProtocols":            reflect.ValueOf(pkg.StatusSwitchingProtocols),
		"StatusProcessing":                    reflect.ValueOf(pkg.StatusProcessing),
		"StatusEarlyHints":                    reflect.ValueOf(pkg.StatusEarlyHints),
		"StatusOK":                            reflect.ValueOf(pkg.StatusOK),
		"StatusCreated":                       reflect.ValueOf(pkg.StatusCreated),
		"StatusAccepted":                      reflect.ValueOf(pkg.StatusAccepted),
		"StatusNonAuthoritativeInfo":          reflect.ValueOf(pkg.StatusNonAuthoritativeInfo),
		"StatusNoContent":                     reflect.ValueOf(pkg.StatusNoContent),
		"StatusResetContent":                  reflect.ValueOf(pkg.StatusResetContent),
		"StatusPartialContent":                reflect.ValueOf(pkg.StatusPartialContent),
		"StatusMultiStatus":                   reflect.ValueOf(pkg.StatusMultiStatus),
		"StatusAlreadyReported":               reflect.ValueOf(pkg.StatusAlreadyReported),
		"StatusIMUsed":                        reflect.ValueOf(pkg.StatusIMUsed),
		"StatusMultipleChoices":               reflect.ValueOf(pkg.StatusMultipleChoices),
		"StatusMovedPermanently":              reflect.ValueOf(pkg.StatusMovedPermanently),
		"StatusFound":                         reflect.ValueOf(pkg.StatusFound),
		"StatusSeeOther":                      reflect.ValueOf(pkg.StatusSeeOther),
		"StatusNotModified":                   reflect.ValueOf(pkg.StatusNotModified),
		"StatusUseProxy":                      reflect.ValueOf(pkg.StatusUseProxy),
		"StatusTemporaryRedirect":             reflect.ValueOf(pkg.StatusTemporaryRedirect),
		"StatusPermanentRedirect":             reflect.ValueOf(pkg.StatusPermanentRedirect),
		"StatusBadRequest":                    reflect.ValueOf(pkg.StatusBadRequest),
		"StatusUnauthorized":                  reflect.ValueOf(pkg.StatusUnauthorized),
		"StatusPaymentRequired":               reflect.ValueOf(pkg.StatusPaymentRequired),
		"StatusForbidden":                     reflect.ValueOf(pkg.StatusForbidden),
		"StatusNotFound":                      reflect.ValueOf(pkg.StatusNotFound),
		"StatusMethodNotAllowed":              reflect.ValueOf(pkg.StatusMethodNotAllowed),
		"StatusNotAcceptable":                 reflect.ValueOf(pkg.StatusNotAcceptable),
		"StatusProxyAuthRequired":             reflect.ValueOf(pkg.StatusProxyAuthRequired),
		"StatusRequestTimeout":                reflect.ValueOf(pkg.StatusRequestTimeout),
		"StatusConflict":                      reflect.ValueOf(pkg.StatusConflict),
		"StatusGone":                          reflect.ValueOf(pkg.StatusGone),
		"StatusLengthRequired":                reflect.ValueOf(pkg.StatusLengthRequired),
		"StatusPreconditionFailed":            reflect.ValueOf(pkg.StatusPreconditionFailed),
		"StatusRequestEntityTooLarge":         reflect.ValueOf(pkg.StatusRequestEntityTooLarge),
		"StatusRequestURITooLong":             reflect.ValueOf(pkg.StatusRequestURITooLong),
		"StatusUnsupportedMediaType":          reflect.ValueOf(pkg.StatusUnsupportedMediaType),
		"StatusRequestedRangeNotSatisfiable":  reflect.ValueOf(pkg.StatusRequestedRangeNotSatisfiable),
		"StatusExpectationFailed":             reflect.ValueOf(pkg.StatusExpectationFailed),
		"StatusTeapot":                        reflect.ValueOf(pkg.StatusTeapot),
		"StatusMisdirectedRequest":            reflect.ValueOf(pkg.StatusMisdirectedRequest),
		"StatusUnprocessableEntity":           reflect.ValueOf(pkg.StatusUnprocessableEntity),
		"StatusLocked":                        reflect.ValueOf(pkg.StatusLocked),
		"StatusFailedDependency":              reflect.ValueOf(pkg.StatusFailedDependency),
		"StatusTooEarly":                      reflect.ValueOf(pkg.StatusTooEarly),
		"StatusUpgradeRequired":               reflect.ValueOf(pkg.StatusUpgradeRequired),
		"StatusPreconditionRequired":          reflect.ValueOf(pkg.StatusPreconditionRequired),
		"StatusTooManyRequests":               reflect.ValueOf(pkg.StatusTooManyRequests),
		"StatusRequestHeaderFieldsTooLarge":   reflect.ValueOf(pkg.StatusRequestHeaderFieldsTooLarge),
		"StatusUnavailableForLegalReasons":    reflect.ValueOf(pkg.StatusUnavailableForLegalReasons),
		"StatusInternalServerError":           reflect.ValueOf(pkg.StatusInternalServerError),
		"StatusNotImplemented":                reflect.ValueOf(pkg.StatusNotImplemented),
		"StatusBadGateway":                    reflect.ValueOf(pkg.StatusBadGateway),
		"StatusServiceUnavailable":            reflect.ValueOf(pkg.StatusServiceUnavailable),
		"StatusGatewayTimeout":                reflect.ValueOf(pkg.StatusGatewayTimeout),
		"StatusHTTPVersionNotSupported":       reflect.ValueOf(pkg.StatusHTTPVersionNotSupported),
		"StatusVariantAlsoNegotiates":         reflect.ValueOf(pkg.StatusVariantAlsoNegotiates),
		"StatusInsufficientStorage":           reflect.ValueOf(pkg.StatusInsufficientStorage),
		"StatusLoopDetected":                  reflect.ValueOf(pkg.StatusLoopDetected),
		"StatusNotExtended":                   reflect.ValueOf(pkg.StatusNotExtended),
		"StatusNetworkAuthenticationRequired": reflect.ValueOf(pkg.StatusNetworkAuthenticationRequired),
		"MethodGet":                           reflect.ValueOf(pkg.MethodGet),
		"MethodHead":                          reflect.ValueOf(pkg.MethodHead),
		"MethodPost":                          reflect.ValueOf(pkg.MethodPost),
		"MethodPut":                           reflect.ValueOf(pkg.MethodPut),
		"MethodPatch":                         reflect.ValueOf(pkg.MethodPatch),
		"MethodDelete":                        reflect.ValueOf(pkg.MethodDelete),
		"MethodConnect":                       reflect.ValueOf(pkg.MethodConnect),
		"MethodOptions":                       reflect.ValueOf(pkg.MethodOptions),
		"MethodTrace":                         reflect.ValueOf(pkg.MethodTrace),
		"TrailerPrefix":                       reflect.ValueOf(pkg.TrailerPrefix),
		"DefaultMaxHeaderBytes":               reflect.ValueOf(pkg.DefaultMaxHeaderBytes),
		"TimeFormat":                          reflect.ValueOf(pkg.TimeFormat),
		"StateNew":                            reflect.ValueOf(pkg.StateNew),
		"StateActive":                         reflect.ValueOf(pkg.StateActive),
		"StateIdle":                           reflect.ValueOf(pkg.StateIdle),
		"StateHijacked":                       reflect.ValueOf(pkg.StateHijacked),
		"StateClosed":                         reflect.ValueOf(pkg.StateClosed),
		"SameSiteDefaultMode":                 reflect.ValueOf(pkg.SameSiteDefaultMode),
		"SameSiteLaxMode":                     reflect.ValueOf(pkg.SameSiteLaxMode),
		"SameSiteStrictMode":                  reflect.ValueOf(pkg.SameSiteStrictMode),
		"SameSiteNoneMode":                    reflect.ValueOf(pkg.SameSiteNoneMode),
		"DefaultMaxIdleConnsPerHost":          reflect.ValueOf(pkg.DefaultMaxIdleConnsPerHost),

		// Variables

		"ErrLineTooLong":          reflect.ValueOf(&pkg.ErrLineTooLong),
		"ErrBodyReadAfterClose":   reflect.ValueOf(&pkg.ErrBodyReadAfterClose),
		"DefaultClient":           reflect.ValueOf(&pkg.DefaultClient),
		"ErrUseLastResponse":      reflect.ValueOf(&pkg.ErrUseLastResponse),
		"ErrMissingFile":          reflect.ValueOf(&pkg.ErrMissingFile),
		"ErrNotSupported":         reflect.ValueOf(&pkg.ErrNotSupported),
		"ErrUnexpectedTrailer":    reflect.ValueOf(&pkg.ErrUnexpectedTrailer),
		"ErrMissingBoundary":      reflect.ValueOf(&pkg.ErrMissingBoundary),
		"ErrNotMultipart":         reflect.ValueOf(&pkg.ErrNotMultipart),
		"ErrHeaderTooLong":        reflect.ValueOf(&pkg.ErrHeaderTooLong),
		"ErrShortBody":            reflect.ValueOf(&pkg.ErrShortBody),
		"ErrMissingContentLength": reflect.ValueOf(&pkg.ErrMissingContentLength),
		"ErrNoCookie":             reflect.ValueOf(&pkg.ErrNoCookie),
		"NoBody":                  reflect.ValueOf(&pkg.NoBody),
		"ErrBodyNotAllowed":       reflect.ValueOf(&pkg.ErrBodyNotAllowed),
		"ErrHijacked":             reflect.ValueOf(&pkg.ErrHijacked),
		"ErrContentLength":        reflect.ValueOf(&pkg.ErrContentLength),
		"ErrWriteAfterFlush":      reflect.ValueOf(&pkg.ErrWriteAfterFlush),
		"ServerContextKey":        reflect.ValueOf(&pkg.ServerContextKey),
		"LocalAddrContextKey":     reflect.ValueOf(&pkg.LocalAddrContextKey),
		"ErrAbortHandler":         reflect.ValueOf(&pkg.ErrAbortHandler),
		"DefaultServeMux":         reflect.ValueOf(&pkg.DefaultServeMux),
		"ErrServerClosed":         reflect.ValueOf(&pkg.ErrServerClosed),
		"ErrHandlerTimeout":       reflect.ValueOf(&pkg.ErrHandlerTimeout),
		"ErrNoLocation":           reflect.ValueOf(&pkg.ErrNoLocation),
		"DefaultTransport":        reflect.ValueOf(&pkg.DefaultTransport),
		"ErrSkipAltProtocol":      reflect.ValueOf(&pkg.ErrSkipAltProtocol),
	})
	registerTypes("net/http", map[string]reflect.Type{
		// Non interfaces

		"Client":        reflect.TypeOf((*pkg.Client)(nil)).Elem(),
		"ProtocolError": reflect.TypeOf((*pkg.ProtocolError)(nil)).Elem(),
		"Request":       reflect.TypeOf((*pkg.Request)(nil)).Elem(),
		"Dir":           reflect.TypeOf((*pkg.Dir)(nil)).Elem(),
		"PushOptions":   reflect.TypeOf((*pkg.PushOptions)(nil)).Elem(),
		"HandlerFunc":   reflect.TypeOf((*pkg.HandlerFunc)(nil)).Elem(),
		"ServeMux":      reflect.TypeOf((*pkg.ServeMux)(nil)).Elem(),
		"Server":        reflect.TypeOf((*pkg.Server)(nil)).Elem(),
		"ConnState":     reflect.TypeOf((*pkg.ConnState)(nil)).Elem(),
		"Cookie":        reflect.TypeOf((*pkg.Cookie)(nil)).Elem(),
		"SameSite":      reflect.TypeOf((*pkg.SameSite)(nil)).Elem(),
		"Header":        reflect.TypeOf((*pkg.Header)(nil)).Elem(),
		"Response":      reflect.TypeOf((*pkg.Response)(nil)).Elem(),
		"Transport":     reflect.TypeOf((*pkg.Transport)(nil)).Elem(),
	})
}
